"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var player;!function(e,t){"object"===("undefined"==typeof module?"undefined":_typeof(module))&&"object"===_typeof(module.exports)?module.exports=e.document?t(e,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return t(e)}:t(e)}("undefined"!=typeof window?window:void 0,function(x,e){function g(e){return null!=e&&e===e.window}var t=[],n=Object.getPrototypeOf,s=t.slice,T=t.flat?function(e){return t.flat.call(e)}:function(e){return t.concat.apply([],e)},l=t.push,o=t.indexOf,i={},r=i.toString,b=i.hasOwnProperty,a=b.toString,c=a.call(Object),m={},v=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},P=x.document,u={type:!0,src:!0,nonce:!0,noModule:!0};function S(e,t,n){var i,o,r=(n=n||P).createElement("script");if(r.text=e,t)for(i in u)(o=t[i]||t.getAttribute&&t.getAttribute(i))&&r.setAttribute(i,o);n.head.appendChild(r).parentNode.removeChild(r)}function h(e){return null==e?e+"":"object"===_typeof(e)||"function"==typeof e?i[r.call(e)]||"object":_typeof(e)}var d="3.5.1",A=function e(t,n){return new e.fn.init(t,n)};function p(e){var t=!!e&&"length"in e&&e.length,n=h(e);return!v(e)&&!g(e)&&("array"===n||0===t||"number"==typeof t&&0<t&&t-1 in e)}A.fn=A.prototype={jquery:d,constructor:A,length:0,toArray:function(){return s.call(this)},get:function(e){return null==e?s.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){e=A.merge(this.constructor(),e);return e.prevObject=this,e},each:function(e){return A.each(this,e)},map:function(n){return this.pushStack(A.map(this,function(e,t){return n.call(e,t,e)}))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(A.grep(this,function(e,t){return(t+1)%2}))},odd:function(){return this.pushStack(A.grep(this,function(e,t){return t%2}))},eq:function(e){var t=this.length,e=+e+(e<0?t:0);return this.pushStack(0<=e&&e<t?[this[e]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:t.sort,splice:t.splice},A.extend=A.fn.extend=function(){var e,t,n,i,o,r=arguments[0]||{},a=1,s=arguments.length,l=!1;for("boolean"==typeof r&&(l=r,r=arguments[a]||{},a++),"object"===_typeof(r)||v(r)||(r={}),a===s&&(r=this,a--);a<s;a++)if(null!=(e=arguments[a]))for(t in e)n=e[t],"__proto__"!==t&&r!==n&&(l&&n&&(A.isPlainObject(n)||(i=Array.isArray(n)))?(o=r[t],o=i&&!Array.isArray(o)?[]:i||A.isPlainObject(o)?o:{},i=!1,r[t]=A.extend(l,o,n)):void 0!==n&&(r[t]=n));return r},A.extend({expando:"jQuery"+(d+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){return!(!e||"[object Object]"!==r.call(e))&&(!(e=n(e))||"function"==typeof(e=b.call(e,"constructor")&&e.constructor)&&a.call(e)===c)},isEmptyObject:function(e){for(var t in e)return!1;return!0},globalEval:function(e,t,n){S(e,{nonce:t&&t.nonce},n)},each:function(e,t){var n,i=0;if(p(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},makeArray:function(e,t){t=t||[];return null!=e&&(p(Object(e))?A.merge(t,"string"==typeof e?[e]:e):l.call(t,e)),t},inArray:function(e,t,n){return null==t?-1:o.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,o=e.length;i<n;i++)e[o++]=t[i];return e.length=o,e},grep:function(e,t,n){for(var i=[],o=0,r=e.length,a=!n;o<r;o++)!t(e[o],o)!=a&&i.push(e[o]);return i},map:function(e,t,n){var i,o,r=0,a=[];if(p(e))for(i=e.length;r<i;r++)null!=(o=t(e[r],r,n))&&a.push(o);else for(r in e)null!=(o=t(e[r],r,n))&&a.push(o);return T(a)},guid:1,support:m}),"function"==typeof Symbol&&(A.fn[Symbol.iterator]=t[Symbol.iterator]),A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){i["[object "+t+"]"]=t.toLowerCase()});var f=function(n){function d(e,t){return e="0x"+e.slice(1)-65536,t||(e<0?String.fromCharCode(65536+e):String.fromCharCode(e>>10|55296,1023&e|56320))}function i(){x()}var e,f,S,r,o,h,p,g,y,l,c,x,P,a,A,T,s,u,b,M="sizzle"+ +new Date,m=n.document,w=0,v=0,C=le(),G=le(),E=le(),H=le(),B=function(e,t){return e===t&&(c=!0),0},D={}.hasOwnProperty,t=[],I=t.pop,k=t.push,L=t.push,N=t.slice,O=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},R="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",V="[\\x20\\t\\r\\n\\f]",W="(?:\\\\[\\da-fA-F]{1,6}"+V+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",F="\\["+V+"*("+W+")(?:"+V+"*([*^$|!~]?=)"+V+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+W+"))|)"+V+"*\\]",_=":("+W+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",X=new RegExp(V+"+","g"),j=new RegExp("^"+V+"+|((?:^|[^\\\\])(?:\\\\.)*)"+V+"+$","g"),q=new RegExp("^"+V+"*,"+V+"*"),U=new RegExp("^"+V+"*([>+~]|"+V+")"+V+"*"),K=new RegExp(V+"|>"),z=new RegExp(_),$=new RegExp("^"+W+"$"),Q={ID:new RegExp("^#("+W+")"),CLASS:new RegExp("^\\.("+W+")"),TAG:new RegExp("^("+W+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+_),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+V+"*(even|odd|(([+-]|)(\\d*)n|)"+V+"*(?:([+-]|)"+V+"*(\\d+)|))"+V+"*\\)|)","i"),bool:new RegExp("^(?:"+R+")$","i"),needsContext:new RegExp("^"+V+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+V+"*((?:-\\d)?\\d*)"+V+"*\\)|)(?=[^-]|$)","i")},Y=/HTML$/i,Z=/^(?:input|select|textarea|button)$/i,J=/^h\d$/i,ee=/^[^{]+\{\s*\[native \w/,te=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,ne=/[+~]/,ie=new RegExp("\\\\[\\da-fA-F]{1,6}"+V+"?|\\\\([^\\r\\n\\f])","g"),oe=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,re=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ae=me(function(e){return!0===e.disabled&&"fieldset"===e.nodeName.toLowerCase()},{dir:"parentNode",next:"legend"});try{L.apply(t=N.call(m.childNodes),m.childNodes),t[m.childNodes.length].nodeType}catch(e){L={apply:t.length?function(e,t){k.apply(e,N.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(t,e,n,i){var o,r,a,s,l,c,u,d=e&&e.ownerDocument,p=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==p&&9!==p&&11!==p)return n;if(!i&&(x(e),e=e||P,A)){if(11!==p&&(l=te.exec(t)))if(o=l[1]){if(9===p){if(!(a=e.getElementById(o)))return n;if(a.id===o)return n.push(a),n}else if(d&&(a=d.getElementById(o))&&b(e,a)&&a.id===o)return n.push(a),n}else{if(l[2])return L.apply(n,e.getElementsByTagName(t)),n;if((o=l[3])&&f.getElementsByClassName&&e.getElementsByClassName)return L.apply(n,e.getElementsByClassName(o)),n}if(f.qsa&&!H[t+" "]&&(!T||!T.test(t))&&(1!==p||"object"!==e.nodeName.toLowerCase())){if(u=t,d=e,1===p&&(K.test(t)||U.test(t))){for((d=ne.test(t)&&ge(e.parentNode)||e)===e&&f.scope||((s=e.getAttribute("id"))?s=s.replace(oe,re):e.setAttribute("id",s=M)),r=(c=h(t)).length;r--;)c[r]=(s?"#"+s:":scope")+" "+be(c[r]);u=c.join(",")}try{return L.apply(n,d.querySelectorAll(u)),n}catch(e){H(t,!0)}finally{s===M&&e.removeAttribute("id")}}}return g(t.replace(j,"$1"),e,n,i)}function le(){var n=[];function i(e,t){return n.push(e+" ")>S.cacheLength&&delete i[n.shift()],i[e+" "]=t}return i}function ce(e){return e[M]=!0,e}function ue(e){var t=P.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),i=n.length;i--;)S.attrHandle[n[i]]=t}function pe(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function fe(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&ae(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function he(a){return ce(function(r){return r=+r,ce(function(e,t){for(var n,i=a([],e.length,r),o=i.length;o--;)e[n=i[o]]&&(e[n]=!(t[n]=e[n]))})})}function ge(e){return e&&void 0!==e.getElementsByTagName&&e}for(e in f=se.support={},o=se.isXML=function(e){var t=e.namespaceURI,e=(e.ownerDocument||e).documentElement;return!Y.test(t||e&&e.nodeName||"HTML")},x=se.setDocument=function(e){var t,e=e?e.ownerDocument||e:m;return e!=P&&9===e.nodeType&&e.documentElement&&(a=(P=e).documentElement,A=!o(P),m!=P&&(t=P.defaultView)&&t.top!==t&&(t.addEventListener?t.addEventListener("unload",i,!1):t.attachEvent&&t.attachEvent("onunload",i)),f.scope=ue(function(e){return a.appendChild(e).appendChild(P.createElement("div")),void 0!==e.querySelectorAll&&!e.querySelectorAll(":scope fieldset div").length}),f.attributes=ue(function(e){return e.className="i",!e.getAttribute("className")}),f.getElementsByTagName=ue(function(e){return e.appendChild(P.createComment("")),!e.getElementsByTagName("*").length}),f.getElementsByClassName=ee.test(P.getElementsByClassName),f.getById=ue(function(e){return a.appendChild(e).id=M,!P.getElementsByName||!P.getElementsByName(M).length}),f.getById?(S.filter.ID=function(e){var t=e.replace(ie,d);return function(e){return e.getAttribute("id")===t}},S.find.ID=function(e,t){if(void 0!==t.getElementById&&A){e=t.getElementById(e);return e?[e]:[]}}):(S.filter.ID=function(e){var t=e.replace(ie,d);return function(e){e=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return e&&e.value===t}},S.find.ID=function(e,t){if(void 0!==t.getElementById&&A){var n,i,o,r=t.getElementById(e);if(r){if((n=r.getAttributeNode("id"))&&n.value===e)return[r];for(o=t.getElementsByName(e),i=0;r=o[i++];)if((n=r.getAttributeNode("id"))&&n.value===e)return[r]}return[]}}),S.find.TAG=f.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):f.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],o=0,r=t.getElementsByTagName(e);if("*"!==e)return r;for(;n=r[o++];)1===n.nodeType&&i.push(n);return i},S.find.CLASS=f.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&A)return t.getElementsByClassName(e)},s=[],T=[],(f.qsa=ee.test(P.querySelectorAll))&&(ue(function(e){var t;a.appendChild(e).innerHTML="<a id='"+M+"'></a><select id='"+M+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&T.push("[*^$]="+V+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||T.push("\\["+V+"*(?:value|"+R+")"),e.querySelectorAll("[id~="+M+"-]").length||T.push("~="),(t=P.createElement("input")).setAttribute("name",""),e.appendChild(t),e.querySelectorAll("[name='']").length||T.push("\\["+V+"*name"+V+"*="+V+"*(?:''|\"\")"),e.querySelectorAll(":checked").length||T.push(":checked"),e.querySelectorAll("a#"+M+"+*").length||T.push(".#.+[+~]"),e.querySelectorAll("\\\f"),T.push("[\\r\\n\\f]")}),ue(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=P.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&T.push("name"+V+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&T.push(":enabled",":disabled"),a.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&T.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),T.push(",.*:")})),(f.matchesSelector=ee.test(u=a.matches||a.webkitMatchesSelector||a.mozMatchesSelector||a.oMatchesSelector||a.msMatchesSelector))&&ue(function(e){f.disconnectedMatch=u.call(e,"*"),u.call(e,"[s!='']:x"),s.push("!=",_)}),T=T.length&&new RegExp(T.join("|")),s=s.length&&new RegExp(s.join("|")),t=ee.test(a.compareDocumentPosition),b=t||ee.test(a.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,t=t&&t.parentNode;return e===t||!(!t||1!==t.nodeType||!(n.contains?n.contains(t):e.compareDocumentPosition&&16&e.compareDocumentPosition(t)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},B=t?function(e,t){if(e===t)return c=!0,0;var n=!e.compareDocumentPosition-!t.compareDocumentPosition;return n||(1&(n=(e.ownerDocument||e)==(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!f.sortDetached&&t.compareDocumentPosition(e)===n?e==P||e.ownerDocument==m&&b(m,e)?-1:t==P||t.ownerDocument==m&&b(m,t)?1:l?O(l,e)-O(l,t):0:4&n?-1:1)}:function(e,t){if(e===t)return c=!0,0;var n,i=0,o=e.parentNode,r=t.parentNode,a=[e],s=[t];if(!o||!r)return e==P?-1:t==P?1:o?-1:r?1:l?O(l,e)-O(l,t):0;if(o===r)return pe(e,t);for(n=e;n=n.parentNode;)a.unshift(n);for(n=t;n=n.parentNode;)s.unshift(n);for(;a[i]===s[i];)i++;return i?pe(a[i],s[i]):a[i]==m?-1:s[i]==m?1:0}),P},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if(x(e),f.matchesSelector&&A&&!H[t+" "]&&(!s||!s.test(t))&&(!T||!T.test(t)))try{var n=u.call(e,t);if(n||f.disconnectedMatch||e.document&&11!==e.document.nodeType)return n}catch(e){H(t,!0)}return 0<se(t,P,null,[e]).length},se.contains=function(e,t){return(e.ownerDocument||e)!=P&&x(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!=P&&x(e);var n=S.attrHandle[t.toLowerCase()],n=n&&D.call(S.attrHandle,t.toLowerCase())?n(e,t,!A):void 0;return void 0!==n?n:f.attributes||!A?e.getAttribute(t):(n=e.getAttributeNode(t))&&n.specified?n.value:null},se.escape=function(e){return(e+"").replace(oe,re)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,n=[],i=0,o=0;if(c=!f.detectDuplicates,l=!f.sortStable&&e.slice(0),e.sort(B),c){for(;t=e[o++];)t===e[o]&&(i=n.push(o));for(;i--;)e.splice(n[i],1)}return l=null,e},r=se.getText=function(e){var t,n="",i=0,o=e.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===o||4===o)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(S=se.selectors={cacheLength:50,createPseudo:ce,match:Q,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(ie,d),e[3]=(e[3]||e[4]||e[5]||"").replace(ie,d),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return Q.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&z.test(n)&&(t=h(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(ie,d).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=C[e+" "];return t||(t=new RegExp("(^|"+V+")"+e+"("+V+"|$)"))&&C(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(t,n,i){return function(e){e=se.attr(e,t);return null==e?"!="===n:!n||(e+="","="===n?e===i:"!="===n?e!==i:"^="===n?i&&0===e.indexOf(i):"*="===n?i&&-1<e.indexOf(i):"$="===n?i&&e.slice(-i.length)===i:"~="===n?-1<(" "+e.replace(X," ")+" ").indexOf(i):"|="===n&&(e===i||e.slice(0,i.length+1)===i+"-"))}},CHILD:function(h,e,t,g,T){var b="nth"!==h.slice(0,3),m="last"!==h.slice(-4),v="of-type"===e;return 1===g&&0===T?function(e){return!!e.parentNode}:function(e,t,n){var i,o,r,a,s,l,c=b!=m?"nextSibling":"previousSibling",u=e.parentNode,d=v&&e.nodeName.toLowerCase(),p=!n&&!v,f=!1;if(u){if(b){for(;c;){for(a=e;a=a[c];)if(v?a.nodeName.toLowerCase()===d:1===a.nodeType)return!1;l=c="only"===h&&!l&&"nextSibling"}return!0}if(l=[m?u.firstChild:u.lastChild],m&&p){for(f=(s=(i=(o=(r=(a=u)[M]||(a[M]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===w&&i[1])&&i[2],a=s&&u.childNodes[s];a=++s&&a&&a[c]||(f=s=0)||l.pop();)if(1===a.nodeType&&++f&&a===e){o[h]=[w,s,f];break}}else if(!1===(f=p?s=(i=(o=(r=(a=e)[M]||(a[M]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]||[])[0]===w&&i[1]:f))for(;(a=++s&&a&&a[c]||(f=s=0)||l.pop())&&((v?a.nodeName.toLowerCase()!==d:1!==a.nodeType)||!++f||(p&&((o=(r=a[M]||(a[M]={}))[a.uniqueID]||(r[a.uniqueID]={}))[h]=[w,f]),a!==e)););return(f-=T)===g||f%g==0&&0<=f/g}}},PSEUDO:function(e,r){var t,a=S.pseudos[e]||S.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return a[M]?a(r):1<a.length?(t=[e,e,"",r],S.setFilters.hasOwnProperty(e.toLowerCase())?ce(function(e,t){for(var n,i=a(e,r),o=i.length;o--;)e[n=O(e,i[o])]=!(t[n]=i[o])}):function(e){return a(e,0,t)}):a}},pseudos:{not:ce(function(e){var i=[],o=[],s=p(e.replace(j,"$1"));return s[M]?ce(function(e,t,n,i){for(var o,r=s(e,null,i,[]),a=e.length;a--;)(o=r[a])&&(e[a]=!(t[a]=o))}):function(e,t,n){return i[0]=e,s(i,null,n,o),i[0]=null,!o.pop()}}),has:ce(function(t){return function(e){return 0<se(t,e).length}}),contains:ce(function(t){return t=t.replace(ie,d),function(e){return-1<(e.textContent||r(e)).indexOf(t)}}),lang:ce(function(n){return $.test(n||"")||se.error("unsupported lang: "+n),n=n.replace(ie,d).toLowerCase(),function(e){var t;do{if(t=A?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(t=t.toLowerCase())===n||0===t.indexOf(n+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}}),target:function(e){var t=n.location&&n.location.hash;return t&&t.slice(1)===e.id},root:function(e){return e===a},focus:function(e){return e===P.activeElement&&(!P.hasFocus||P.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:fe(!1),disabled:fe(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!S.pseudos.empty(e)},header:function(e){return J.test(e.nodeName)},input:function(e){return Z.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(e=e.getAttribute("type"))||"text"===e.toLowerCase())},first:he(function(){return[0]}),last:he(function(e,t){return[t-1]}),eq:he(function(e,t,n){return[n<0?n+t:n]}),even:he(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:he(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:he(function(e,t,n){for(var i=n<0?n+t:t<n?t:n;0<=--i;)e.push(i);return e}),gt:he(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=S.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})S.pseudos[e]=function(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}(e);for(e in{submit:!0,reset:!0})S.pseudos[e]=function(n){return function(e){var t=e.nodeName.toLowerCase();return("input"===t||"button"===t)&&e.type===n}}(e);function Te(){}function be(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function me(a,e,t){var s=e.dir,l=e.next,c=l||s,u=t&&"parentNode"===c,d=v++;return e.first?function(e,t,n){for(;e=e[s];)if(1===e.nodeType||u)return a(e,t,n);return!1}:function(e,t,n){var i,o,r=[w,d];if(n){for(;e=e[s];)if((1===e.nodeType||u)&&a(e,t,n))return!0}else for(;e=e[s];)if(1===e.nodeType||u)if(i=(o=e[M]||(e[M]={}))[e.uniqueID]||(o[e.uniqueID]={}),l&&l===e.nodeName.toLowerCase())e=e[s]||e;else{if((o=i[c])&&o[0]===w&&o[1]===d)return r[2]=o[2];if((i[c]=r)[2]=a(e,t,n))return!0}return!1}}function ve(o){return 1<o.length?function(e,t,n){for(var i=o.length;i--;)if(!o[i](e,t,n))return!1;return!0}:o[0]}function Se(e,t,n,i,o){for(var r,a=[],s=0,l=e.length,c=null!=t;s<l;s++)(r=e[s])&&(n&&!n(r,i,o)||(a.push(r),c&&t.push(s)));return a}function ye(f,h,g,T,b,e){return T&&!T[M]&&(T=ye(T)),b&&!b[M]&&(b=ye(b,e)),ce(function(e,t,n,i){var o,r,a,s=[],l=[],c=t.length,u=e||function(e,t,n){for(var i=0,o=t.length;i<o;i++)se(e,t[i],n);return n}(h||"*",n.nodeType?[n]:n,[]),d=!f||!e&&h?u:Se(u,s,f,n,i),p=g?b||(e?f:c||T)?[]:t:d;if(g&&g(d,p,n,i),T)for(o=Se(p,l),T(o,[],n,i),r=o.length;r--;)(a=o[r])&&(p[l[r]]=!(d[l[r]]=a));if(e){if(b||f){if(b){for(o=[],r=p.length;r--;)(a=p[r])&&o.push(d[r]=a);b(null,p=[],o,i)}for(r=p.length;r--;)(a=p[r])&&-1<(o=b?O(e,a):s[r])&&(e[o]=!(t[o]=a))}}else p=Se(p===t?p.splice(c,p.length):p),b?b(null,t,p,i):L.apply(t,p)})}function xe(T,b){function e(e,t,n,i,o){var r,a,s,l=0,c="0",u=e&&[],d=[],p=y,f=e||v&&S.find.TAG("*",o),h=w+=null==p?1:Math.random()||.1,g=f.length;for(o&&(y=t==P||t||o);c!==g&&null!=(r=f[c]);c++){if(v&&r){for(a=0,t||r.ownerDocument==P||(x(r),n=!A);s=T[a++];)if(s(r,t||P,n)){i.push(r);break}o&&(w=h)}m&&((r=!s&&r)&&l--,e&&u.push(r))}if(l+=c,m&&c!==l){for(a=0;s=b[a++];)s(u,d,t,n);if(e){if(0<l)for(;c--;)u[c]||d[c]||(d[c]=I.call(i));d=Se(d)}L.apply(i,d),o&&!e&&0<d.length&&1<l+b.length&&se.uniqueSort(i)}return o&&(w=h,y=p),u}var m=0<b.length,v=0<T.length;return m?ce(e):e}return Te.prototype=S.filters=S.pseudos,S.setFilters=new Te,h=se.tokenize=function(e,t){var n,i,o,r,a,s,l,c=G[e+" "];if(c)return t?0:c.slice(0);for(a=e,s=[],l=S.preFilter;a;){for(r in n&&!(i=q.exec(a))||(i&&(a=a.slice(i[0].length)||a),s.push(o=[])),n=!1,(i=U.exec(a))&&(n=i.shift(),o.push({value:n,type:i[0].replace(j," ")}),a=a.slice(n.length)),S.filter)!(i=Q[r].exec(a))||l[r]&&!(i=l[r](i))||(n=i.shift(),o.push({value:n,type:r,matches:i}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):G(e,s).slice(0)},p=se.compile=function(e,t){var n,i=[],o=[],r=E[e+" "];if(!r){for(n=(t=t||h(e)).length;n--;)((r=function e(t){for(var i,n,o,r=t.length,a=S.relative[t[0].type],s=a||S.relative[" "],l=a?1:0,c=me(function(e){return e===i},s,!0),u=me(function(e){return-1<O(i,e)},s,!0),d=[function(e,t,n){return n=!a&&(n||t!==y)||((i=t).nodeType?c:u)(e,t,n),i=null,n}];l<r;l++)if(n=S.relative[t[l].type])d=[me(ve(d),n)];else{if((n=S.filter[t[l].type].apply(null,t[l].matches))[M]){for(o=++l;o<r&&!S.relative[t[o].type];o++);return ye(1<l&&ve(d),1<l&&be(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(j,"$1"),n,l<o&&e(t.slice(l,o)),o<r&&e(t=t.slice(o)),o<r&&be(t))}d.push(n)}return ve(d)}(t[n]))[M]?i:o).push(r);(r=E(e,xe(o,i))).selector=e}return r},g=se.select=function(e,t,n,i){var o,r,a,s,l,c="function"==typeof e&&e,u=!i&&h(e=c.selector||e);if(n=n||[],1===u.length){if(2<(r=u[0]=u[0].slice(0)).length&&"ID"===(a=r[0]).type&&9===t.nodeType&&A&&S.relative[r[1].type]){if(!(t=(S.find.ID(a.matches[0].replace(ie,d),t)||[])[0]))return n;c&&(t=t.parentNode),e=e.slice(r.shift().value.length)}for(o=Q.needsContext.test(e)?0:r.length;o--&&(a=r[o],!S.relative[s=a.type]);)if((l=S.find[s])&&(i=l(a.matches[0].replace(ie,d),ne.test(r[0].type)&&ge(t.parentNode)||t))){if(r.splice(o,1),!(e=i.length&&be(r)))return L.apply(n,i),n;break}}return(c||p(e,u))(i,t,!A,n,!t||ne.test(e)&&ge(t.parentNode)||t),n},f.sortStable=M.split("").sort(B).join("")===M,f.detectDuplicates=!!c,x(),f.sortDetached=ue(function(e){return 1&e.compareDocumentPosition(P.createElement("fieldset"))}),ue(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),f.attributes&&ue(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),ue(function(e){return null==e.getAttribute("disabled")})||de(R,function(e,t,n){if(!n)return!0===e[t]?t.toLowerCase():(t=e.getAttributeNode(t))&&t.specified?t.value:null}),se}(x);A.find=f,A.expr=f.selectors,A.expr[":"]=A.expr.pseudos,A.uniqueSort=A.unique=f.uniqueSort,A.text=f.getText,A.isXMLDoc=f.isXML,A.contains=f.contains,A.escapeSelector=f.escape;function y(e,t,n){for(var i=[],o=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(o&&A(e).is(n))break;i.push(e)}return i}function M(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n}var w=A.expr.match.needsContext;function C(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var G=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function E(e,n,i){return v(n)?A.grep(e,function(e,t){return!!n.call(e,t,e)!==i}):n.nodeType?A.grep(e,function(e){return e===n!==i}):"string"!=typeof n?A.grep(e,function(e){return-1<o.call(n,e)!==i}):A.filter(n,e,i)}A.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?A.find.matchesSelector(i,e)?[i]:[]:A.find.matches(e,A.grep(t,function(e){return 1===e.nodeType}))},A.fn.extend({find:function(e){var t,n,i=this.length,o=this;if("string"!=typeof e)return this.pushStack(A(e).filter(function(){for(t=0;t<i;t++)if(A.contains(o[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)A.find(e,o[t],n);return 1<i?A.uniqueSort(n):n},filter:function(e){return this.pushStack(E(this,e||[],!1))},not:function(e){return this.pushStack(E(this,e||[],!0))},is:function(e){return!!E(this,"string"==typeof e&&w.test(e)?A(e):e||[],!1).length}});var H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(A.fn.init=function(e,t,n){if(!e)return this;if(n=n||B,"string"!=typeof e)return e.nodeType?(this[0]=e,this.length=1,this):v(e)?void 0!==n.ready?n.ready(e):e(A):A.makeArray(e,this);if(!(i="<"===e[0]&&">"===e[e.length-1]&&3<=e.length?[null,e,null]:H.exec(e))||!i[1]&&t)return(!t||t.jquery?t||n:this.constructor(t)).find(e);if(i[1]){if(t=t instanceof A?t[0]:t,A.merge(this,A.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:P,!0)),G.test(i[1])&&A.isPlainObject(t))for(var i in t)v(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(e=P.getElementById(i[2]))&&(this[0]=e,this.length=1),this}).prototype=A.fn;var B=A(P),D=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function k(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}A.fn.extend({has:function(e){var t=A(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(A.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,o=this.length,r=[],a="string"!=typeof e&&A(e);if(!w.test(e))for(;i<o;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(a?-1<a.index(n):1===n.nodeType&&A.find.matchesSelector(n,e))){r.push(n);break}return this.pushStack(1<r.length?A.uniqueSort(r):r)},index:function(e){return e?"string"==typeof e?o.call(A(e),this[0]):o.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(A.uniqueSort(A.merge(this.get(),A(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),A.each({parent:function(e){var t;return(t=e.parentNode)&&11!==t.nodeType?t:null},parents:function(e){return y(e,"parentNode")},parentsUntil:function(e,t,n){return y(e,"parentNode",n)},next:function(e){return k(e,"nextSibling")},prev:function(e){return k(e,"previousSibling")},nextAll:function(e){return y(e,"nextSibling")},prevAll:function(e){return y(e,"previousSibling")},nextUntil:function(e,t,n){return y(e,"nextSibling",n)},prevUntil:function(e,t,n){return y(e,"previousSibling",n)},siblings:function(e){return M((e.parentNode||{}).firstChild,e)},children:function(e){return M(e.firstChild)},contents:function(e){return null!=e.contentDocument&&n(e.contentDocument)?e.contentDocument:(C(e,"template")&&(e=e.content||e),A.merge([],e.childNodes))}},function(i,o){A.fn[i]=function(e,t){var n=A.map(this,o,e);return(t="Until"!==i.slice(-5)?e:t)&&"string"==typeof t&&(n=A.filter(t,n)),1<this.length&&(I[i]||A.uniqueSort(n),D.test(i)&&n.reverse()),this.pushStack(n)}});var L=/[^\x20\t\r\n\f]+/g;function N(e){return e}function O(e){throw e}function R(e,t,n,i){var o;try{e&&v(o=e.promise)?o.call(e).done(t).fail(n):e&&v(o=e.then)?o.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}A.Callbacks=function(i){var e,n;i="string"==typeof i?(e=i,n={},A.each(e.match(L)||[],function(e,t){n[t]=!0}),n):A.extend({},i);function o(){for(s=s||i.once,a=r=!0;c.length;u=-1)for(t=c.shift();++u<l.length;)!1===l[u].apply(t[0],t[1])&&i.stopOnFalse&&(u=l.length,t=!1);i.memory||(t=!1),r=!1,s&&(l=t?[]:"")}var r,t,a,s,l=[],c=[],u=-1,d={add:function(){return l&&(t&&!r&&(u=l.length-1,c.push(t)),function n(e){A.each(e,function(e,t){v(t)?i.unique&&d.has(t)||l.push(t):t&&t.length&&"string"!==h(t)&&n(t)})}(arguments),t&&!r&&o()),this},remove:function(){return A.each(arguments,function(e,t){for(var n;-1<(n=A.inArray(t,l,n));)l.splice(n,1),n<=u&&u--}),this},has:function(e){return e?-1<A.inArray(e,l):0<l.length},empty:function(){return l=l&&[],this},disable:function(){return s=c=[],l=t="",this},disabled:function(){return!l},lock:function(){return s=c=[],t||r||(l=t=""),this},locked:function(){return!!s},fireWith:function(e,t){return s||(t=[e,(t=t||[]).slice?t.slice():t],c.push(t),r||o()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!a}};return d},A.extend({Deferred:function(e){var r=[["notify","progress",A.Callbacks("memory"),A.Callbacks("memory"),2],["resolve","done",A.Callbacks("once memory"),A.Callbacks("once memory"),0,"resolved"],["reject","fail",A.Callbacks("once memory"),A.Callbacks("once memory"),1,"rejected"]],o="pending",a={state:function(){return o},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return a.then(null,e)},pipe:function(){var o=arguments;return A.Deferred(function(i){A.each(r,function(e,t){var n=v(o[t[4]])&&o[t[4]];s[t[1]](function(){var e=n&&n.apply(this,arguments);e&&v(e.promise)?e.promise().progress(i.notify).done(i.resolve).fail(i.reject):i[t[0]+"With"](this,n?[e]:arguments)})}),o=null}).promise()},then:function(t,n,i){var l=0;function c(o,r,a,s){return function(){function e(){var e,t;if(!(o<l)){if((e=a.apply(n,i))===r.promise())throw new TypeError("Thenable self-resolution");t=e&&("object"===_typeof(e)||"function"==typeof e)&&e.then,v(t)?s?t.call(e,c(l,r,N,s),c(l,r,O,s)):(l++,t.call(e,c(l,r,N,s),c(l,r,O,s),c(l,r,N,r.notifyWith))):(a!==N&&(n=void 0,i=[e]),(s||r.resolveWith)(n,i))}}var n=this,i=arguments,t=s?e:function(){try{e()}catch(e){A.Deferred.exceptionHook&&A.Deferred.exceptionHook(e,t.stackTrace),l<=o+1&&(a!==O&&(n=void 0,i=[e]),r.rejectWith(n,i))}};o?t():(A.Deferred.getStackHook&&(t.stackTrace=A.Deferred.getStackHook()),x.setTimeout(t))}}return A.Deferred(function(e){r[0][3].add(c(0,e,v(i)?i:N,e.notifyWith)),r[1][3].add(c(0,e,v(t)?t:N)),r[2][3].add(c(0,e,v(n)?n:O))}).promise()},promise:function(e){return null!=e?A.extend(e,a):a}},s={};return A.each(r,function(e,t){var n=t[2],i=t[5];a[t[1]]=n.add,i&&n.add(function(){o=i},r[3-e][2].disable,r[3-e][3].disable,r[0][2].lock,r[0][3].lock),n.add(t[3].fire),s[t[0]]=function(){return s[t[0]+"With"](this===s?void 0:this,arguments),this},s[t[0]+"With"]=n.fireWith}),a.promise(s),e&&e.call(s,s),s},when:function(e){function t(t){return function(e){o[t]=this,r[t]=1<arguments.length?s.call(arguments):e,--n||a.resolveWith(o,r)}}var n=arguments.length,i=n,o=Array(i),r=s.call(arguments),a=A.Deferred();if(n<=1&&(R(e,a.done(t(i)).resolve,a.reject,!n),"pending"===a.state()||v(r[i]&&r[i].then)))return a.then();for(;i--;)R(r[i],t(i),a.reject);return a.promise()}});var V=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;A.Deferred.exceptionHook=function(e,t){x.console&&x.console.warn&&e&&V.test(e.name)&&x.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},A.readyException=function(e){x.setTimeout(function(){throw e})};var W=A.Deferred();function F(){P.removeEventListener("DOMContentLoaded",F),x.removeEventListener("load",F),A.ready()}A.fn.ready=function(e){return W.then(e).catch(function(e){A.readyException(e)}),this},A.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--A.readyWait:A.isReady)||(A.isReady=!0)!==e&&0<--A.readyWait||W.resolveWith(P,[A])}}),A.ready.then=W.then,"complete"===P.readyState||"loading"!==P.readyState&&!P.documentElement.doScroll?x.setTimeout(A.ready):(P.addEventListener("DOMContentLoaded",F),x.addEventListener("load",F));function _(e,t,n,i,o,r,a){var s=0,l=e.length,c=null==n;if("object"===h(n))for(s in o=!0,n)_(e,t,s,n[s],!0,r,a);else if(void 0!==i&&(o=!0,v(i)||(a=!0),t=c?a?(t.call(e,i),null):(c=t,function(e,t,n){return c.call(A(e),n)}):t))for(;s<l;s++)t(e[s],n,a?i:i.call(e[s],s,t(e[s],n)));return o?e:c?t.call(e):l?t(e[0],n):r}var X=/^-ms-/,j=/-([a-z])/g;function q(e,t){return t.toUpperCase()}function U(e){return e.replace(X,"ms-").replace(j,q)}function K(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType}function z(){this.expando=A.expando+z.uid++}z.uid=1,z.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,o=this.cache(e);if("string"==typeof t)o[U(t)]=n;else for(i in t)o[U(i)]=t[i];return o},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][U(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(U):(t=U(t))in i?[t]:t.match(L)||[]).length;for(;n--;)delete i[t[n]]}void 0!==t&&!A.isEmptyObject(i)||(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){e=e[this.expando];return void 0!==e&&!A.isEmptyObject(e)}};var $=new z,Q=new z,Y=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,Z=/[A-Z]/g;function J(e,t,n){var i,o;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(Z,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n="true"===(o=n)||"false"!==o&&("null"===o?null:o===+o+""?+o:Y.test(o)?JSON.parse(o):o)}catch(e){}Q.set(e,t,n)}else n=void 0;return n}A.extend({hasData:function(e){return Q.hasData(e)||$.hasData(e)},data:function(e,t,n){return Q.access(e,t,n)},removeData:function(e,t){Q.remove(e,t)},_data:function(e,t,n){return $.access(e,t,n)},_removeData:function(e,t){$.remove(e,t)}}),A.fn.extend({data:function(n,e){var t,i,o,r=this[0],a=r&&r.attributes;if(void 0!==n)return"object"===_typeof(n)?this.each(function(){Q.set(this,n)}):_(this,function(e){var t;return r&&void 0===e?void 0!==(t=Q.get(r,n))||void 0!==(t=J(r,n))?t:void 0:void this.each(function(){Q.set(this,n,e)})},null,e,1<arguments.length,null,!0);if(this.length&&(o=Q.get(r),1===r.nodeType&&!$.get(r,"hasDataAttrs"))){for(t=a.length;t--;)a[t]&&0===(i=a[t].name).indexOf("data-")&&(i=U(i.slice(5)),J(r,i,o[i]));$.set(r,"hasDataAttrs",!0)}return o},removeData:function(e){return this.each(function(){Q.remove(this,e)})}}),A.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=$.get(e,t),n&&(!i||Array.isArray(n)?i=$.access(e,t,A.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=A.queue(e,t),i=n.length,o=n.shift(),r=A._queueHooks(e,t);"inprogress"===o&&(o=n.shift(),i--),o&&("fx"===t&&n.unshift("inprogress"),delete r.stop,o.call(e,function(){A.dequeue(e,t)},r)),!i&&r&&r.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return $.get(e,n)||$.access(e,n,{empty:A.Callbacks("once memory").add(function(){$.remove(e,[t+"queue",n])})})}}),A.fn.extend({queue:function(t,n){var e=2;return"string"!=typeof t&&(n=t,t="fx",e--),arguments.length<e?A.queue(this[0],t):void 0===n?this:this.each(function(){var e=A.queue(this,t,n);A._queueHooks(this,t),"fx"===t&&"inprogress"!==e[0]&&A.dequeue(this,t)})},dequeue:function(e){return this.each(function(){A.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){function n(){--o||r.resolveWith(a,[a])}var i,o=1,r=A.Deferred(),a=this,s=this.length;for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";s--;)(i=$.get(a[s],e+"queueHooks"))&&i.empty&&(o++,i.empty.add(n));return n(),r.promise(t)}});var ee=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,te=new RegExp("^(?:([+-])=|)("+ee+")([a-z%]*)$","i"),ne=["Top","Right","Bottom","Left"],ie=P.documentElement,oe=function(e){return A.contains(e.ownerDocument,e)},re={composed:!0};ie.getRootNode&&(oe=function(e){return A.contains(e.ownerDocument,e)||e.getRootNode(re)===e.ownerDocument});var ae=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&oe(e)&&"none"===A.css(e,"display")};function se(e,t,n,i){var o,r,a=20,s=i?function(){return i.cur()}:function(){return A.css(e,t,"")},l=s(),c=n&&n[3]||(A.cssNumber[t]?"":"px"),u=e.nodeType&&(A.cssNumber[t]||"px"!==c&&+l)&&te.exec(A.css(e,t));if(u&&u[3]!==c){for(l/=2,c=c||u[3],u=+l||1;a--;)A.style(e,t,u+c),(1-r)*(1-(r=s()/l||.5))<=0&&(a=0),u/=r;u*=2,A.style(e,t,u+c),n=n||[]}return n&&(u=+u||+l||0,o=n[1]?u+(n[1]+1)*n[2]:+n[2],i&&(i.unit=c,i.start=u,i.end=o)),o}var le={};function ce(e,t){for(var n,i,o,r,a,s=[],l=0,c=e.length;l<c;l++)(i=e[l]).style&&(n=i.style.display,t?("none"===n&&(s[l]=$.get(i,"display")||null,s[l]||(i.style.display="")),""===i.style.display&&ae(i)&&(s[l]=(a=r=void 0,r=(o=i).ownerDocument,a=o.nodeName,(o=le[a])||(r=r.body.appendChild(r.createElement(a)),o=A.css(r,"display"),r.parentNode.removeChild(r),"none"===o&&(o="block"),le[a]=o)))):"none"!==n&&(s[l]="none",$.set(i,"display",n)));for(l=0;l<c;l++)null!=s[l]&&(e[l].style.display=s[l]);return e}A.fn.extend({show:function(){return ce(this,!0)},hide:function(){return ce(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){ae(this)?A(this).show():A(this).hide()})}});var ue=/^(?:checkbox|radio)$/i,de=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,pe=/^$|^module$|\/(?:java|ecma)script/i;d=P.createDocumentFragment().appendChild(P.createElement("div")),(f=P.createElement("input")).setAttribute("type","radio"),f.setAttribute("checked","checked"),f.setAttribute("name","t"),d.appendChild(f),m.checkClone=d.cloneNode(!0).cloneNode(!0).lastChild.checked,d.innerHTML="<textarea>x</textarea>",m.noCloneChecked=!!d.cloneNode(!0).lastChild.defaultValue,d.innerHTML="<option></option>",m.option=!!d.lastChild;var fe={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function he(e,t){var n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[];return void 0===t||t&&C(e,t)?A.merge([e],n):n}function ge(e,t){for(var n=0,i=e.length;n<i;n++)$.set(e[n],"globalEval",!t||$.get(t[n],"globalEval"))}fe.tbody=fe.tfoot=fe.colgroup=fe.caption=fe.thead,fe.th=fe.td,m.option||(fe.optgroup=fe.option=[1,"<select multiple='multiple'>","</select>"]);var Te=/<|&#?\w+;/;function be(e,t,n,i,o){for(var r,a,s,l,c,u=t.createDocumentFragment(),d=[],p=0,f=e.length;p<f;p++)if((r=e[p])||0===r)if("object"===h(r))A.merge(d,r.nodeType?[r]:r);else if(Te.test(r)){for(a=a||u.appendChild(t.createElement("div")),s=(de.exec(r)||["",""])[1].toLowerCase(),s=fe[s]||fe._default,a.innerHTML=s[1]+A.htmlPrefilter(r)+s[2],c=s[0];c--;)a=a.lastChild;A.merge(d,a.childNodes),(a=u.firstChild).textContent=""}else d.push(t.createTextNode(r));for(u.textContent="",p=0;r=d[p++];)if(i&&-1<A.inArray(r,i))o&&o.push(r);else if(l=oe(r),a=he(u.appendChild(r),"script"),l&&ge(a),n)for(c=0;r=a[c++];)pe.test(r.type||"")&&n.push(r);return u}var me=/^key/,ve=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Se=/^([^.]*)(?:\.(.+)|)/;function ye(){return!0}function xe(){return!1}function Pe(e,t){return e===function(){try{return P.activeElement}catch(e){}}()==("focus"===t)}function Ae(e,t,n,i,o,r){var a,s;if("object"===_typeof(t)){for(s in"string"!=typeof n&&(i=i||n,n=void 0),t)Ae(e,s,n,i,t[s],r);return e}if(null==i&&null==o?(o=n,i=n=void 0):null==o&&("string"==typeof n?(o=i,i=void 0):(o=i,i=n,n=void 0)),!1===o)o=xe;else if(!o)return e;return 1===r&&(a=o,(o=function(e){return A().off(e),a.apply(this,arguments)}).guid=a.guid||(a.guid=A.guid++)),e.each(function(){A.event.add(this,t,o,i,n)})}function Me(e,o,r){r?($.set(e,o,!1),A.event.add(e,o,{namespace:!1,handler:function(e){var t,n,i=$.get(this,o);if(1&e.isTrigger&&this[o]){if(i.length)(A.event.special[o]||{}).delegateType&&e.stopPropagation();else if(i=s.call(arguments),$.set(this,o,i),t=r(this,o),this[o](),i!==(n=$.get(this,o))||t?$.set(this,o,!1):n={},i!==n)return e.stopImmediatePropagation(),e.preventDefault(),n.value}else i.length&&($.set(this,o,{value:A.event.trigger(A.extend(i[0],A.Event.prototype),i.slice(1),this)}),e.stopImmediatePropagation())}})):void 0===$.get(e,o)&&A.event.add(e,o,ye)}A.event={global:{},add:function(t,e,n,i,o){var r,a,s,l,c,u,d,p,f,h=$.get(t);if(K(t))for(n.handler&&(n=(r=n).handler,o=r.selector),o&&A.find.matchesSelector(ie,o),n.guid||(n.guid=A.guid++),(s=h.events)||(s=h.events=Object.create(null)),(a=h.handle)||(a=h.handle=function(e){return void 0!==A&&A.event.triggered!==e.type?A.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(L)||[""]).length;l--;)d=f=(c=Se.exec(e[l])||[])[1],p=(c[2]||"").split(".").sort(),d&&(u=A.event.special[d]||{},d=(o?u.delegateType:u.bindType)||d,u=A.event.special[d]||{},c=A.extend({type:d,origType:f,data:i,handler:n,guid:n.guid,selector:o,needsContext:o&&A.expr.match.needsContext.test(o),namespace:p.join(".")},r),(f=s[d])||((f=s[d]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(t,i,p,a)||t.addEventListener&&t.addEventListener(d,a)),u.add&&(u.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),o?f.splice(f.delegateCount++,0,c):f.push(c),A.event.global[d]=!0)},remove:function(e,t,n,i,o){var r,a,s,l,c,u,d,p,f,h,g,T=$.hasData(e)&&$.get(e);if(T&&(l=T.events)){for(c=(t=(t||"").match(L)||[""]).length;c--;)if(f=g=(s=Se.exec(t[c])||[])[1],h=(s[2]||"").split(".").sort(),f){for(d=A.event.special[f]||{},p=l[f=(i?d.delegateType:d.bindType)||f]||[],s=s[2]&&new RegExp("(^|\\.)"+h.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=r=p.length;r--;)u=p[r],!o&&g!==u.origType||n&&n.guid!==u.guid||s&&!s.test(u.namespace)||i&&i!==u.selector&&("**"!==i||!u.selector)||(p.splice(r,1),u.selector&&p.delegateCount--,d.remove&&d.remove.call(e,u));a&&!p.length&&(d.teardown&&!1!==d.teardown.call(e,h,T.handle)||A.removeEvent(e,f,T.handle),delete l[f])}else for(f in l)A.event.remove(e,f+t[c],n,i,!0);A.isEmptyObject(l)&&$.remove(e,"handle events")}},dispatch:function(e){var t,n,i,o,r,a=new Array(arguments.length),s=A.event.fix(e),l=($.get(this,"events")||Object.create(null))[s.type]||[],e=A.event.special[s.type]||{};for(a[0]=s,t=1;t<arguments.length;t++)a[t]=arguments[t];if(s.delegateTarget=this,!e.preDispatch||!1!==e.preDispatch.call(this,s)){for(r=A.event.handlers.call(this,s,l),t=0;(i=r[t++])&&!s.isPropagationStopped();)for(s.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!s.isImmediatePropagationStopped();)s.rnamespace&&!1!==o.namespace&&!s.rnamespace.test(o.namespace)||(s.handleObj=o,s.data=o.data,void 0!==(o=((A.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,a))&&!1===(s.result=o)&&(s.preventDefault(),s.stopPropagation()));return e.postDispatch&&e.postDispatch.call(this,s),s.result}},handlers:function(e,t){var n,i,o,r,a,s=[],l=t.delegateCount,c=e.target;if(l&&c.nodeType&&!("click"===e.type&&1<=e.button))for(;c!==this;c=c.parentNode||this)if(1===c.nodeType&&("click"!==e.type||!0!==c.disabled)){for(r=[],a={},n=0;n<l;n++)void 0===a[o=(i=t[n]).selector+" "]&&(a[o]=i.needsContext?-1<A(o,this).index(c):A.find(o,this,null,[c]).length),a[o]&&r.push(i);r.length&&s.push({elem:c,handlers:r})}return c=this,l<t.length&&s.push({elem:c,handlers:t.slice(l)}),s},addProp:function(t,e){Object.defineProperty(A.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(e){return e[A.expando]?e:new A.Event(e)},special:{load:{noBubble:!0},click:{setup:function(e){e=this||e;return ue.test(e.type)&&e.click&&C(e,"input")&&Me(e,"click",ye),!1},trigger:function(e){e=this||e;return ue.test(e.type)&&e.click&&C(e,"input")&&Me(e,"click"),!0},_default:function(e){e=e.target;return ue.test(e.type)&&e.click&&C(e,"input")&&$.get(e,"click")||C(e,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},A.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},A.Event=function(e,t){if(!(this instanceof A.Event))return new A.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?ye:xe,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&A.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[A.expando]=!0},A.Event.prototype={constructor:A.Event,isDefaultPrevented:xe,isPropagationStopped:xe,isImmediatePropagationStopped:xe,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=ye,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=ye,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=ye,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},A.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&me.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&ve.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},A.event.addProp),A.each({focus:"focusin",blur:"focusout"},function(e,t){A.event.special[e]={setup:function(){return Me(this,e,Pe),!1},trigger:function(){return Me(this,e),!0},delegateType:t}}),A.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,o){A.event.special[e]={delegateType:o,bindType:o,handle:function(e){var t,n=e.relatedTarget,i=e.handleObj;return n&&(n===this||A.contains(this,n))||(e.type=i.origType,t=i.handler.apply(this,arguments),e.type=o),t}}}),A.fn.extend({on:function(e,t,n,i){return Ae(this,e,t,n,i)},one:function(e,t,n,i){return Ae(this,e,t,n,i,1)},off:function(e,t,n){var i,o;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,A(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"!==_typeof(e))return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=xe),this.each(function(){A.event.remove(this,e,n,t)});for(o in e)this.off(o,t,e[o]);return this}});var we=/<script|<style|<link/i,Ce=/checked\s*(?:[^=]|=\s*.checked.)/i,Ge=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Ee(e,t){return C(e,"table")&&C(11!==t.nodeType?t:t.firstChild,"tr")&&A(e).children("tbody")[0]||e}function He(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function Be(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function De(e,t){var n,i,o,r;if(1===t.nodeType){if($.hasData(e)&&(r=$.get(e).events))for(o in $.remove(t,"handle events"),r)for(n=0,i=r[o].length;n<i;n++)A.event.add(t,o,r[o][n]);Q.hasData(e)&&(e=Q.access(e),e=A.extend({},e),Q.set(t,e))}}function Ie(n,i,o,r){i=T(i);var e,t,a,s,l,c,u=0,d=n.length,p=d-1,f=i[0],h=v(f);if(h||1<d&&"string"==typeof f&&!m.checkClone&&Ce.test(f))return n.each(function(e){var t=n.eq(e);h&&(i[0]=f.call(this,e,t.html())),Ie(t,i,o,r)});if(d&&(t=(e=be(i,n[0].ownerDocument,!1,n,r)).firstChild,1===e.childNodes.length&&(e=t),t||r)){for(s=(a=A.map(he(e,"script"),He)).length;u<d;u++)l=e,u!==p&&(l=A.clone(l,!0,!0),s&&A.merge(a,he(l,"script"))),o.call(n[u],l,u);if(s)for(c=a[a.length-1].ownerDocument,A.map(a,Be),u=0;u<s;u++)l=a[u],pe.test(l.type||"")&&!$.access(l,"globalEval")&&A.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?A._evalUrl&&!l.noModule&&A._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):S(l.textContent.replace(Ge,""),l,c))}return n}function ke(e,t,n){for(var i,o=t?A.filter(t,e):e,r=0;null!=(i=o[r]);r++)n||1!==i.nodeType||A.cleanData(he(i)),i.parentNode&&(n&&oe(i)&&ge(he(i,"script")),i.parentNode.removeChild(i));return e}A.extend({htmlPrefilter:function(e){return e},clone:function(e,t,n){var i,o,r,a,s,l,c,u=e.cloneNode(!0),d=oe(e);if(!(m.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||A.isXMLDoc(e)))for(a=he(u),i=0,o=(r=he(e)).length;i<o;i++)s=r[i],l=a[i],c=void 0,"input"===(c=l.nodeName.toLowerCase())&&ue.test(s.type)?l.checked=s.checked:"input"!==c&&"textarea"!==c||(l.defaultValue=s.defaultValue);if(t)if(n)for(r=r||he(e),a=a||he(u),i=0,o=r.length;i<o;i++)De(r[i],a[i]);else De(e,u);return 0<(a=he(u,"script")).length&&ge(a,!d&&he(e,"script")),u},cleanData:function(e){for(var t,n,i,o=A.event.special,r=0;void 0!==(n=e[r]);r++)if(K(n)){if(t=n[$.expando]){if(t.events)for(i in t.events)o[i]?A.event.remove(n,i):A.removeEvent(n,i,t.handle);n[$.expando]=void 0}n[Q.expando]&&(n[Q.expando]=void 0)}}}),A.fn.extend({detach:function(e){return ke(this,e,!0)},remove:function(e){return ke(this,e)},text:function(e){return _(this,function(e){return void 0===e?A.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return Ie(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ee(this,e).appendChild(e)})},prepend:function(){return Ie(this,arguments,function(e){var t;1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(t=Ee(this,e)).insertBefore(e,t.firstChild)})},before:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return Ie(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(A.cleanData(he(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return A.clone(this,e,t)})},html:function(e){return _(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!we.test(e)&&!fe[(de.exec(e)||["",""])[1].toLowerCase()]){e=A.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(A.cleanData(he(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var n=[];return Ie(this,arguments,function(e){var t=this.parentNode;A.inArray(this,n)<0&&(A.cleanData(he(this)),t&&t.replaceChild(e,this))},n)}}),A.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,a){A.fn[e]=function(e){for(var t,n=[],i=A(e),o=i.length-1,r=0;r<=o;r++)t=r===o?this:this.clone(!0),A(i[r])[a](t),l.apply(n,t.get());return this.pushStack(n)}});function Le(e,t,n){var i,o={};for(i in t)o[i]=e.style[i],e.style[i]=t[i];for(i in n=n.call(e),t)e.style[i]=o[i];return n}var Ne,Oe,Re,Ve,We,Fe,_e,Xe,je=new RegExp("^("+ee+")(?!px)[a-z%]+$","i"),qe=function(e){var t=e.ownerDocument.defaultView;return(t=!t||!t.opener?x:t).getComputedStyle(e)},Ue=new RegExp(ne.join("|"),"i");function Ke(){var e;Xe&&(_e.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",Xe.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",ie.appendChild(_e).appendChild(Xe),e=x.getComputedStyle(Xe),Ne="1%"!==e.top,Fe=12===ze(e.marginLeft),Xe.style.right="60%",Ve=36===ze(e.right),Oe=36===ze(e.width),Xe.style.position="absolute",Re=12===ze(Xe.offsetWidth/3),ie.removeChild(_e),Xe=null)}function ze(e){return Math.round(parseFloat(e))}function $e(e,t,n){var i,o,r=e.style;return(n=n||qe(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||oe(e)||(o=A.style(e,t)),!m.pixelBoxStyles()&&je.test(o)&&Ue.test(t)&&(i=r.width,e=r.minWidth,t=r.maxWidth,r.minWidth=r.maxWidth=r.width=o,o=n.width,r.width=i,r.minWidth=e,r.maxWidth=t)),void 0!==o?o+"":o}function Qe(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}_e=P.createElement("div"),(Xe=P.createElement("div")).style&&(Xe.style.backgroundClip="content-box",Xe.cloneNode(!0).style.backgroundClip="",m.clearCloneStyle="content-box"===Xe.style.backgroundClip,A.extend(m,{boxSizingReliable:function(){return Ke(),Oe},pixelBoxStyles:function(){return Ke(),Ve},pixelPosition:function(){return Ke(),Ne},reliableMarginLeft:function(){return Ke(),Fe},scrollboxSize:function(){return Ke(),Re},reliableTrDimensions:function(){var e,t,n;return null==We&&(e=P.createElement("table"),n=P.createElement("tr"),t=P.createElement("div"),e.style.cssText="position:absolute;left:-11111px",n.style.height="1px",t.style.height="9px",ie.appendChild(e).appendChild(n).appendChild(t),n=x.getComputedStyle(n),We=3<parseInt(n.height),ie.removeChild(e)),We}}));var Ye=["Webkit","Moz","ms"],Ze=P.createElement("div").style,Je={};function et(e){var t=A.cssProps[e]||Je[e];return t||(e in Ze?e:Je[e]=function(e){for(var t=e[0].toUpperCase()+e.slice(1),n=Ye.length;n--;)if((e=Ye[n]+t)in Ze)return e}(e)||e)}var tt=/^(none|table(?!-c[ea]).+)/,nt=/^--/,it={position:"absolute",visibility:"hidden",display:"block"},ot={letterSpacing:"0",fontWeight:"400"};function rt(e,t,n){var i=te.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function at(e,t,n,i,o,r){var a="width"===t?1:0,s=0,l=0;if(n===(i?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=A.css(e,n+ne[a],!0,o)),i?("content"===n&&(l-=A.css(e,"padding"+ne[a],!0,o)),"margin"!==n&&(l-=A.css(e,"border"+ne[a]+"Width",!0,o))):(l+=A.css(e,"padding"+ne[a],!0,o),"padding"!==n?l+=A.css(e,"border"+ne[a]+"Width",!0,o):s+=A.css(e,"border"+ne[a]+"Width",!0,o));return!i&&0<=r&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-r-l-s-.5))||0),l}function st(e,t,n){var i=qe(e),o=(!m.boxSizingReliable()||n)&&"border-box"===A.css(e,"boxSizing",!1,i),r=o,a=$e(e,t,i),s="offset"+t[0].toUpperCase()+t.slice(1);if(je.test(a)){if(!n)return a;a="auto"}return(!m.boxSizingReliable()&&o||!m.reliableTrDimensions()&&C(e,"tr")||"auto"===a||!parseFloat(a)&&"inline"===A.css(e,"display",!1,i))&&e.getClientRects().length&&(o="border-box"===A.css(e,"boxSizing",!1,i),(r=s in e)&&(a=e[s])),(a=parseFloat(a)||0)+at(e,t,n||(o?"border":"content"),r,i,a)+"px"}function lt(e,t,n,i,o){return new lt.prototype.init(e,t,n,i,o)}A.extend({cssHooks:{opacity:{get:function(e,t){if(t){e=$e(e,"opacity");return""===e?"1":e}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var o,r,a,s=U(t),l=nt.test(t),c=e.style;if(l||(t=et(s)),a=A.cssHooks[t]||A.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(o=a.get(e,!1,i))?o:c[t];"string"===(r=_typeof(n))&&(o=te.exec(n))&&o[1]&&(n=se(e,t,o),r="number"),null!=n&&n==n&&("number"!==r||l||(n+=o&&o[3]||(A.cssNumber[s]?"":"px")),m.clearCloneStyle||""!==n||0!==t.indexOf("background")||(c[t]="inherit"),a&&"set"in a&&void 0===(n=a.set(e,n,i))||(l?c.setProperty(t,n):c[t]=n))}},css:function(e,t,n,i){var o,r=U(t);return nt.test(t)||(t=et(r)),"normal"===(o=void 0===(o=(r=A.cssHooks[t]||A.cssHooks[r])&&"get"in r?r.get(e,!0,n):o)?$e(e,t,i):o)&&t in ot&&(o=ot[t]),""===n||n?(t=parseFloat(o),!0===n||isFinite(t)?t||0:o):o}}),A.each(["height","width"],function(e,s){A.cssHooks[s]={get:function(e,t,n){if(t)return!tt.test(A.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?st(e,s,n):Le(e,it,function(){return st(e,s,n)})},set:function(e,t,n){var i,o=qe(e),r=!m.scrollboxSize()&&"absolute"===o.position,a=(r||n)&&"border-box"===A.css(e,"boxSizing",!1,o),n=n?at(e,s,n,a,o):0;return a&&r&&(n-=Math.ceil(e["offset"+s[0].toUpperCase()+s.slice(1)]-parseFloat(o[s])-at(e,s,"border",!1,o)-.5)),n&&(i=te.exec(t))&&"px"!==(i[3]||"px")&&(e.style[s]=t,t=A.css(e,s)),rt(0,t,n)}}}),A.cssHooks.marginLeft=Qe(m.reliableMarginLeft,function(e,t){if(t)return(parseFloat($e(e,"marginLeft"))||e.getBoundingClientRect().left-Le(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),A.each({margin:"",padding:"",border:"Width"},function(o,r){A.cssHooks[o+r]={expand:function(e){for(var t=0,n={},i="string"==typeof e?e.split(" "):[e];t<4;t++)n[o+ne[t]+r]=i[t]||i[t-2]||i[0];return n}},"margin"!==o&&(A.cssHooks[o+r].set=rt)}),A.fn.extend({css:function(e,t){return _(this,function(e,t,n){var i,o,r={},a=0;if(Array.isArray(t)){for(i=qe(e),o=t.length;a<o;a++)r[t[a]]=A.css(e,t[a],!1,i);return r}return void 0!==n?A.style(e,t,n):A.css(e,t)},e,t,1<arguments.length)}}),(A.Tween=lt).prototype={constructor:lt,init:function(e,t,n,i,o,r){this.elem=e,this.prop=n,this.easing=o||A.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=r||(A.cssNumber[n]?"":"px")},cur:function(){var e=lt.propHooks[this.prop];return(e&&e.get?e:lt.propHooks._default).get(this)},run:function(e){var t,n=lt.propHooks[this.prop];return this.options.duration?this.pos=t=A.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),(n&&n.set?n:lt.propHooks._default).set(this),this}},lt.prototype.init.prototype=lt.prototype,lt.propHooks={_default:{get:function(e){return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(e=A.css(e.elem,e.prop,""))&&"auto"!==e?e:0},set:function(e){A.fx.step[e.prop]?A.fx.step[e.prop](e):1!==e.elem.nodeType||!A.cssHooks[e.prop]&&null==e.elem.style[et(e.prop)]?e.elem[e.prop]=e.now:A.style(e.elem,e.prop,e.now+e.unit)}}},lt.propHooks.scrollTop=lt.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},A.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},A.fx=lt.prototype.init,A.fx.step={};var ct,ut,dt=/^(?:toggle|show|hide)$/,pt=/queueHooks$/;function ft(){ut&&(!1===P.hidden&&x.requestAnimationFrame?x.requestAnimationFrame(ft):x.setTimeout(ft,A.fx.interval),A.fx.tick())}function ht(){return x.setTimeout(function(){ct=void 0}),ct=Date.now()}function gt(e,t){var n,i=0,o={height:e};for(t=t?1:0;i<4;i+=2-t)o["margin"+(n=ne[i])]=o["padding"+n]=e;return t&&(o.opacity=o.width=e),o}function Tt(e,t,n){for(var i,o=(bt.tweeners[t]||[]).concat(bt.tweeners["*"]),r=0,a=o.length;r<a;r++)if(i=o[r].call(n,t,e))return i}function bt(o,e,t){var n,r,i=0,a=bt.prefilters.length,s=A.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var e=ct||ht(),e=Math.max(0,c.startTime+c.duration-e),t=1-(e/c.duration||0),n=0,i=c.tweens.length;n<i;n++)c.tweens[n].run(t);return s.notifyWith(o,[c,t,e]),t<1&&i?e:(i||s.notifyWith(o,[c,1,0]),s.resolveWith(o,[c]),!1)},c=s.promise({elem:o,props:A.extend({},e),opts:A.extend(!0,{specialEasing:{},easing:A.easing._default},t),originalProperties:e,originalOptions:t,startTime:ct||ht(),duration:t.duration,tweens:[],createTween:function(e,t){e=A.Tween(o,c.opts,e,t,c.opts.specialEasing[e]||c.opts.easing);return c.tweens.push(e),e},stop:function(e){var t=0,n=e?c.tweens.length:0;if(r)return this;for(r=!0;t<n;t++)c.tweens[t].run(1);return e?(s.notifyWith(o,[c,1,0]),s.resolveWith(o,[c,e])):s.rejectWith(o,[c,e]),this}}),u=c.props;for(!function(e,t){var n,i,o,r,a;for(n in e)if(o=t[i=U(n)],r=e[n],Array.isArray(r)&&(o=r[1],r=e[n]=r[0]),n!==i&&(e[i]=r,delete e[n]),(a=A.cssHooks[i])&&"expand"in a)for(n in r=a.expand(r),delete e[i],r)n in e||(e[n]=r[n],t[n]=o);else t[i]=o}(u,c.opts.specialEasing);i<a;i++)if(n=bt.prefilters[i].call(c,o,u,c.opts))return v(n.stop)&&(A._queueHooks(c.elem,c.opts.queue).stop=n.stop.bind(n)),n;return A.map(u,Tt,c),v(c.opts.start)&&c.opts.start.call(o,c),c.progress(c.opts.progress).done(c.opts.done,c.opts.complete).fail(c.opts.fail).always(c.opts.always),A.fx.timer(A.extend(l,{elem:o,anim:c,queue:c.opts.queue})),c}A.Animation=A.extend(bt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return se(n.elem,e,te.exec(t),n),n}]},tweener:function(e,t){for(var n,i=0,o=(e=v(e)?(t=e,["*"]):e.match(L)).length;i<o;i++)n=e[i],bt.tweeners[n]=bt.tweeners[n]||[],bt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,o,r,a,s,l,c,u="width"in t||"height"in t,d=this,p={},f=e.style,h=e.nodeType&&ae(e),g=$.get(e,"fxshow");for(i in n.queue||(null==(a=A._queueHooks(e,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,d.always(function(){d.always(function(){a.unqueued--,A.queue(e,"fx").length||a.empty.fire()})})),t)if(o=t[i],dt.test(o)){if(delete t[i],r=r||"toggle"===o,o===(h?"hide":"show")){if("show"!==o||!g||void 0===g[i])continue;h=!0}p[i]=g&&g[i]||A.style(e,i)}if((l=!A.isEmptyObject(t))||!A.isEmptyObject(p))for(i in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(c=g&&g.display)&&(c=$.get(e,"display")),"none"===(u=A.css(e,"display"))&&(c?u=c:(ce([e],!0),c=e.style.display||c,u=A.css(e,"display"),ce([e]))),("inline"===u||"inline-block"===u&&null!=c)&&"none"===A.css(e,"float")&&(l||(d.done(function(){f.display=c}),null==c&&(u=f.display,c="none"===u?"":u)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",d.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,p)l||(g?"hidden"in g&&(h=g.hidden):g=$.access(e,"fxshow",{display:c}),r&&(g.hidden=!h),h&&ce([e],!0),d.done(function(){for(i in h||ce([e]),$.remove(e,"fxshow"),p)A.style(e,i,p[i])})),l=Tt(h?g[i]:0,i,d),i in g||(g[i]=l.start,h&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?bt.prefilters.unshift(e):bt.prefilters.push(e)}}),A.speed=function(e,t,n){var i=e&&"object"===_typeof(e)?A.extend({},e):{complete:n||!n&&t||v(e)&&e,duration:e,easing:n&&t||t&&!v(t)&&t};return A.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in A.fx.speeds?i.duration=A.fx.speeds[i.duration]:i.duration=A.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){v(i.old)&&i.old.call(this),i.queue&&A.dequeue(this,i.queue)},i},A.fn.extend({fadeTo:function(e,t,n,i){return this.filter(ae).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(t,e,n,i){var o=A.isEmptyObject(t),r=A.speed(e,n,i),i=function(){var e=bt(this,A.extend({},t),r);(o||$.get(this,"finish"))&&e.stop(!0)};return i.finish=i,o||!1===r.queue?this.each(i):this.queue(r.queue,i)},stop:function(o,e,r){function a(e){var t=e.stop;delete e.stop,t(r)}return"string"!=typeof o&&(r=e,e=o,o=void 0),e&&this.queue(o||"fx",[]),this.each(function(){var e=!0,t=null!=o&&o+"queueHooks",n=A.timers,i=$.get(this);if(t)i[t]&&i[t].stop&&a(i[t]);else for(t in i)i[t]&&i[t].stop&&pt.test(t)&&a(i[t]);for(t=n.length;t--;)n[t].elem!==this||null!=o&&n[t].queue!==o||(n[t].anim.stop(r),e=!1,n.splice(t,1));!e&&r||A.dequeue(this,o)})},finish:function(a){return!1!==a&&(a=a||"fx"),this.each(function(){var e,t=$.get(this),n=t[a+"queue"],i=t[a+"queueHooks"],o=A.timers,r=n?n.length:0;for(t.finish=!0,A.queue(this,a,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===a&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<r;e++)n[e]&&n[e].finish&&n[e].finish.call(this);delete t.finish})}}),A.each(["toggle","show","hide"],function(e,i){var o=A.fn[i];A.fn[i]=function(e,t,n){return null==e||"boolean"==typeof e?o.apply(this,arguments):this.animate(gt(i,!0),e,t,n)}}),A.each({slideDown:gt("show"),slideUp:gt("hide"),slideToggle:gt("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,i){A.fn[e]=function(e,t,n){return this.animate(i,e,t,n)}}),A.timers=[],A.fx.tick=function(){var e,t=0,n=A.timers;for(ct=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||A.fx.stop(),ct=void 0},A.fx.timer=function(e){A.timers.push(e),A.fx.start()},A.fx.interval=13,A.fx.start=function(){ut||(ut=!0,ft())},A.fx.stop=function(){ut=null},A.fx.speeds={slow:600,fast:200,_default:400},A.fn.delay=function(i,e){return i=A.fx&&A.fx.speeds[i]||i,e=e||"fx",this.queue(e,function(e,t){var n=x.setTimeout(e,i);t.stop=function(){x.clearTimeout(n)}})},d=P.createElement("input"),ee=P.createElement("select").appendChild(P.createElement("option")),d.type="checkbox",m.checkOn=""!==d.value,m.optSelected=ee.selected,(d=P.createElement("input")).value="t",d.type="radio",m.radioValue="t"===d.value;var mt,vt=A.expr.attrHandle;A.fn.extend({attr:function(e,t){return _(this,A.attr,e,t,1<arguments.length)},removeAttr:function(e){return this.each(function(){A.removeAttr(this,e)})}}),A.extend({attr:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return void 0===e.getAttribute?A.prop(e,t,n):(1===r&&A.isXMLDoc(e)||(o=A.attrHooks[t.toLowerCase()]||(A.expr.match.bool.test(t)?mt:void 0)),void 0!==n?null===n?void A.removeAttr(e,t):o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:(e.setAttribute(t,n+""),n):!(o&&"get"in o&&null!==(i=o.get(e,t)))&&null==(i=A.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!m.radioValue&&"radio"===t&&C(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,o=t&&t.match(L);if(o&&1===e.nodeType)for(;n=o[i++];)e.removeAttribute(n)}}),mt={set:function(e,t,n){return!1===t?A.removeAttr(e,n):e.setAttribute(n,n),n}},A.each(A.expr.match.bool.source.match(/\w+/g),function(e,t){var a=vt[t]||A.find.attr;vt[t]=function(e,t,n){var i,o,r=t.toLowerCase();return n||(o=vt[r],vt[r]=i,i=null!=a(e,t,n)?r:null,vt[r]=o),i}});var St=/^(?:input|select|textarea|button)$/i,yt=/^(?:a|area)$/i;function xt(e){return(e.match(L)||[]).join(" ")}function Pt(e){return e.getAttribute&&e.getAttribute("class")||""}function At(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(L)||[]}A.fn.extend({prop:function(e,t){return _(this,A.prop,e,t,1<arguments.length)},removeProp:function(e){return this.each(function(){delete this[A.propFix[e]||e]})}}),A.extend({prop:function(e,t,n){var i,o,r=e.nodeType;if(3!==r&&8!==r&&2!==r)return 1===r&&A.isXMLDoc(e)||(t=A.propFix[t]||t,o=A.propHooks[t]),void 0!==n?o&&"set"in o&&void 0!==(i=o.set(e,n,t))?i:e[t]=n:o&&"get"in o&&null!==(i=o.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=A.find.attr(e,"tabindex");return t?parseInt(t,10):St.test(e.nodeName)||yt.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),m.optSelected||(A.propHooks.selected={get:function(e){e=e.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(e){e=e.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),A.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){A.propFix[this.toLowerCase()]=this}),A.fn.extend({addClass:function(t){var e,n,i,o,r,a,s=0;if(v(t))return this.each(function(e){A(this).addClass(t.call(this,e,Pt(this)))});if((e=At(t)).length)for(;n=this[s++];)if(a=Pt(n),i=1===n.nodeType&&" "+xt(a)+" "){for(r=0;o=e[r++];)i.indexOf(" "+o+" ")<0&&(i+=o+" ");a!==(a=xt(i))&&n.setAttribute("class",a)}return this},removeClass:function(t){var e,n,i,o,r,a,s=0;if(v(t))return this.each(function(e){A(this).removeClass(t.call(this,e,Pt(this)))});if(!arguments.length)return this.attr("class","");if((e=At(t)).length)for(;n=this[s++];)if(a=Pt(n),i=1===n.nodeType&&" "+xt(a)+" "){for(r=0;o=e[r++];)for(;-1<i.indexOf(" "+o+" ");)i=i.replace(" "+o+" "," ");a!==(a=xt(i))&&n.setAttribute("class",a)}return this},toggleClass:function(o,t){var r=_typeof(o),a="string"===r||Array.isArray(o);return"boolean"==typeof t&&a?t?this.addClass(o):this.removeClass(o):v(o)?this.each(function(e){A(this).toggleClass(o.call(this,e,Pt(this),t),t)}):this.each(function(){var e,t,n,i;if(a)for(t=0,n=A(this),i=At(o);e=i[t++];)n.hasClass(e)?n.removeClass(e):n.addClass(e);else void 0!==o&&"boolean"!==r||((e=Pt(this))&&$.set(this,"__className__",e),this.setAttribute&&this.setAttribute("class",!e&&!1!==o&&$.get(this,"__className__")||""))})},hasClass:function(e){for(var t,n=0,i=" "+e+" ";t=this[n++];)if(1===t.nodeType&&-1<(" "+xt(Pt(t))+" ").indexOf(i))return!0;return!1}});var Mt=/\r/g;A.fn.extend({val:function(t){var n,e,i,o=this[0];return arguments.length?(i=v(t),this.each(function(e){1===this.nodeType&&(null==(e=i?t.call(this,e,A(this).val()):t)?e="":"number"==typeof e?e+="":Array.isArray(e)&&(e=A.map(e,function(e){return null==e?"":e+""})),(n=A.valHooks[this.type]||A.valHooks[this.nodeName.toLowerCase()])&&"set"in n&&void 0!==n.set(this,e,"value")||(this.value=e))})):o?(n=A.valHooks[o.type]||A.valHooks[o.nodeName.toLowerCase()])&&"get"in n&&void 0!==(e=n.get(o,"value"))?e:"string"==typeof(e=o.value)?e.replace(Mt,""):null==e?"":e:void 0}}),A.extend({valHooks:{option:{get:function(e){var t=A.find.attr(e,"value");return null!=t?t:xt(A.text(e))}},select:{get:function(e){for(var t,n=e.options,i=e.selectedIndex,o="select-one"===e.type,r=o?null:[],a=o?i+1:n.length,s=i<0?a:o?i:0;s<a;s++)if(((t=n[s]).selected||s===i)&&!t.disabled&&(!t.parentNode.disabled||!C(t.parentNode,"optgroup"))){if(t=A(t).val(),o)return t;r.push(t)}return r},set:function(e,t){for(var n,i,o=e.options,r=A.makeArray(t),a=o.length;a--;)((i=o[a]).selected=-1<A.inArray(A.valHooks.option.get(i),r))&&(n=!0);return n||(e.selectedIndex=-1),r}}}}),A.each(["radio","checkbox"],function(){A.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=-1<A.inArray(A(e).val(),t)}},m.checkOn||(A.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),m.focusin="onfocusin"in x;function wt(e){e.stopPropagation()}var Ct=/^(?:focusinfocus|focusoutblur)$/;A.extend(A.event,{trigger:function(e,t,n,i){var o,r,a,s,l,c,u,d=[n||P],p=b.call(e,"type")?e.type:e,f=b.call(e,"namespace")?e.namespace.split("."):[],h=u=r=n=n||P;if(3!==n.nodeType&&8!==n.nodeType&&!Ct.test(p+A.event.triggered)&&(-1<p.indexOf(".")&&(p=(f=p.split(".")).shift(),f.sort()),s=p.indexOf(":")<0&&"on"+p,(e=e[A.expando]?e:new A.Event(p,"object"===_typeof(e)&&e)).isTrigger=i?2:3,e.namespace=f.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=n),t=null==t?[e]:A.makeArray(t,[e]),c=A.event.special[p]||{},i||!c.trigger||!1!==c.trigger.apply(n,t))){if(!i&&!c.noBubble&&!g(n)){for(a=c.delegateType||p,Ct.test(a+p)||(h=h.parentNode);h;h=h.parentNode)d.push(h),r=h;r===(n.ownerDocument||P)&&d.push(r.defaultView||r.parentWindow||x)}for(o=0;(h=d[o++])&&!e.isPropagationStopped();)u=h,e.type=1<o?a:c.bindType||p,(l=($.get(h,"events")||Object.create(null))[e.type]&&$.get(h,"handle"))&&l.apply(h,t),(l=s&&h[s])&&l.apply&&K(h)&&(e.result=l.apply(h,t),!1===e.result&&e.preventDefault());return e.type=p,i||e.isDefaultPrevented()||c._default&&!1!==c._default.apply(d.pop(),t)||!K(n)||s&&v(n[p])&&!g(n)&&((r=n[s])&&(n[s]=null),A.event.triggered=p,e.isPropagationStopped()&&u.addEventListener(p,wt),n[p](),e.isPropagationStopped()&&u.removeEventListener(p,wt),A.event.triggered=void 0,r&&(n[s]=r)),e.result}},simulate:function(e,t,n){e=A.extend(new A.Event,n,{type:e,isSimulated:!0});A.event.trigger(e,null,t)}}),A.fn.extend({trigger:function(e,t){return this.each(function(){A.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return A.event.trigger(e,t,n,!0)}}),m.focusin||A.each({focus:"focusin",blur:"focusout"},function(n,i){function o(e){A.event.simulate(i,e.target,A.event.fix(e))}A.event.special[i]={setup:function(){var e=this.ownerDocument||this.document||this,t=$.access(e,i);t||e.addEventListener(n,o,!0),$.access(e,i,(t||0)+1)},teardown:function(){var e=this.ownerDocument||this.document||this,t=$.access(e,i)-1;t?$.access(e,i,t):(e.removeEventListener(n,o,!0),$.remove(e,i))}}});var Gt=x.location,Et={guid:Date.now()},Ht=/\?/;A.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new x.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||A.error("Invalid XML: "+e),t};var Bt=/\[\]$/,Dt=/\r?\n/g,It=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;A.param=function(e,t){function n(e,t){t=v(t)?t():t,o[o.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==t?"":t)}var i,o=[];if(null==e)return"";if(Array.isArray(e)||e.jquery&&!A.isPlainObject(e))A.each(e,function(){n(this.name,this.value)});else for(i in e)!function n(i,e,o,r){if(Array.isArray(e))A.each(e,function(e,t){o||Bt.test(i)?r(i,t):n(i+"["+("object"===_typeof(t)&&null!=t?e:"")+"]",t,o,r)});else if(o||"object"!==h(e))r(i,e);else for(var t in e)n(i+"["+t+"]",e[t],o,r)}(i,e[i],t,n);return o.join("&")},A.fn.extend({serialize:function(){return A.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=A.prop(this,"elements");return e?A.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!A(this).is(":disabled")&&kt.test(this.nodeName)&&!It.test(e)&&(this.checked||!ue.test(e))}).map(function(e,t){var n=A(this).val();return null==n?null:Array.isArray(n)?A.map(n,function(e){return{name:t.name,value:e.replace(Dt,"\r\n")}}):{name:t.name,value:n.replace(Dt,"\r\n")}}).get()}});var Lt=/%20/g,Nt=/#.*$/,Ot=/([?&])_=[^&]*/,Rt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Vt=/^(?:GET|HEAD)$/,Wt=/^\/\//,Ft={},_t={},Xt="*/".concat("*"),jt=P.createElement("a");function qt(r){return function(e,t){"string"!=typeof e&&(t=e,e="*");var n,i=0,o=e.toLowerCase().match(L)||[];if(v(t))for(;n=o[i++];)"+"===n[0]?(n=n.slice(1)||"*",(r[n]=r[n]||[]).unshift(t)):(r[n]=r[n]||[]).push(t)}}function Ut(t,i,o,r){var a={},s=t===_t;function l(e){var n;return a[e]=!0,A.each(t[e]||[],function(e,t){t=t(i,o,r);return"string"!=typeof t||s||a[t]?s?!(n=t):void 0:(i.dataTypes.unshift(t),l(t),!1)}),n}return l(i.dataTypes[0])||!a["*"]&&l("*")}function Kt(e,t){var n,i,o=A.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((o[n]?e:i=i||{})[n]=t[n]);return i&&A.extend(!0,e,i),e}jt.href=Gt.href,A.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:Gt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(Gt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Xt,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":A.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Kt(Kt(e,A.ajaxSettings),t):Kt(A.ajaxSettings,e)},ajaxPrefilter:qt(Ft),ajaxTransport:qt(_t),ajax:function(e,t){"object"===_typeof(e)&&(t=e,e=void 0),t=t||{};var l,c,u,n,d,i,p,f,o,h=A.ajaxSetup({},t),g=h.context||h,T=h.context&&(g.nodeType||g.jquery)?A(g):A.event,b=A.Deferred(),m=A.Callbacks("once memory"),v=h.statusCode||{},r={},a={},s="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(p){if(!n)for(n={};t=Rt.exec(u);)n[t[1].toLowerCase()+" "]=(n[t[1].toLowerCase()+" "]||[]).concat(t[2]);t=n[e.toLowerCase()+" "]}return null==t?null:t.join(", ")},getAllResponseHeaders:function(){return p?u:null},setRequestHeader:function(e,t){return null==p&&(e=a[e.toLowerCase()]=a[e.toLowerCase()]||e,r[e]=t),this},overrideMimeType:function(e){return null==p&&(h.mimeType=e),this},statusCode:function(e){if(e)if(p)S.always(e[S.status]);else for(var t in e)v[t]=[v[t],e[t]];return this},abort:function(e){e=e||s;return l&&l.abort(e),y(0,e),this}};if(b.promise(S),h.url=((e||h.url||Gt.href)+"").replace(Wt,Gt.protocol+"//"),h.type=t.method||t.type||h.method||h.type,h.dataTypes=(h.dataType||"*").toLowerCase().match(L)||[""],null==h.crossDomain){i=P.createElement("a");try{i.href=h.url,i.href=i.href,h.crossDomain=jt.protocol+"//"+jt.host!=i.protocol+"//"+i.host}catch(e){h.crossDomain=!0}}if(h.data&&h.processData&&"string"!=typeof h.data&&(h.data=A.param(h.data,h.traditional)),Ut(Ft,h,t,S),p)return S;for(o in(f=A.event&&h.global)&&0==A.active++&&A.event.trigger("ajaxStart"),h.type=h.type.toUpperCase(),h.hasContent=!Vt.test(h.type),c=h.url.replace(Nt,""),h.hasContent?h.data&&h.processData&&0===(h.contentType||"").indexOf("application/x-www-form-urlencoded")&&(h.data=h.data.replace(Lt,"+")):(e=h.url.slice(c.length),h.data&&(h.processData||"string"==typeof h.data)&&(c+=(Ht.test(c)?"&":"?")+h.data,delete h.data),!1===h.cache&&(c=c.replace(Ot,"$1"),e=(Ht.test(c)?"&":"?")+"_="+Et.guid+++e),h.url=c+e),h.ifModified&&(A.lastModified[c]&&S.setRequestHeader("If-Modified-Since",A.lastModified[c]),A.etag[c]&&S.setRequestHeader("If-None-Match",A.etag[c])),(h.data&&h.hasContent&&!1!==h.contentType||t.contentType)&&S.setRequestHeader("Content-Type",h.contentType),S.setRequestHeader("Accept",h.dataTypes[0]&&h.accepts[h.dataTypes[0]]?h.accepts[h.dataTypes[0]]+("*"!==h.dataTypes[0]?", "+Xt+"; q=0.01":""):h.accepts["*"]),h.headers)S.setRequestHeader(o,h.headers[o]);if(h.beforeSend&&(!1===h.beforeSend.call(g,S,h)||p))return S.abort();if(s="abort",m.add(h.complete),S.done(h.success),S.fail(h.error),l=Ut(_t,h,t,S)){if(S.readyState=1,f&&T.trigger("ajaxSend",[S,h]),p)return S;h.async&&0<h.timeout&&(d=x.setTimeout(function(){S.abort("timeout")},h.timeout));try{p=!1,l.send(r,y)}catch(e){if(p)throw e;y(-1,e)}}else y(-1,"No Transport");function y(e,t,n,i){var o,r,a,s=t;p||(p=!0,d&&x.clearTimeout(d),l=void 0,u=i||"",S.readyState=0<e?4:0,i=200<=e&&e<300||304===e,n&&(a=function(e,t,n){for(var i,o,r,a,s=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(o in s)if(s[o]&&s[o].test(i)){l.unshift(o);break}if(l[0]in n)r=l[0];else{for(o in n){if(!l[0]||e.converters[o+" "+l[0]]){r=o;break}a=a||o}r=r||a}if(r)return r!==l[0]&&l.unshift(r),n[r]}(h,S,n)),!i&&-1<A.inArray("script",h.dataTypes)&&(h.converters["text script"]=function(){}),a=function(e,t,n,i){var o,r,a,s,l,c={},u=e.dataTypes.slice();if(u[1])for(a in e.converters)c[a.toLowerCase()]=e.converters[a];for(r=u.shift();r;)if(e.responseFields[r]&&(n[e.responseFields[r]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=r,r=u.shift())if("*"===r)r=l;else if("*"!==l&&l!==r){if(!(a=c[l+" "+r]||c["* "+r]))for(o in c)if(s=o.split(" "),s[1]===r&&(a=c[l+" "+s[0]]||c["* "+s[0]])){!0===a?a=c[o]:!0!==c[o]&&(r=s[0],u.unshift(s[1]));break}if(!0!==a)if(a&&e.throws)t=a(t);else try{t=a(t)}catch(e){return{state:"parsererror",error:a?e:"No conversion from "+l+" to "+r}}}return{state:"success",data:t}}(h,a,S,i),i?(h.ifModified&&((n=S.getResponseHeader("Last-Modified"))&&(A.lastModified[c]=n),(n=S.getResponseHeader("etag"))&&(A.etag[c]=n)),204===e||"HEAD"===h.type?s="nocontent":304===e?s="notmodified":(s=a.state,o=a.data,i=!(r=a.error))):(r=s,!e&&s||(s="error",e<0&&(e=0))),S.status=e,S.statusText=(t||s)+"",i?b.resolveWith(g,[o,s,S]):b.rejectWith(g,[S,s,r]),S.statusCode(v),v=void 0,f&&T.trigger(i?"ajaxSuccess":"ajaxError",[S,h,i?o:r]),m.fireWith(g,[S,s]),f&&(T.trigger("ajaxComplete",[S,h]),--A.active||A.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return A.get(e,t,n,"json")},getScript:function(e,t){return A.get(e,void 0,t,"script")}}),A.each(["get","post"],function(e,o){A[o]=function(e,t,n,i){return v(t)&&(i=i||n,n=t,t=void 0),A.ajax(A.extend({url:e,type:o,dataType:i,data:t,success:n},A.isPlainObject(e)&&e))}}),A.ajaxPrefilter(function(e){for(var t in e.headers)"content-type"===t.toLowerCase()&&(e.contentType=e.headers[t]||"")}),A._evalUrl=function(e,t,n){return A.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(e){A.globalEval(e,t,n)}})},A.fn.extend({wrapAll:function(e){return this[0]&&(v(e)&&(e=e.call(this[0])),e=A(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(n){return v(n)?this.each(function(e){A(this).wrapInner(n.call(this,e))}):this.each(function(){var e=A(this),t=e.contents();t.length?t.wrapAll(n):e.append(n)})},wrap:function(t){var n=v(t);return this.each(function(e){A(this).wrapAll(n?t.call(this,e):t)})},unwrap:function(e){return this.parent(e).not("body").each(function(){A(this).replaceWith(this.childNodes)}),this}}),A.expr.pseudos.hidden=function(e){return!A.expr.pseudos.visible(e)},A.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},A.ajaxSettings.xhr=function(){try{return new x.XMLHttpRequest}catch(e){}};var zt={0:200,1223:204},$t=A.ajaxSettings.xhr();m.cors=!!$t&&"withCredentials"in $t,m.ajax=$t=!!$t,A.ajaxTransport(function(o){var r,a;if(m.cors||$t&&!o.crossDomain)return{send:function(e,t){var n,i=o.xhr();if(i.open(o.type,o.url,o.async,o.username,o.password),o.xhrFields)for(n in o.xhrFields)i[n]=o.xhrFields[n];for(n in o.mimeType&&i.overrideMimeType&&i.overrideMimeType(o.mimeType),o.crossDomain||e["X-Requested-With"]||(e["X-Requested-With"]="XMLHttpRequest"),e)i.setRequestHeader(n,e[n]);r=function(e){return function(){r&&(r=a=i.onload=i.onerror=i.onabort=i.ontimeout=i.onreadystatechange=null,"abort"===e?i.abort():"error"===e?"number"!=typeof i.status?t(0,"error"):t(i.status,i.statusText):t(zt[i.status]||i.status,i.statusText,"text"!==(i.responseType||"text")||"string"!=typeof i.responseText?{binary:i.response}:{text:i.responseText},i.getAllResponseHeaders()))}},i.onload=r(),a=i.onerror=i.ontimeout=r("error"),void 0!==i.onabort?i.onabort=a:i.onreadystatechange=function(){4===i.readyState&&x.setTimeout(function(){r&&a()})},r=r("abort");try{i.send(o.hasContent&&o.data||null)}catch(e){if(r)throw e}},abort:function(){r&&r()}}}),A.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),A.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return A.globalEval(e),e}}}),A.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),A.ajaxTransport("script",function(n){var i,o;if(n.crossDomain||n.scriptAttrs)return{send:function(e,t){i=A("<script>").attr(n.scriptAttrs||{}).prop({charset:n.scriptCharset,src:n.url}).on("load error",o=function(e){i.remove(),o=null,e&&t("error"===e.type?404:200,e.type)}),P.head.appendChild(i[0])},abort:function(){o&&o()}}});var Qt=[],Yt=/(=)\?(?=&|$)|\?\?/;A.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Qt.pop()||A.expando+"_"+Et.guid++;return this[e]=!0,e}}),A.ajaxPrefilter("json jsonp",function(e,t,n){var i,o,r,a=!1!==e.jsonp&&(Yt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Yt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return i=e.jsonpCallback=v(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Yt,"$1"+i):!1!==e.jsonp&&(e.url+=(Ht.test(e.url)?"&":"?")+e.jsonp+"="+i),e.converters["script json"]=function(){return r||A.error(i+" was not called"),r[0]},e.dataTypes[0]="json",o=x[i],x[i]=function(){r=arguments},n.always(function(){void 0===o?A(x).removeProp(i):x[i]=o,e[i]&&(e.jsonpCallback=t.jsonpCallback,Qt.push(i)),r&&v(o)&&o(r[0]),r=o=void 0}),"script"}),m.createHTMLDocument=((d=P.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===d.childNodes.length),A.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(m.createHTMLDocument?((i=(t=P.implementation.createHTMLDocument("")).createElement("base")).href=P.location.href,t.head.appendChild(i)):t=P),i=!n&&[],(n=G.exec(e))?[t.createElement(n[1])]:(n=be([e],t,i),i&&i.length&&A(i).remove(),A.merge([],n.childNodes)));var i},A.fn.load=function(e,t,n){var i,o,r,a=this,s=e.indexOf(" ");return-1<s&&(i=xt(e.slice(s)),e=e.slice(0,s)),v(t)?(n=t,t=void 0):t&&"object"===_typeof(t)&&(o="POST"),0<a.length&&A.ajax({url:e,type:o||"GET",dataType:"html",data:t}).done(function(e){r=arguments,a.html(i?A("<div>").append(A.parseHTML(e)).find(i):e)}).always(n&&function(e,t){a.each(function(){n.apply(this,r||[e.responseText,t,e])})}),this},A.expr.pseudos.animated=function(t){return A.grep(A.timers,function(e){return t===e.elem}).length},A.offset={setOffset:function(e,t,n){var i,o,r,a,s=A.css(e,"position"),l=A(e),c={};"static"===s&&(e.style.position="relative"),r=l.offset(),i=A.css(e,"top"),a=A.css(e,"left"),a=("absolute"===s||"fixed"===s)&&-1<(i+a).indexOf("auto")?(o=(s=l.position()).top,s.left):(o=parseFloat(i)||0,parseFloat(a)||0),null!=(t=v(t)?t.call(e,n,A.extend({},r)):t).top&&(c.top=t.top-r.top+o),null!=t.left&&(c.left=t.left-r.left+a),"using"in t?t.using.call(e,c):("number"==typeof c.top&&(c.top+="px"),"number"==typeof c.left&&(c.left+="px"),l.css(c))}},A.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each(function(e){A.offset.setOffset(this,t,e)});var e,n=this[0];return n?n.getClientRects().length?(e=n.getBoundingClientRect(),n=n.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],o={top:0,left:0};if("fixed"===A.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===A.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((o=A(e).offset()).top+=A.css(e,"borderTopWidth",!0),o.left+=A.css(e,"borderLeftWidth",!0))}return{top:t.top-o.top-A.css(i,"marginTop",!0),left:t.left-o.left-A.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===A.css(e,"position");)e=e.offsetParent;return e||ie})}}),A.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(t,o){var r="pageYOffset"===o;A.fn[t]=function(e){return _(this,function(e,t,n){var i;return g(e)?i=e:9===e.nodeType&&(i=e.defaultView),void 0===n?i?i[o]:e[t]:void(i?i.scrollTo(r?i.pageXOffset:n,r?n:i.pageYOffset):e[t]=n)},t,e,arguments.length)}}),A.each(["top","left"],function(e,n){A.cssHooks[n]=Qe(m.pixelPosition,function(e,t){if(t)return t=$e(e,n),je.test(t)?A(e).position()[n]+"px":t})}),A.each({Height:"height",Width:"width"},function(a,s){A.each({padding:"inner"+a,content:s,"":"outer"+a},function(i,r){A.fn[r]=function(e,t){var n=arguments.length&&(i||"boolean"!=typeof e),o=i||(!0===e||!0===t?"margin":"border");return _(this,function(e,t,n){var i;return g(e)?0===r.indexOf("outer")?e["inner"+a]:e.document.documentElement["client"+a]:9===e.nodeType?(i=e.documentElement,Math.max(e.body["scroll"+a],i["scroll"+a],e.body["offset"+a],i["offset"+a],i["client"+a])):void 0===n?A.css(e,t,o):A.style(e,t,n,o)},s,n?e:void 0,n)}})}),A.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){A.fn[t]=function(e){return this.on(t,e)}}),A.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)},hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,n){A.fn[n]=function(e,t){return 0<arguments.length?this.on(n,null,e,t):this.trigger(n)}});var Zt=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;A.proxy=function(e,t){var n,i;if("string"==typeof t&&(i=e[t],t=e,e=i),v(e))return n=s.call(arguments,2),(i=function(){return e.apply(t||this,n.concat(s.call(arguments)))}).guid=e.guid=e.guid||A.guid++,i},A.holdReady=function(e){e?A.readyWait++:A.ready(!0)},A.isArray=Array.isArray,A.parseJSON=JSON.parse,A.nodeName=C,A.isFunction=v,A.isWindow=g,A.camelCase=U,A.type=h,A.now=Date.now,A.isNumeric=function(e){var t=A.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},A.trim=function(e){return null==e?"":(e+"").replace(Zt,"")},"function"==typeof define&&define.amd&&define("jquery",[],function(){return A});var Jt=x.jQuery,en=x.$;return A.noConflict=function(e){return x.$===A&&(x.$=en),e&&x.jQuery===A&&(x.jQuery=Jt),A},void 0===e&&(x.jQuery=x.$=A),A}),function(q){var U={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,wrapperClass:"bx-wrapper",touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,ariaLive:!0,ariaHidden:!0,keyboardEnabled:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",stopAutoOnClick:!1,autoHover:!1,autoDelay:0,autoSlideForOnePage:!1,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,shrinkItems:!1,onSliderLoad:function(){return!0},onSlideBefore:function(){return!0},onSlideAfter:function(){return!0},onSlideNext:function(){return!0},onSlidePrev:function(){return!0},onSliderResize:function(){return!0},onAutoChange:function(){return!0}};q.fn.bxSlider=function(t){if(0===this.length)return this;if(1<this.length)return this.each(function(){q(this).bxSlider(t)}),this;var c={},u=this,o=q(window).width(),r=q(window).height();if(!q(u).data("bxSlider")){var n=function(){q(u).data("bxSlider")||(c.settings=q.extend({},U,t),c.settings.slideWidth=parseInt(c.settings.slideWidth),c.children=u.children(c.settings.slideSelector),c.children.length<c.settings.minSlides&&(c.settings.minSlides=c.children.length),c.children.length<c.settings.maxSlides&&(c.settings.maxSlides=c.children.length),c.settings.randomStart&&(c.settings.startSlide=Math.floor(Math.random()*c.children.length)),c.active={index:c.settings.startSlide},c.carousel=1<c.settings.minSlides||1<c.settings.maxSlides,c.carousel&&(c.settings.preloadImages="all"),c.minThreshold=c.settings.minSlides*c.settings.slideWidth+(c.settings.minSlides-1)*c.settings.slideMargin,c.maxThreshold=c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin,c.working=!1,c.controls={},c.interval=null,c.animProp="vertical"===c.settings.mode?"top":"left",c.usingCSS=c.settings.useCSS&&"fade"!==c.settings.mode&&function(){for(var e=document.createElement("div"),t=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"],n=0;n<t.length;n++)if(void 0!==e.style[t[n]])return c.cssPrefix=t[n].replace("Perspective","").toLowerCase(),c.animProp="-"+c.cssPrefix+"-transform",!0;return!1}(),"vertical"===c.settings.mode&&(c.settings.maxSlides=c.settings.minSlides),u.data("origStyle",u.attr("style")),u.children(c.settings.slideSelector).each(function(){q(this).data("origStyle",q(this).attr("style"))}),e())},e=function(){var e=c.children.eq(c.settings.startSlide);u.wrap('<div class="'+c.settings.wrapperClass+'"><div class="bx-viewport"></div></div>'),c.viewport=u.parent(),c.settings.ariaLive&&!c.settings.ticker&&c.viewport.attr("aria-live","polite"),c.loader=q('<div class="bx-loading" />'),c.viewport.prepend(c.loader),u.css({width:"horizontal"===c.settings.mode?1e3*c.children.length+215+"%":"auto",position:"relative"}),c.usingCSS&&c.settings.easing?u.css("-"+c.cssPrefix+"-transition-timing-function",c.settings.easing):c.settings.easing||(c.settings.easing="swing"),c.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),c.viewport.parent().css({maxWidth:d()}),c.children.css({float:"horizontal"===c.settings.mode?"left":"none",listStyle:"none",position:"relative"}),c.children.css("width",p()),"horizontal"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginRight",c.settings.slideMargin),"vertical"===c.settings.mode&&0<c.settings.slideMargin&&c.children.css("marginBottom",c.settings.slideMargin),"fade"===c.settings.mode&&(c.children.css({position:"absolute",zIndex:0,display:"none"}),c.children.eq(c.settings.startSlide).css({zIndex:c.settings.slideZIndex,display:"block"})),c.controls.el=q('<div class="bx-controls" />'),c.settings.captions&&x(),c.active.last=c.settings.startSlide===h()-1,c.settings.video&&u.fitVids(),"none"===c.settings.preloadImages?e=null:"all"!==c.settings.preloadImages&&!c.settings.ticker||(e=c.children),c.settings.ticker?c.settings.pager=!1:(c.settings.controls&&S(),c.settings.auto&&c.settings.autoControls&&y(),c.settings.pager&&v(),(c.settings.controls||c.settings.autoControls||c.settings.pager)&&c.viewport.after(c.controls.el)),null===e?s():a(e,s)},a=function(e,t){var n=e.find('img:not([src=""]), iframe').length,i=0;0!==n?e.find('img:not([src=""]), iframe').each(function(){q(this).one("load error",function(){++i===n&&t()}).each(function(){!this.complete&&""!=this.src||q(this).trigger("load")})}):t()},s=function(){var e,t;c.settings.infiniteLoop&&"fade"!==c.settings.mode&&!c.settings.ticker&&(t="vertical"===c.settings.mode?c.settings.minSlides:c.settings.maxSlides,e=c.children.slice(0,t).clone(!0).addClass("bx-clone"),t=c.children.slice(-t).clone(!0).addClass("bx-clone"),c.settings.ariaHidden&&(e.attr("aria-hidden",!0),t.attr("aria-hidden",!0)),u.append(e).prepend(t)),c.loader.remove(),T(),"vertical"===c.settings.mode&&(c.settings.adaptiveHeight=!0),c.viewport.height(l()),u.redrawSlider(),c.settings.onSliderLoad.call(u,c.active.index),c.initialized=!0,c.settings.responsive&&q(window).on("resize",X),c.settings.auto&&c.settings.autoStart&&(1<h()||c.settings.autoSlideForOnePage)&&k(),c.settings.ticker&&L(),c.settings.pager&&G(c.settings.startSlide),c.settings.controls&&B(),c.settings.touchEnabled&&!c.settings.ticker&&R(),c.settings.keyboardEnabled&&!c.settings.ticker&&q(document).keydown(O)},l=function(){var t=0,e=q();if("vertical"===c.settings.mode||c.settings.adaptiveHeight)if(c.carousel){var n=1===c.settings.moveSlides?c.active.index:c.active.index*g(),e=c.children.eq(n);for(i=1;i<=c.settings.maxSlides-1;i++)e=n+i>=c.children.length?e.add(c.children.eq(i-1)):e.add(c.children.eq(n+i))}else e=c.children.eq(c.active.index);else e=c.children;return"vertical"===c.settings.mode?(e.each(function(e){t+=q(this).outerHeight()}),0<c.settings.slideMargin&&(t+=c.settings.slideMargin*(c.settings.minSlides-1))):t=Math.max.apply(Math,e.map(function(){return q(this).outerHeight(!1)}).get()),"border-box"===c.viewport.css("box-sizing")?t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))+parseFloat(c.viewport.css("border-top-width"))+parseFloat(c.viewport.css("border-bottom-width")):"padding-box"===c.viewport.css("box-sizing")&&(t+=parseFloat(c.viewport.css("padding-top"))+parseFloat(c.viewport.css("padding-bottom"))),t},d=function(){var e="100%";return e=0<c.settings.slideWidth?"horizontal"===c.settings.mode?c.settings.maxSlides*c.settings.slideWidth+(c.settings.maxSlides-1)*c.settings.slideMargin:c.settings.slideWidth:e},p=function(){var e=c.settings.slideWidth,t=c.viewport.width();if(0===c.settings.slideWidth||c.settings.slideWidth>t&&!c.carousel||"vertical"===c.settings.mode)e=t;else if(1<c.settings.maxSlides&&"horizontal"===c.settings.mode){if(t>c.maxThreshold)return e;t<c.minThreshold?e=(t-c.settings.slideMargin*(c.settings.minSlides-1))/c.settings.minSlides:c.settings.shrinkItems&&(e=Math.floor((t+c.settings.slideMargin)/Math.ceil((t+c.settings.slideMargin)/(e+c.settings.slideMargin))-c.settings.slideMargin))}return e},f=function(){var e,t=1;return"horizontal"===c.settings.mode&&0<c.settings.slideWidth?t=c.viewport.width()<c.minThreshold?c.settings.minSlides:c.viewport.width()>c.maxThreshold?c.settings.maxSlides:(e=c.children.first().width()+c.settings.slideMargin,Math.floor((c.viewport.width()+c.settings.slideMargin)/e)||1):"vertical"===c.settings.mode&&(t=c.settings.minSlides),t},h=function(){var e=0,t=0,n=0;if(0<c.settings.moveSlides){if(!c.settings.infiniteLoop){for(;t<c.children.length;)++e,t=n+f(),n+=c.settings.moveSlides<=f()?c.settings.moveSlides:f();return n}e=Math.ceil(c.children.length/g())}else e=Math.ceil(c.children.length/f());return e},g=function(){return 0<c.settings.moveSlides&&c.settings.moveSlides<=f()?c.settings.moveSlides:f()},T=function(){var e,t;c.children.length>c.settings.maxSlides&&c.active.last&&!c.settings.infiniteLoop?"horizontal"===c.settings.mode?(e=(t=c.children.last()).position(),b(-(e.left-(c.viewport.width()-t.outerWidth())),"reset",0)):"vertical"===c.settings.mode&&(t=c.children.length-c.settings.minSlides,e=c.children.eq(t).position(),b(-e.top,"reset",0)):(e=c.children.eq(c.active.index*g()).position(),c.active.index===h()-1&&(c.active.last=!0),void 0!==e&&("horizontal"===c.settings.mode?b(-e.left,"reset",0):"vertical"===c.settings.mode&&b(-e.top,"reset",0)))},b=function t(e,n,i,o){var r;c.usingCSS?(r="vertical"===c.settings.mode?"translate3d(0, "+e+"px, 0)":"translate3d("+e+"px, 0, 0)",u.css("-"+c.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"===n?(u.css(c.animProp,r),0!==i?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){q(e.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),E())}):E()):"reset"===n?u.css(c.animProp,r):"ticker"===n&&(u.css("-"+c.cssPrefix+"-transition-timing-function","linear"),u.css(c.animProp,r),0!==i?u.on("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(e){q(e.target).is(u)&&(u.off("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),t(o.resetValue,"reset",0),N())}):(t(o.resetValue,"reset",0),N()))):((r={})[c.animProp]=e,"slide"===n?u.animate(r,i,c.settings.easing,function(){E()}):"reset"===n?u.css(c.animProp,e):"ticker"===n&&u.animate(r,i,"linear",function(){t(o.resetValue,"reset",0),N()}))},m=function(){for(var e="",t="",n=h(),i=0;i<n;i++)t="",c.settings.buildPager&&q.isFunction(c.settings.buildPager)||c.settings.pagerCustom?(t=c.settings.buildPager(i),c.pagerEl.addClass("bx-custom-pager")):(t=i+1,c.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+i+'" class="bx-pager-link">'+t+"</a></div>";c.pagerEl.html(e)},v=function(){c.settings.pagerCustom?c.pagerEl=q(c.settings.pagerCustom):(c.pagerEl=q('<div class="bx-pager" />'),c.settings.pagerSelector?q(c.settings.pagerSelector).html(c.pagerEl):c.controls.el.addClass("bx-has-pager").append(c.pagerEl),m()),c.pagerEl.on("click touchend","a",C)},S=function(){c.controls.next=q('<a class="bx-next" href="">'+c.settings.nextText+"</a>"),c.controls.prev=q('<a class="bx-prev" href="">'+c.settings.prevText+"</a>"),c.controls.next.on("click touchend",P),c.controls.prev.on("click touchend",A),c.settings.nextSelector&&q(c.settings.nextSelector).append(c.controls.next),c.settings.prevSelector&&q(c.settings.prevSelector).append(c.controls.prev),c.settings.nextSelector||c.settings.prevSelector||(c.controls.directionEl=q('<div class="bx-controls-direction" />'),c.controls.directionEl.append(c.controls.prev).append(c.controls.next),c.controls.el.addClass("bx-has-controls-direction").append(c.controls.directionEl))},y=function(){c.controls.start=q('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+c.settings.startText+"</a></div>"),c.controls.stop=q('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+c.settings.stopText+"</a></div>"),c.controls.autoEl=q('<div class="bx-controls-auto" />'),c.controls.autoEl.on("click",".bx-start",M),c.controls.autoEl.on("click",".bx-stop",w),c.settings.autoControlsCombine?c.controls.autoEl.append(c.controls.start):c.controls.autoEl.append(c.controls.start).append(c.controls.stop),c.settings.autoControlsSelector?q(c.settings.autoControlsSelector).html(c.controls.autoEl):c.controls.el.addClass("bx-has-controls-auto").append(c.controls.autoEl),H(c.settings.autoStart?"stop":"start")},x=function(){c.children.each(function(e){var t=q(this).find("img:first").attr("title");void 0!==t&&(""+t).length&&q(this).append('<div class="bx-caption"><span>'+t+"</span></div>")})},P=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToNextSlide())},A=function(e){e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),u.goToPrevSlide())},M=function(e){u.startAuto(),e.preventDefault()},w=function(e){u.stopAuto(),e.preventDefault()},C=function(e){var t;e.preventDefault(),c.controls.el.hasClass("disabled")||(c.settings.auto&&c.settings.stopAutoOnClick&&u.stopAuto(),void 0!==(e=q(e.currentTarget)).attr("data-slide-index")&&(t=parseInt(e.attr("data-slide-index")))!==c.active.index&&u.goToSlide(t))},G=function(n){var e=c.children.length;if("short"===c.settings.pagerType)return 1<c.settings.maxSlides&&(e=Math.ceil(c.children.length/c.settings.maxSlides)),void c.pagerEl.html(n+1+c.settings.pagerShortSeparator+e);c.pagerEl.find("a").removeClass("active"),c.pagerEl.each(function(e,t){q(t).find("a").eq(n).addClass("active")})},E=function(){var e;c.settings.infiniteLoop&&(e="",0===c.active.index?e=c.children.eq(0).position():c.active.index===h()-1&&c.carousel?e=c.children.eq((h()-1)*g()).position():c.active.index===c.children.length-1&&(e=c.children.eq(c.children.length-1).position()),e&&("horizontal"===c.settings.mode?b(-e.left,"reset",0):"vertical"===c.settings.mode&&b(-e.top,"reset",0))),c.working=!1,c.settings.onSlideAfter.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)},H=function(e){c.settings.autoControlsCombine?c.controls.autoEl.html(c.controls[e]):(c.controls.autoEl.find("a").removeClass("active"),c.controls.autoEl.find("a:not(.bx-"+e+")").addClass("active"))},B=function(){1===h()?(c.controls.prev.addClass("disabled"),c.controls.next.addClass("disabled")):!c.settings.infiniteLoop&&c.settings.hideControlOnEnd&&(0===c.active.index?(c.controls.prev.addClass("disabled"),c.controls.next.removeClass("disabled")):c.active.index===h()-1?(c.controls.next.addClass("disabled"),c.controls.prev.removeClass("disabled")):(c.controls.prev.removeClass("disabled"),c.controls.next.removeClass("disabled")))},D=function(){u.startAuto()},I=function(){u.stopAuto()},k=function(){0<c.settings.autoDelay?setTimeout(u.startAuto,c.settings.autoDelay):(u.startAuto(),q(window).focus(D).blur(I)),c.settings.autoHover&&u.hover(function(){c.interval&&(u.stopAuto(!0),c.autoPaused=!0)},function(){c.autoPaused&&(u.startAuto(!0),c.autoPaused=null)})},L=function(){var e,t,n,i,o,r,a,s,l=0;"next"===c.settings.autoDirection?u.append(c.children.clone().addClass("bx-clone")):(u.prepend(c.children.clone().addClass("bx-clone")),e=c.children.first().position(),l="horizontal"===c.settings.mode?-e.left:-e.top),b(l,"reset",0),c.settings.pager=!1,c.settings.controls=!1,c.settings.autoControls=!1,c.settings.tickerHover&&(c.usingCSS?(i="horizontal"===c.settings.mode?4:5,c.viewport.hover(function(){t=u.css("-"+c.cssPrefix+"-transform"),n=parseFloat(t.split(",")[i]),b(n,"reset",0)},function(){s=0,c.children.each(function(e){s+="horizontal"===c.settings.mode?q(this).outerWidth(!0):q(this).outerHeight(!0)}),o=c.settings.speed/s,r="horizontal"===c.settings.mode?"left":"top",a=o*(s-Math.abs(parseInt(n))),N(a)})):c.viewport.hover(function(){u.stop()},function(){s=0,c.children.each(function(e){s+="horizontal"===c.settings.mode?q(this).outerWidth(!0):q(this).outerHeight(!0)}),o=c.settings.speed/s,r="horizontal"===c.settings.mode?"left":"top",a=o*(s-Math.abs(parseInt(u.css(r)))),N(a)})),N()},N=function(e){var t=e||c.settings.speed,n={left:0,top:0},e={left:0,top:0};"next"===c.settings.autoDirection?n=u.find(".bx-clone").first().position():e=c.children.first().position(),n="horizontal"===c.settings.mode?-n.left:-n.top,e="horizontal"===c.settings.mode?-e.left:-e.top,b(n,"ticker",t,{resetValue:e})},O=function(e){var t,n,i,o=document.activeElement.tagName.toLowerCase();if(null==new RegExp(o,["i"]).exec("input|textarea")&&(t=u,n=q(window),i={top:n.scrollTop(),left:n.scrollLeft()},o=t.offset(),i.right=i.left+n.width(),i.bottom=i.top+n.height(),o.right=o.left+t.outerWidth(),o.bottom=o.top+t.outerHeight(),!(i.right<o.left||i.left>o.right||i.bottom<o.top||i.top>o.bottom)))return 39===e.keyCode?(P(e),!1):37===e.keyCode?(A(e),!1):void 0},R=function(){c.touch={start:{x:0,y:0},end:{x:0,y:0}},c.viewport.on("touchstart MSPointerDown pointerdown",V),c.viewport.on("click",".bxslider a",function(e){c.viewport.hasClass("click-disabled")&&(e.preventDefault(),c.viewport.removeClass("click-disabled"))})},V=function(e){var t;"touchstart"!==e.type&&0!==e.button||(e.preventDefault(),c.controls.el.addClass("disabled"),c.working?c.controls.el.removeClass("disabled"):(c.touch.originalPos=u.position(),e=void 0!==(t=e.originalEvent).changedTouches?t.changedTouches:[t],"function"==typeof PointerEvent&&void 0===t.pointerId||(c.touch.start.x=e[0].pageX,c.touch.start.y=e[0].pageY,c.viewport.get(0).setPointerCapture&&(c.pointerId=t.pointerId,c.viewport.get(0).setPointerCapture(c.pointerId)),c.originalClickTarget=t.originalTarget||t.target,c.originalClickButton=t.button,c.originalClickButtons=t.buttons,c.originalEventType=t.type,c.hasMove=!1,c.viewport.on("touchmove MSPointerMove pointermove",F),c.viewport.on("touchend MSPointerUp pointerup",_),c.viewport.on("MSPointerCancel pointercancel",W))))},W=function e(t){t.preventDefault(),b(c.touch.originalPos.left,"reset",0),c.controls.el.removeClass("disabled"),c.viewport.off("MSPointerCancel pointercancel",e),c.viewport.off("touchmove MSPointerMove pointermove",F),c.viewport.off("touchend MSPointerUp pointerup",_),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId)},F=function(e){var t=e.originalEvent,n=void 0!==t.changedTouches?t.changedTouches:[t],i=Math.abs(n[0].pageX-c.touch.start.x),o=Math.abs(n[0].pageY-c.touch.start.y),r=0,t=0;c.hasMove=!0,(o<3*i&&c.settings.preventDefaultSwipeX||i<3*o&&c.settings.preventDefaultSwipeY)&&e.preventDefault(),"touchmove"!==e.type&&e.preventDefault(),"fade"!==c.settings.mode&&c.settings.oneToOneTouch&&(r="horizontal"===c.settings.mode?(t=n[0].pageX-c.touch.start.x,c.touch.originalPos.left+t):(t=n[0].pageY-c.touch.start.y,c.touch.originalPos.top+t),b(r,"reset",0))},_=function e(t){t.preventDefault(),c.viewport.off("touchmove MSPointerMove pointermove",F),c.controls.el.removeClass("disabled");var n=t.originalEvent,i=void 0!==n.changedTouches?n.changedTouches:[n],t=0,n=0;c.touch.end.x=i[0].pageX,c.touch.end.y=i[0].pageY,"fade"===c.settings.mode?(n=Math.abs(c.touch.start.x-c.touch.end.x))>=c.settings.swipeThreshold&&(c.touch.start.x>c.touch.end.x?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):(t="horizontal"===c.settings.mode?(n=c.touch.end.x-c.touch.start.x,c.touch.originalPos.left):(n=c.touch.end.y-c.touch.start.y,c.touch.originalPos.top),(c.settings.infiniteLoop||!(0===c.active.index&&0<n||c.active.last&&n<0))&&Math.abs(n)>=c.settings.swipeThreshold?(n<0?u.goToNextSlide():u.goToPrevSlide(),u.stopAuto()):b(t,"reset",200)),c.viewport.off("touchend MSPointerUp pointerup",e),c.viewport.get(0).releasePointerCapture&&c.viewport.get(0).releasePointerCapture(c.pointerId),!1!==c.hasMove||0!==c.originalClickButton&&"touchstart"!==c.originalEventType||q(c.originalClickTarget).trigger({type:"click",button:c.originalClickButton,buttons:c.originalClickButtons})},X=function e(t){var n,i;c.initialized&&(c.working?window.setTimeout(e,10):(n=q(window).width(),i=q(window).height(),o===n&&r===i||(o=n,r=i,u.redrawSlider(),c.settings.onSliderResize.call(u,c.active.index))))},j=function(e){var t=f();c.settings.ariaHidden&&!c.settings.ticker&&(c.children.attr("aria-hidden","true"),c.children.slice(e,e+t).attr("aria-hidden","false"))};return u.goToSlide=function(e,t){var n,i,o=!0,r=0,a={left:0,top:0},s=null;if(c.oldIndex=c.active.index,c.active.index=(i=e)<0?c.settings.infiniteLoop?h()-1:c.active.index:i>=h()?c.settings.infiniteLoop?0:c.active.index:i,!c.working&&c.active.index!==c.oldIndex){if(c.working=!0,void 0!==(o=c.settings.onSlideBefore.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index))&&!o)return c.active.index=c.oldIndex,void(c.working=!1);"next"===t?c.settings.onSlideNext.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(o=!1):"prev"===t&&(c.settings.onSlidePrev.call(u,c.children.eq(c.active.index),c.oldIndex,c.active.index)||(o=!1)),c.active.last=c.active.index>=h()-1,(c.settings.pager||c.settings.pagerCustom)&&G(c.active.index),c.settings.controls&&B(),"fade"===c.settings.mode?(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),c.children.filter(":visible").fadeOut(c.settings.speed).css({zIndex:0}),c.children.eq(c.active.index).css("zIndex",c.settings.slideZIndex+1).fadeIn(c.settings.speed,function(){q(this).css("zIndex",c.settings.slideZIndex),E()})):(c.settings.adaptiveHeight&&c.viewport.height()!==l()&&c.viewport.animate({height:l()},c.settings.adaptiveHeightSpeed),!c.settings.infiniteLoop&&c.carousel&&c.active.last?"horizontal"===c.settings.mode?(a=(s=c.children.eq(c.children.length-1)).position(),r=c.viewport.width()-s.outerWidth()):(n=c.children.length-c.settings.minSlides,a=c.children.eq(n).position()):c.carousel&&c.active.last&&"prev"===t?(n=1===c.settings.moveSlides?c.settings.maxSlides-g():(h()-1)*g()-(c.children.length-c.settings.maxSlides),a=(s=u.children(".bx-clone").eq(n)).position()):"next"===t&&0===c.active.index?(a=u.find("> .bx-clone").eq(c.settings.maxSlides).position(),c.active.last=!1):0<=e&&(e=e*parseInt(g()),a=c.children.eq(e).position()),void 0!==a&&(a="horizontal"===c.settings.mode?-(a.left-r):-a.top,b(a,"slide",c.settings.speed)),c.working=!1),c.settings.ariaHidden&&j(c.active.index*g())}},u.goToNextSlide=function(){var e;!c.settings.infiniteLoop&&c.active.last||!0===c.working||(e=parseInt(c.active.index)+1,u.goToSlide(e,"next"))},u.goToPrevSlide=function(){var e;!c.settings.infiniteLoop&&0===c.active.index||!0===c.working||(e=parseInt(c.active.index)-1,u.goToSlide(e,"prev"))},u.startAuto=function(e){c.interval||(c.interval=setInterval(function(){"next"===c.settings.autoDirection?u.goToNextSlide():u.goToPrevSlide()},c.settings.pause),c.settings.onAutoChange.call(u,!0),c.settings.autoControls&&!0!==e&&H("stop"))},u.stopAuto=function(e){c.autoPaused&&(c.autoPaused=!1),c.interval&&(clearInterval(c.interval),c.interval=null,c.settings.onAutoChange.call(u,!1),c.settings.autoControls&&!0!==e&&H("start"))},u.getCurrentSlide=function(){return c.active.index},u.getCurrentSlideElement=function(){return c.children.eq(c.active.index)},u.getSlideElement=function(e){return c.children.eq(e)},u.getSlideCount=function(){return c.children.length},u.isWorking=function(){return c.working},u.redrawSlider=function(){c.children.add(u.find(".bx-clone")).outerWidth(p()),c.viewport.css("height",l()),c.settings.ticker||T(),c.active.last&&(c.active.index=h()-1),c.active.index>=h()&&(c.active.last=!0),c.settings.pager&&!c.settings.pagerCustom&&(m(),G(c.active.index)),c.settings.ariaHidden&&j(c.active.index*g())},u.destroySlider=function(){c.initialized&&(c.initialized=!1,q(".bx-clone",this).remove(),c.children.each(function(){void 0!==q(this).data("origStyle")?q(this).attr("style",q(this).data("origStyle")):q(this).removeAttr("style")}),void 0!==q(this).data("origStyle")?this.attr("style",q(this).data("origStyle")):q(this).removeAttr("style"),q(this).unwrap().unwrap(),c.controls.el&&c.controls.el.remove(),c.controls.next&&c.controls.next.remove(),c.controls.prev&&c.controls.prev.remove(),c.pagerEl&&c.settings.controls&&!c.settings.pagerCustom&&c.pagerEl.remove(),q(".bx-caption",this).remove(),c.controls.autoEl&&c.controls.autoEl.remove(),clearInterval(c.interval),c.settings.responsive&&q(window).off("resize",X),c.settings.keyboardEnabled&&q(document).off("keydown",O),q(this).removeData("bxSlider"),q(window).off("blur",I).off("focus",D))},u.reloadSlider=function(e){void 0!==e&&(t=e),u.destroySlider(),n(),q(u).data("bxSlider",this)},n(),q(u).data("bxSlider",this),this}}}(jQuery),function(n,i,I,d){function p(e){return e&&e.hasOwnProperty&&e instanceof I}function f(e){return e&&"string"===I.type(e)}function k(e){return f(e)&&0<e.indexOf("%")}function L(e,t){var n=parseInt(e,10)||0;return t&&k(e)&&(n=O.getViewport()[t]/100*n),Math.ceil(n)}function N(e,t){return L(e,t)+"px"}var o=I("html"),r=I(n),c=I(i),O=I.fancybox=function(){O.open.apply(this,arguments)},a=navigator.userAgent.match(/msie/i),s=null,u=i.createTouch!==d;I.extend(O,{version:"2.1.5",defaults:{padding:15,margin:20,width:800,height:600,minWidth:100,minHeight:100,maxWidth:9999,maxHeight:9999,pixelRatio:1,autoSize:!0,autoHeight:!1,autoWidth:!1,autoResize:!0,autoCenter:!u,fitToView:!0,aspectRatio:!1,topRatio:.5,leftRatio:.5,scrolling:"auto",wrapCSS:"",arrows:!0,closeBtn:!0,closeClick:!1,nextClick:!1,mouseWheel:!0,autoPlay:!1,playSpeed:3e3,preload:3,modal:!1,loop:!0,ajax:{dataType:"html",headers:{"X-fancyBox":!0}},iframe:{scrolling:"auto",preload:!0},swf:{wmode:"transparent",allowfullscreen:"true",allowscriptaccess:"always"},keys:{next:{13:"left",34:"up",39:"left",40:"up"},prev:{8:"right",33:"down",37:"right",38:"down"},close:[27],play:[32],toggle:[70]},direction:{next:"left",prev:"right"},scrollOutside:!0,index:0,type:null,href:null,content:null,title:null,tpl:{wrap:'<div class="fancybox-wrap" tabIndex="-1"><div class="fancybox-skin"><div class="fancybox-outer"><div class="fancybox-inner"></div></div></div></div>',image:'<img class="fancybox-image" src="{href}" alt="" />',iframe:'<iframe id="fancybox-frame{rnd}" name="fancybox-frame{rnd}" class="fancybox-iframe" frameborder="0" vspace="0" hspace="0" webkitAllowFullScreen mozallowfullscreen allowFullScreen'+(a?' allowtransparency="true"':"")+"></iframe>",error:'<p class="fancybox-error">The requested content cannot be loaded.<br/>Please try again later.</p>',closeBtn:'<a title="Close" class="fancybox-item fancybox-close" href="javascript:;"></a>',next:'<a title="Next" class="fancybox-nav fancybox-next" href="javascript:;"><span></span></a>',prev:'<a title="Previous" class="fancybox-nav fancybox-prev" href="javascript:;"><span></span></a>',loading:'<div id="fancybox-loading"><div></div></div>'},openEffect:"fade",openSpeed:250,openEasing:"swing",openOpacity:!0,openMethod:"zoomIn",closeEffect:"fade",closeSpeed:250,closeEasing:"swing",closeOpacity:!0,closeMethod:"zoomOut",nextEffect:"elastic",nextSpeed:250,nextEasing:"swing",nextMethod:"changeIn",prevEffect:"elastic",prevSpeed:250,prevEasing:"swing",prevMethod:"changeOut",helpers:{overlay:!0,title:!0},onCancel:I.noop,beforeLoad:I.noop,afterLoad:I.noop,beforeShow:I.noop,afterShow:I.noop,beforeChange:I.noop,beforeClose:I.noop,afterClose:I.noop},group:{},opts:{},previous:null,coming:null,current:null,isActive:!1,isOpen:!1,isOpened:!1,wrap:null,skin:null,outer:null,inner:null,player:{timer:null,isActive:!1},ajaxLoad:null,imgPreload:null,transitions:{},helpers:{},open:function(c,u){if(c&&(I.isPlainObject(u)||(u={}),!1!==O.close(!0)))return I.isArray(c)||(c=p(c)?I(c).get():[c]),I.each(c,function(e,t){var n,i,o,r,a,s,l={};"object"===I.type(t)&&(t.nodeType&&(t=I(t)),p(t)?(l={href:t.data("fancybox-href")||t.attr("href"),title:I("<div/>").text(t.data("fancybox-title")||t.attr("title")||"").html(),isDom:!0,element:t},I.metadata&&I.extend(!0,l,t.metadata())):l=t),n=u.href||l.href||(f(t)?t:null),i=u.title!==d?u.title:l.title||"",!(r=(o=u.content||l.content)?"html":u.type||l.type)&&l.isDom&&(r=(r=t.data("fancybox-type"))||((a=t.prop("class").match(/fancybox\.(\w+)/))?a[1]:null)),f(n)&&(r||(O.isImage(n)?r="image":O.isSWF(n)?r="swf":"#"===n.charAt(0)?r="inline":f(t)&&(r="html",o=t)),"ajax"===r&&(n=(s=n.split(/\s+/,2)).shift(),s=s.shift())),o||("inline"===r?n?o=I(f(n)?n.replace(/.*(?=#[^\s]+$)/,""):n):l.isDom&&(o=t):"html"===r?o=n:r||n||!l.isDom||(r="inline",o=t)),I.extend(l,{href:n,type:r,content:o,title:i,selector:s}),c[e]=l}),O.opts=I.extend(!0,{},O.defaults,u),u.keys!==d&&(O.opts.keys=!!u.keys&&I.extend({},O.defaults.keys,u.keys)),O.group=c,O._start(O.opts.index)},cancel:function(){var e=O.coming;e&&!1===O.trigger("onCancel")||(O.hideLoading(),e&&(O.ajaxLoad&&O.ajaxLoad.abort(),O.ajaxLoad=null,O.imgPreload&&(O.imgPreload.onload=O.imgPreload.onerror=null),e.wrap&&e.wrap.stop(!0,!0).trigger("onReset").remove(),O.coming=null,O.current||O._afterZoomOut(e)))},close:function(e){O.cancel(),!1!==O.trigger("beforeClose")&&(O.unbindEvents(),O.isActive&&(O.isOpen&&!0!==e?(O.isOpen=O.isOpened=!1,O.isClosing=!0,I(".fancybox-item, .fancybox-nav").remove(),O.wrap.stop(!0,!0).removeClass("fancybox-opened"),O.transitions[O.current.closeMethod]()):(I(".fancybox-wrap").stop(!0).trigger("onReset").remove(),O._afterZoomOut())))},play:function(e){function t(){clearTimeout(O.player.timer)}function n(){t(),O.current&&O.player.isActive&&(O.player.timer=setTimeout(O.next,O.current.playSpeed))}function i(){t(),c.unbind(".player"),O.player.isActive=!1,O.trigger("onPlayEnd")}!0===e||!O.player.isActive&&!1!==e?O.current&&(O.current.loop||O.current.index<O.group.length-1)&&(O.player.isActive=!0,c.bind({"onCancel.player beforeClose.player":i,"onUpdate.player":n,"beforeLoad.player":t}),n(),O.trigger("onPlayStart")):i()},next:function(e){var t=O.current;t&&(f(e)||(e=t.direction.next),O.jumpto(t.index+1,e,"next"))},prev:function(e){var t=O.current;t&&(f(e)||(e=t.direction.prev),O.jumpto(t.index-1,e,"prev"))},jumpto:function(e,t,n){var i=O.current;i&&(e=L(e),O.direction=t||i.direction[e>=i.index?"next":"prev"],O.router=n||"jumpto",i.loop&&(e<0&&(e=i.group.length+e%i.group.length),e%=i.group.length),i.group[e]!==d&&(O.cancel(),O._start(e)))},reposition:function(e,t){var n=O.current,i=n?n.wrap:null;i&&(t=O._getPosition(t),e&&"scroll"===e.type?(delete t.position,i.stop(!0,!0).animate(t,200)):(i.css(t),n.pos=I.extend({},n.dim,t)))},update:function(t){var n=t&&t.originalEvent&&t.originalEvent.type,i=!n||"orientationchange"===n;i&&(clearTimeout(s),s=null),O.isOpen&&!s&&(s=setTimeout(function(){var e=O.current;e&&!O.isClosing&&(O.wrap.removeClass("fancybox-tmp"),(i||"load"===n||"resize"===n&&e.autoResize)&&O._setDimension(),"scroll"===n&&e.canShrink||O.reposition(t),O.trigger("onUpdate"),s=null)},i&&!u?0:300))},toggle:function(e){O.isOpen&&(O.current.fitToView="boolean"===I.type(e)?e:!O.current.fitToView,u&&(O.wrap.removeAttr("style").addClass("fancybox-tmp"),O.trigger("onUpdate")),O.update())},hideLoading:function(){c.unbind(".loading"),I("#fancybox-loading").remove()},showLoading:function(){var e,t;O.hideLoading(),e=I(O.opts.tpl.loading).click(O.cancel).appendTo("body"),c.bind("keydown.loading",function(e){27===(e.which||e.keyCode)&&(e.preventDefault(),O.cancel())}),O.defaults.fixed||(t=O.getViewport(),e.css({position:"absolute",top:.5*t.h+t.y,left:.5*t.w+t.x})),O.trigger("onLoading")},getViewport:function(){var e=O.current&&O.current.locked||!1,t={x:r.scrollLeft(),y:r.scrollTop()};return e&&e.length?(t.w=e[0].clientWidth,t.h=e[0].clientHeight):(t.w=u&&n.innerWidth?n.innerWidth:r.width(),t.h=u&&n.innerHeight?n.innerHeight:r.height()),t},unbindEvents:function(){O.wrap&&p(O.wrap)&&O.wrap.unbind(".fb"),c.unbind(".fb"),r.unbind(".fb")},bindEvents:function(){var t,l=O.current;l&&(r.bind("orientationchange.fb"+(u?"":" resize.fb")+(l.autoCenter&&!l.locked?" scroll.fb":""),O.update),(t=l.keys)&&c.bind("keydown.fb",function(n){var i=n.which||n.keyCode,e=n.target||n.srcElement;if(27===i&&O.coming)return!1;n.ctrlKey||n.altKey||n.shiftKey||n.metaKey||e&&(e.type||I(e).is("[contenteditable]"))||I.each(t,function(e,t){return 1<l.group.length&&t[i]!==d?(O[e](t[i]),n.preventDefault(),!1):-1<I.inArray(i,t)?(O[e](),n.preventDefault(),!1):void 0})}),I.fn.mousewheel&&l.mouseWheel&&O.wrap.bind("mousewheel.fb",function(e,t,n,i){for(var o,r=e.target||null,a=I(r),s=!1;a.length&&!(s||a.is(".fancybox-skin")||a.is(".fancybox-wrap"));)s=(o=a[0])&&!(o.style.overflow&&"hidden"===o.style.overflow)&&(o.clientWidth&&o.scrollWidth>o.clientWidth||o.clientHeight&&o.scrollHeight>o.clientHeight),a=I(a).parent();0===t||s||1<O.group.length&&!l.canShrink&&(0<i||0<n?O.prev(0<i?"down":"left"):(i<0||n<0)&&O.next(i<0?"up":"right"),e.preventDefault())}))},trigger:function(n,e){var t,i=e||O.coming||O.current;if(i){if(!1===(t=I.isFunction(i[n])?i[n].apply(i,Array.prototype.slice.call(arguments,1)):t))return!1;i.helpers&&I.each(i.helpers,function(e,t){t&&O.helpers[e]&&I.isFunction(O.helpers[e][n])&&O.helpers[e][n](I.extend(!0,{},O.helpers[e].defaults,t),i)})}c.trigger(n)},isImage:function(e){return f(e)&&e.match(/(^data:image\/.*,)|(\.(jp(e|g|eg)|gif|png|bmp|webp|svg)((\?|#).*)?$)/i)},isSWF:function(e){return f(e)&&e.match(/\.(swf)((\?|#).*)?$/i)},_start:function(e){var t,n,i={};if(e=L(e),!(n=O.group[e]||null))return!1;if(t=(i=I.extend(!0,{},O.opts,n)).margin,n=i.padding,"number"===I.type(t)&&(i.margin=[t,t,t,t]),"number"===I.type(n)&&(i.padding=[n,n,n,n]),i.modal&&I.extend(!0,i,{closeBtn:!1,closeClick:!1,nextClick:!1,arrows:!1,mouseWheel:!1,keys:null,helpers:{overlay:{closeClick:!1}}}),i.autoSize&&(i.autoWidth=i.autoHeight=!0),"auto"===i.width&&(i.autoWidth=!0),"auto"===i.height&&(i.autoHeight=!0),i.group=O.group,i.index=e,O.coming=i,!1!==O.trigger("beforeLoad")){if(t=i.type,n=i.href,!t)return O.coming=null,!(!O.current||!O.router||"jumpto"===O.router)&&(O.current.index=e,O[O.router](O.direction));if(O.isActive=!0,"image"!==t&&"swf"!==t||(i.autoHeight=i.autoWidth=!1,i.scrolling="visible"),"image"===t&&(i.aspectRatio=!0),"iframe"===t&&u&&(i.scrolling="scroll"),i.wrap=I(i.tpl.wrap).addClass("fancybox-"+(u?"mobile":"desktop")+" fancybox-type-"+t+" fancybox-tmp "+i.wrapCSS).appendTo(i.parent||"body"),I.extend(i,{skin:I(".fancybox-skin",i.wrap),outer:I(".fancybox-outer",i.wrap),inner:I(".fancybox-inner",i.wrap)}),I.each(["Top","Right","Bottom","Left"],function(e,t){i.skin.css("padding"+t,N(i.padding[e]))}),O.trigger("onReady"),"inline"===t||"html"===t){if(!i.content||!i.content.length)return O._error("content")}else if(!n)return O._error("href");"image"===t?O._loadImage():"ajax"===t?O._loadAjax():"iframe"===t?O._loadIframe():O._afterLoad()}else O.coming=null},_error:function(e){I.extend(O.coming,{type:"html",autoWidth:!0,autoHeight:!0,minWidth:0,minHeight:0,scrolling:"no",hasError:e,content:O.coming.tpl.error}),O._afterLoad()},_loadImage:function(){var e=O.imgPreload=new Image;e.onload=function(){this.onload=this.onerror=null,O.coming.width=this.width/O.opts.pixelRatio,O.coming.height=this.height/O.opts.pixelRatio,O._afterLoad()},e.onerror=function(){this.onload=this.onerror=null,O._error("image")},e.src=O.coming.href,!0!==e.complete&&O.showLoading()},_loadAjax:function(){var n=O.coming;O.showLoading(),O.ajaxLoad=I.ajax(I.extend({},n.ajax,{url:n.href,error:function(e,t){O.coming&&"abort"!==t?O._error("ajax",e):O.hideLoading()},success:function(e,t){"success"===t&&(n.content=e,O._afterLoad())}}))},_loadIframe:function(){var e=O.coming,t=I(e.tpl.iframe.replace(/\{rnd\}/g,(new Date).getTime())).attr("scrolling",u?"auto":e.iframe.scrolling).attr("src",e.href);I(e.wrap).bind("onReset",function(){try{I(this).find("iframe").hide().attr("src","//about:blank").end().empty()}catch(e){}}),e.iframe.preload&&(O.showLoading(),t.one("load",function(){I(this).data("ready",1),u||I(this).bind("load.fb",O.update),I(this).parents(".fancybox-wrap").width("100%").removeClass("fancybox-tmp").show(),O._afterLoad()})),e.content=t.appendTo(e.inner),e.iframe.preload||O._afterLoad()},_preloadImages:function(){for(var e,t=O.group,n=O.current,i=t.length,o=n.preload?Math.min(n.preload,i-1):0,r=1;r<=o;r+=1)"image"===(e=t[(n.index+r)%i]).type&&e.href&&((new Image).src=e.href)},_afterLoad:function(){var e,n,t,i,o,r=O.coming,a=O.current,s="fancybox-placeholder";if(O.hideLoading(),r&&!1!==O.isActive){if(!1===O.trigger("afterLoad",r,a))return r.wrap.stop(!0).trigger("onReset").remove(),void(O.coming=null);switch(a&&(O.trigger("beforeChange",a),a.wrap.stop(!0).removeClass("fancybox-opened").find(".fancybox-item, .fancybox-nav").remove()),O.unbindEvents(),n=(e=r).content,t=r.type,r=r.scrolling,I.extend(O,{wrap:e.wrap,skin:e.skin,outer:e.outer,inner:e.inner,current:e,previous:a}),i=e.href,t){case"inline":case"ajax":case"html":e.selector?n=I("<div>").html(n).find(e.selector):p(n)&&(n.data(s)||n.data(s,I('<div class="'+s+'"></div>').insertAfter(n).hide()),n=n.show().detach(),e.wrap.bind("onReset",function(){I(this).find(n).length&&n.hide().replaceAll(n.data(s)).data(s,!1)}));break;case"image":n=e.tpl.image.replace(/\{href\}/g,i);break;case"swf":n='<object id="fancybox-swf" classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000" width="100%" height="100%"><param name="movie" value="'+i+'"></param>',o="",I.each(e.swf,function(e,t){n+='<param name="'+e+'" value="'+t+'"></param>',o+=" "+e+'="'+t+'"'}),n+='<embed src="'+i+'" type="application/x-shockwave-flash" width="100%" height="100%"'+o+"></embed></object>"}p(n)&&n.parent().is(e.inner)||e.inner.append(n),O.trigger("beforeShow"),e.inner.css("overflow","yes"===r?"scroll":"no"===r?"hidden":r),O._setDimension(),O.reposition(),O.isOpen=!1,O.coming=null,O.bindEvents(),O.isOpened?a.prevMethod&&O.transitions[a.prevMethod]():I(".fancybox-wrap").not(e.wrap).stop(!0).trigger("onReset").remove(),O.transitions[O.isOpened?e.nextMethod:e.openMethod](),O._preloadImages()}},_setDimension:function(){var e,t,n,i,o,r,a,s,l,c,u,d,p,f,h,g,T=O.getViewport(),b=0,m=O.wrap,v=O.skin,S=O.inner,y=O.current,x=y.width,P=y.height,A=y.minWidth,M=y.minHeight,w=y.maxWidth,C=y.maxHeight,G=y.scrolling,E=y.scrollOutside?y.scrollbarWidth:0,H=y.margin,B=L(H[1]+H[3]),D=L(H[0]+H[2]);if(m.add(v).add(S).width("auto").height("auto").removeClass("fancybox-tmp"),o=B+(n=L(v.outerWidth(!0)-v.width())),r=D+(i=L(v.outerHeight(!0)-v.height())),a=k(x)?(T.w-o)*L(x)/100:x,s=k(P)?(T.h-r)*L(P)/100:P,"iframe"===y.type){if(h=y.content,y.autoHeight&&1===h.data("ready"))try{h[0].contentWindow.document.location&&(S.width(a).height(9999),g=h.contents().find("body"),E&&g.css("overflow-x","hidden"),s=g.outerHeight(!0))}catch(e){}}else(y.autoWidth||y.autoHeight)&&(S.addClass("fancybox-tmp"),y.autoWidth||S.width(a),y.autoHeight||S.height(s),y.autoWidth&&(a=S.width()),y.autoHeight&&(s=S.height()),S.removeClass("fancybox-tmp"));if(x=L(a),P=L(s),c=a/s,A=L(k(A)?L(A,"w")-o:A),w=L(k(w)?L(w,"w")-o:w),M=L(k(M)?L(M,"h")-r:M),l=w,H=C=L(k(C)?L(C,"h")-r:C),y.fitToView&&(w=Math.min(T.w-o,w),C=Math.min(T.h-r,C)),p=T.w-B,f=T.h-D,y.aspectRatio?(P=(x=C<(P=w<x?L((x=w)/c):P)?L((P=C)*c):x)<A?L((x=A)/c):P)<M&&(x=L((P=M)*c)):(x=Math.max(A,Math.min(x,w)),y.autoHeight&&"iframe"!==y.type&&(S.width(x),P=S.height()),P=Math.max(M,Math.min(P,C))),y.fitToView)if(S.width(x).height(P),m.width(x+n),u=m.width(),d=m.height(),y.aspectRatio)for(;(p<u||f<d)&&A<x&&M<P&&!(19<b++);)P=Math.max(M,Math.min(C,P-10)),(x=L(P*c))<A&&(P=L((x=A)/c)),w<x&&(P=L((x=w)/c)),S.width(x).height(P),m.width(x+n),u=m.width(),d=m.height();else x=Math.max(A,Math.min(x,x-(u-p))),P=Math.max(M,Math.min(P,P-(d-f)));E&&"auto"===G&&P<s&&x+n+E<p&&(x+=E),S.width(x).height(P),m.width(x+n),u=m.width(),d=m.height(),e=(p<u||f<d)&&A<x&&M<P,t=y.aspectRatio?x<l&&P<H&&x<a&&P<s:(x<l||P<H)&&(x<a||P<s),I.extend(y,{dim:{width:N(u),height:N(d)},origWidth:a,origHeight:s,canShrink:e,canExpand:t,wPadding:n,hPadding:i,wrapSpace:d-v.outerHeight(!0),skinSpace:v.height()-P}),!h&&y.autoHeight&&M<P&&P<C&&!t&&S.height("auto")},_getPosition:function(e){var t=O.current,n=O.getViewport(),i=t.margin,o=O.wrap.width()+i[1]+i[3],r=O.wrap.height()+i[0]+i[2],i={position:"absolute",top:i[0],left:i[3]};return t.autoCenter&&t.fixed&&!e&&r<=n.h&&o<=n.w?i.position="fixed":t.locked||(i.top+=n.y,i.left+=n.x),i.top=N(Math.max(i.top,i.top+(n.h-r)*t.topRatio)),i.left=N(Math.max(i.left,i.left+(n.w-o)*t.leftRatio)),i},_afterZoomIn:function(){var t=O.current;t&&(O.isOpen=O.isOpened=!0,O.wrap.css("overflow","visible").addClass("fancybox-opened").hide().show(0),O.update(),(t.closeClick||t.nextClick&&1<O.group.length)&&O.inner.css("cursor","pointer").bind("click.fb",function(e){I(e.target).is("a")||I(e.target).parent().is("a")||(e.preventDefault(),O[t.closeClick?"close":"next"]())}),t.closeBtn&&I(t.tpl.closeBtn).appendTo(O.skin).bind("click.fb",function(e){e.preventDefault(),O.close()}),t.arrows&&1<O.group.length&&((t.loop||0<t.index)&&I(t.tpl.prev).appendTo(O.outer).bind("click.fb",O.prev),(t.loop||t.index<O.group.length-1)&&I(t.tpl.next).appendTo(O.outer).bind("click.fb",O.next)),O.trigger("afterShow"),t.loop||t.index!==t.group.length-1?O.opts.autoPlay&&!O.player.isActive&&(O.opts.autoPlay=!1,O.play(!0)):O.play(!1))},_afterZoomOut:function(e){e=e||O.current,I(".fancybox-wrap").trigger("onReset").remove(),I.extend(O,{group:{},opts:{},router:!1,current:null,isActive:!1,isOpened:!1,isOpen:!1,isClosing:!1,wrap:null,skin:null,outer:null,inner:null}),O.trigger("afterClose",e)}}),O.transitions={getOrigPosition:function(){var e=O.current,t=e.element,n=e.orig,i={},o=50,r=50,a=e.hPadding,s=e.wPadding,l=O.getViewport();return!n&&e.isDom&&t.is(":visible")&&((n=t.find("img:first")).length||(n=t)),p(n)?(i=n.offset(),n.is("img")&&(o=n.outerWidth(),r=n.outerHeight())):(i.top=l.y+(l.h-r)*e.topRatio,i.left=l.x+(l.w-o)*e.leftRatio),"fixed"!==O.wrap.css("position")&&!e.locked||(i.top-=l.y,i.left-=l.x),i={top:N(i.top-a*e.topRatio),left:N(i.left-s*e.leftRatio),width:N(o+s),height:N(r+a)}},step:function(e,t){var n=t.prop,i=O.current,o=i.wrapSpace,r=i.skinSpace;"width"!==n&&"height"!==n||(t=t.end===t.start?1:(e-t.start)/(t.end-t.start),O.isClosing&&(t=1-t),i=e-("width"===n?i.wPadding:i.hPadding),O.skin[n](L("width"===n?i:i-o*t)),O.inner[n](L("width"===n?i:i-o*t-r*t)))},zoomIn:function(){var e=O.current,t=e.pos,n=e.openEffect,i="elastic"===n,o=I.extend({opacity:1},t);delete o.position,i?(t=this.getOrigPosition(),e.openOpacity&&(t.opacity=.1)):"fade"===n&&(t.opacity=.1),O.wrap.css(t).animate(o,{duration:"none"===n?0:e.openSpeed,easing:e.openEasing,step:i?this.step:null,complete:O._afterZoomIn})},zoomOut:function(){var e=O.current,t=e.closeEffect,n="elastic"===t,i={opacity:.1};n&&(i=this.getOrigPosition(),e.closeOpacity&&(i.opacity=.1)),O.wrap.animate(i,{duration:"none"===t?0:e.closeSpeed,easing:e.closeEasing,step:n?this.step:null,complete:O._afterZoomOut})},changeIn:function(){var e,t=O.current,n=t.nextEffect,i=t.pos,o={opacity:1},r=O.direction;i.opacity=.1,"elastic"===n&&(e="down"===r||"up"===r?"top":"left","down"===r||"right"===r?(i[e]=N(L(i[e])-200),o[e]="+=200px"):(i[e]=N(L(i[e])+200),o[e]="-=200px")),"none"===n?O._afterZoomIn():O.wrap.css(i).animate(o,{duration:t.nextSpeed,easing:t.nextEasing,complete:O._afterZoomIn})},changeOut:function(){var e=O.previous,t=e.prevEffect,n={opacity:.1},i=O.direction;"elastic"===t&&(n["down"===i||"up"===i?"top":"left"]=("up"===i||"left"===i?"-":"+")+"=200px"),e.wrap.animate(n,{duration:"none"===t?0:e.prevSpeed,easing:e.prevEasing,complete:function(){I(this).trigger("onReset").remove()}})}},O.helpers.overlay={defaults:{closeClick:!0,speedOut:200,showEarly:!0,css:{},locked:!u,fixed:!0},overlay:null,fixed:!1,el:I("html"),create:function(e){var t;e=I.extend({},this.defaults,e),this.overlay&&this.close(),t=(O.coming||e).parent,this.overlay=I('<div class="fancybox-overlay"></div>').appendTo(t&&t.length?t:"body"),this.fixed=!1,e.fixed&&O.defaults.fixed&&(this.overlay.addClass("fancybox-overlay-fixed"),this.fixed=!0)},open:function(e){var t=this;e=I.extend({},this.defaults,e),this.overlay?this.overlay.unbind(".overlay").width("auto").height("auto"):this.create(e),this.fixed||(r.bind("resize.overlay",I.proxy(this.update,this)),this.update()),e.closeClick&&this.overlay.bind("click.overlay",function(e){if(I(e.target).hasClass("fancybox-overlay"))return(O.isActive?O:t).close(),!1}),this.overlay.css(e.css).show()},close:function(){r.unbind("resize.overlay"),this.el.hasClass("fancybox-lock")&&(I(".fancybox-margin").removeClass("fancybox-margin"),this.el.removeClass("fancybox-lock"),r.scrollTop(this.scrollV).scrollLeft(this.scrollH)),I(".fancybox-overlay").remove().hide(),I.extend(this,{overlay:null,fixed:!1})},update:function(){var e,t="100%";this.overlay.width(t).height("100%"),a?(e=Math.max(i.documentElement.offsetWidth,i.body.offsetWidth),c.width()>e&&(t=c.width())):c.width()>r.width()&&(t=c.width()),this.overlay.width(t).height(c.height())},onReady:function(e,t){var n=this.overlay;I(".fancybox-overlay").stop(!0,!0),n||this.create(e),e.locked&&this.fixed&&t.fixed&&(t.locked=this.overlay.append(t.wrap),t.fixed=!1),!0===e.showEarly&&this.beforeShow.apply(this,arguments)},beforeShow:function(e,t){t.locked&&!this.el.hasClass("fancybox-lock")&&(!1!==this.fixPosition&&I("*").filter(function(){return"fixed"===I(this).css("position")&&!I(this).hasClass("fancybox-overlay")&&!I(this).hasClass("fancybox-wrap")}).addClass("fancybox-margin"),this.el.addClass("fancybox-margin"),this.scrollV=r.scrollTop(),this.scrollH=r.scrollLeft(),this.el.addClass("fancybox-lock"),r.scrollTop(this.scrollV).scrollLeft(this.scrollH)),this.open(e)},onUpdate:function(){this.fixed||this.update()},afterClose:function(e){this.overlay&&!O.coming&&this.overlay.fadeOut(e.speedOut,I.proxy(this.close,this))}},O.helpers.title={defaults:{type:"float",position:"bottom"},beforeShow:function(e){var t,n,i=O.current,o=i.title,r=e.type;if(I.isFunction(o)&&(o=o.call(i.element,i)),f(o)&&""!==I.trim(o)){switch(t=I('<div class="fancybox-title fancybox-title-'+r+'-wrap">'+o+"</div>"),r){case"inside":n=O.skin;break;case"outside":n=O.wrap;break;case"over":n=O.inner;break;default:n=O.skin,t.appendTo("body"),a&&t.width(t.width()),t.wrapInner('<span class="child"></span>'),O.current.margin[2]+=Math.abs(L(t.css("margin-bottom")))}t["top"===e.position?"prependTo":"appendTo"](n)}}},I.fn.fancybox=function(r){function e(e){var t,n,i=I(this).blur(),o=l;e.ctrlKey||e.altKey||e.shiftKey||e.metaKey||i.is(".fancybox-wrap")||(t=r.groupAttr||"data-fancybox-group",(n=i.attr(t))||(t="rel",n=i.get(0)[t]),n&&""!==n&&"nofollow"!==n&&(o=(i=(i=s.length?I(s):a).filter("["+t+'="'+n+'"]')).index(this)),r.index=o,!1!==O.open(i,r)&&e.preventDefault())}var a=I(this),s=this.selector||"",l=(r=r||{}).index||0;return s&&!1!==r.live?c.undelegate(s,"click.fb-start").delegate(s+":not('.fancybox-item, .fancybox-nav')","click.fb-start",e):a.unbind("click.fb-start").bind("click.fb-start",e),this.filter("[data-fancybox-start=1]").trigger("click"),this},c.ready(function(){var e,t;I.scrollbarWidth===d&&(I.scrollbarWidth=function(){var e=I('<div style="width:50px;height:50px;overflow:auto"><div/></div>').appendTo("body"),t=e.children(),t=t.innerWidth()-t.height(99).innerWidth();return e.remove(),t}),I.support.fixedPosition===d&&(I.support.fixedPosition=(e=I('<div style="position:fixed;top:20px;"></div>').appendTo("body"),t=20===e[0].offsetTop||15===e[0].offsetTop,e.remove(),t)),I.extend(O.defaults,{scrollbarWidth:I.scrollbarWidth(),fixed:I.support.fixedPosition,parent:I("body")}),e=I(n).width(),o.addClass("fancybox-lock-test"),t=I(n).width(),o.removeClass("fancybox-lock-test"),I("<style type='text/css'>.fancybox-margin{margin-right:"+(t-e)+"px;}</style>").appendTo("head")})}(window,document,jQuery),function(r){(function(){if("undefined"!=typeof module&&module.exports)return function(e){module.exports=e()};if("function"==typeof define&&define.amd)return define;if("undefined"!=typeof window)return function(e){window.MobileDetect=e()};throw new Error("unknown environment")})()(function(){function t(e,t){return null!=e&&null!=t&&e.toLowerCase()===t.toLowerCase()}function n(e,t){var n,i,o=e.length;if(!o||!t)return!1;for(n=t.toLowerCase(),i=0;i<o;++i)if(n===e[i].toLowerCase())return!0;return!1}function s(e){for(var t in e)u.call(e,t)&&(e[t]=new RegExp(e[t],"i"))}function o(e,t){this.ua=(e||"").substr(0,500),this._cache={},this.maxPhoneWidth=t||600}var l,c={mobileDetectRules:{phones:{iPhone:"\\biPhone\\b|\\biPod\\b",BlackBerry:"BlackBerry|\\bBB10\\b|rim[0-9]+|\\b(BBA100|BBB100|BBD100|BBE100|BBF100|STH100)\\b-[0-9]+",HTC:"HTC|HTC.*(Sensation|Evo|Vision|Explorer|6800|8100|8900|A7272|S510e|C110e|Legend|Desire|T8282)|APX515CKT|Qtek9090|APA9292KT|HD_mini|Sensation.*Z710e|PG86100|Z715e|Desire.*(A8181|HD)|ADR6200|ADR6400L|ADR6425|001HT|Inspire 4G|Android.*\\bEVO\\b|T-Mobile G1|Z520m|Android [0-9.]+; Pixel",Nexus:"Nexus One|Nexus S|Galaxy.*Nexus|Android.*Nexus.*Mobile|Nexus 4|Nexus 5|Nexus 6",Dell:"Dell[;]? (Streak|Aero|Venue|Venue Pro|Flash|Smoke|Mini 3iX)|XCD28|XCD35|\\b001DL\\b|\\b101DL\\b|\\bGS01\\b",Motorola:"Motorola|DROIDX|DROID BIONIC|\\bDroid\\b.*Build|Android.*Xoom|HRI39|MOT-|A1260|A1680|A555|A853|A855|A953|A955|A956|Motorola.*ELECTRIFY|Motorola.*i1|i867|i940|MB200|MB300|MB501|MB502|MB508|MB511|MB520|MB525|MB526|MB611|MB612|MB632|MB810|MB855|MB860|MB861|MB865|MB870|ME501|ME502|ME511|ME525|ME600|ME632|ME722|ME811|ME860|ME863|ME865|MT620|MT710|MT716|MT720|MT810|MT870|MT917|Motorola.*TITANIUM|WX435|WX445|XT300|XT301|XT311|XT316|XT317|XT319|XT320|XT390|XT502|XT530|XT531|XT532|XT535|XT603|XT610|XT611|XT615|XT681|XT701|XT702|XT711|XT720|XT800|XT806|XT860|XT862|XT875|XT882|XT883|XT894|XT901|XT907|XT909|XT910|XT912|XT928|XT926|XT915|XT919|XT925|XT1021|\\bMoto E\\b|XT1068|XT1092|XT1052",Samsung:"\\bSamsung\\b|SM-G950F|SM-G955F|SM-G9250|GT-19300|SGH-I337|BGT-S5230|GT-B2100|GT-B2700|GT-B2710|GT-B3210|GT-B3310|GT-B3410|GT-B3730|GT-B3740|GT-B5510|GT-B5512|GT-B5722|GT-B6520|GT-B7300|GT-B7320|GT-B7330|GT-B7350|GT-B7510|GT-B7722|GT-B7800|GT-C3010|GT-C3011|GT-C3060|GT-C3200|GT-C3212|GT-C3212I|GT-C3262|GT-C3222|GT-C3300|GT-C3300K|GT-C3303|GT-C3303K|GT-C3310|GT-C3322|GT-C3330|GT-C3350|GT-C3500|GT-C3510|GT-C3530|GT-C3630|GT-C3780|GT-C5010|GT-C5212|GT-C6620|GT-C6625|GT-C6712|GT-E1050|GT-E1070|GT-E1075|GT-E1080|GT-E1081|GT-E1085|GT-E1087|GT-E1100|GT-E1107|GT-E1110|GT-E1120|GT-E1125|GT-E1130|GT-E1160|GT-E1170|GT-E1175|GT-E1180|GT-E1182|GT-E1200|GT-E1210|GT-E1225|GT-E1230|GT-E1390|GT-E2100|GT-E2120|GT-E2121|GT-E2152|GT-E2220|GT-E2222|GT-E2230|GT-E2232|GT-E2250|GT-E2370|GT-E2550|GT-E2652|GT-E3210|GT-E3213|GT-I5500|GT-I5503|GT-I5700|GT-I5800|GT-I5801|GT-I6410|GT-I6420|GT-I7110|GT-I7410|GT-I7500|GT-I8000|GT-I8150|GT-I8160|GT-I8190|GT-I8320|GT-I8330|GT-I8350|GT-I8530|GT-I8700|GT-I8703|GT-I8910|GT-I9000|GT-I9001|GT-I9003|GT-I9010|GT-I9020|GT-I9023|GT-I9070|GT-I9082|GT-I9100|GT-I9103|GT-I9220|GT-I9250|GT-I9300|GT-I9305|GT-I9500|GT-I9505|GT-M3510|GT-M5650|GT-M7500|GT-M7600|GT-M7603|GT-M8800|GT-M8910|GT-N7000|GT-S3110|GT-S3310|GT-S3350|GT-S3353|GT-S3370|GT-S3650|GT-S3653|GT-S3770|GT-S3850|GT-S5210|GT-S5220|GT-S5229|GT-S5230|GT-S5233|GT-S5250|GT-S5253|GT-S5260|GT-S5263|GT-S5270|GT-S5300|GT-S5330|GT-S5350|GT-S5360|GT-S5363|GT-S5369|GT-S5380|GT-S5380D|GT-S5560|GT-S5570|GT-S5600|GT-S5603|GT-S5610|GT-S5620|GT-S5660|GT-S5670|GT-S5690|GT-S5750|GT-S5780|GT-S5830|GT-S5839|GT-S6102|GT-S6500|GT-S7070|GT-S7200|GT-S7220|GT-S7230|GT-S7233|GT-S7250|GT-S7500|GT-S7530|GT-S7550|GT-S7562|GT-S7710|GT-S8000|GT-S8003|GT-S8500|GT-S8530|GT-S8600|SCH-A310|SCH-A530|SCH-A570|SCH-A610|SCH-A630|SCH-A650|SCH-A790|SCH-A795|SCH-A850|SCH-A870|SCH-A890|SCH-A930|SCH-A950|SCH-A970|SCH-A990|SCH-I100|SCH-I110|SCH-I400|SCH-I405|SCH-I500|SCH-I510|SCH-I515|SCH-I600|SCH-I730|SCH-I760|SCH-I770|SCH-I830|SCH-I910|SCH-I920|SCH-I959|SCH-LC11|SCH-N150|SCH-N300|SCH-R100|SCH-R300|SCH-R351|SCH-R400|SCH-R410|SCH-T300|SCH-U310|SCH-U320|SCH-U350|SCH-U360|SCH-U365|SCH-U370|SCH-U380|SCH-U410|SCH-U430|SCH-U450|SCH-U460|SCH-U470|SCH-U490|SCH-U540|SCH-U550|SCH-U620|SCH-U640|SCH-U650|SCH-U660|SCH-U700|SCH-U740|SCH-U750|SCH-U810|SCH-U820|SCH-U900|SCH-U940|SCH-U960|SCS-26UC|SGH-A107|SGH-A117|SGH-A127|SGH-A137|SGH-A157|SGH-A167|SGH-A177|SGH-A187|SGH-A197|SGH-A227|SGH-A237|SGH-A257|SGH-A437|SGH-A517|SGH-A597|SGH-A637|SGH-A657|SGH-A667|SGH-A687|SGH-A697|SGH-A707|SGH-A717|SGH-A727|SGH-A737|SGH-A747|SGH-A767|SGH-A777|SGH-A797|SGH-A817|SGH-A827|SGH-A837|SGH-A847|SGH-A867|SGH-A877|SGH-A887|SGH-A897|SGH-A927|SGH-B100|SGH-B130|SGH-B200|SGH-B220|SGH-C100|SGH-C110|SGH-C120|SGH-C130|SGH-C140|SGH-C160|SGH-C170|SGH-C180|SGH-C200|SGH-C207|SGH-C210|SGH-C225|SGH-C230|SGH-C417|SGH-C450|SGH-D307|SGH-D347|SGH-D357|SGH-D407|SGH-D415|SGH-D780|SGH-D807|SGH-D980|SGH-E105|SGH-E200|SGH-E315|SGH-E316|SGH-E317|SGH-E335|SGH-E590|SGH-E635|SGH-E715|SGH-E890|SGH-F300|SGH-F480|SGH-I200|SGH-I300|SGH-I320|SGH-I550|SGH-I577|SGH-I600|SGH-I607|SGH-I617|SGH-I627|SGH-I637|SGH-I677|SGH-I700|SGH-I717|SGH-I727|SGH-i747M|SGH-I777|SGH-I780|SGH-I827|SGH-I847|SGH-I857|SGH-I896|SGH-I897|SGH-I900|SGH-I907|SGH-I917|SGH-I927|SGH-I937|SGH-I997|SGH-J150|SGH-J200|SGH-L170|SGH-L700|SGH-M110|SGH-M150|SGH-M200|SGH-N105|SGH-N500|SGH-N600|SGH-N620|SGH-N625|SGH-N700|SGH-N710|SGH-P107|SGH-P207|SGH-P300|SGH-P310|SGH-P520|SGH-P735|SGH-P777|SGH-Q105|SGH-R210|SGH-R220|SGH-R225|SGH-S105|SGH-S307|SGH-T109|SGH-T119|SGH-T139|SGH-T209|SGH-T219|SGH-T229|SGH-T239|SGH-T249|SGH-T259|SGH-T309|SGH-T319|SGH-T329|SGH-T339|SGH-T349|SGH-T359|SGH-T369|SGH-T379|SGH-T409|SGH-T429|SGH-T439|SGH-T459|SGH-T469|SGH-T479|SGH-T499|SGH-T509|SGH-T519|SGH-T539|SGH-T559|SGH-T589|SGH-T609|SGH-T619|SGH-T629|SGH-T639|SGH-T659|SGH-T669|SGH-T679|SGH-T709|SGH-T719|SGH-T729|SGH-T739|SGH-T746|SGH-T749|SGH-T759|SGH-T769|SGH-T809|SGH-T819|SGH-T839|SGH-T919|SGH-T929|SGH-T939|SGH-T959|SGH-T989|SGH-U100|SGH-U200|SGH-U800|SGH-V205|SGH-V206|SGH-X100|SGH-X105|SGH-X120|SGH-X140|SGH-X426|SGH-X427|SGH-X475|SGH-X495|SGH-X497|SGH-X507|SGH-X600|SGH-X610|SGH-X620|SGH-X630|SGH-X700|SGH-X820|SGH-X890|SGH-Z130|SGH-Z150|SGH-Z170|SGH-ZX10|SGH-ZX20|SHW-M110|SPH-A120|SPH-A400|SPH-A420|SPH-A460|SPH-A500|SPH-A560|SPH-A600|SPH-A620|SPH-A660|SPH-A700|SPH-A740|SPH-A760|SPH-A790|SPH-A800|SPH-A820|SPH-A840|SPH-A880|SPH-A900|SPH-A940|SPH-A960|SPH-D600|SPH-D700|SPH-D710|SPH-D720|SPH-I300|SPH-I325|SPH-I330|SPH-I350|SPH-I500|SPH-I600|SPH-I700|SPH-L700|SPH-M100|SPH-M220|SPH-M240|SPH-M300|SPH-M305|SPH-M320|SPH-M330|SPH-M350|SPH-M360|SPH-M370|SPH-M380|SPH-M510|SPH-M540|SPH-M550|SPH-M560|SPH-M570|SPH-M580|SPH-M610|SPH-M620|SPH-M630|SPH-M800|SPH-M810|SPH-M850|SPH-M900|SPH-M910|SPH-M920|SPH-M930|SPH-N100|SPH-N200|SPH-N240|SPH-N300|SPH-N400|SPH-Z400|SWC-E100|SCH-i909|GT-N7100|GT-N7105|SCH-I535|SM-N900A|SGH-I317|SGH-T999L|GT-S5360B|GT-I8262|GT-S6802|GT-S6312|GT-S6310|GT-S5312|GT-S5310|GT-I9105|GT-I8510|GT-S6790N|SM-G7105|SM-N9005|GT-S5301|GT-I9295|GT-I9195|SM-C101|GT-S7392|GT-S7560|GT-B7610|GT-I5510|GT-S7582|GT-S7530E|GT-I8750|SM-G9006V|SM-G9008V|SM-G9009D|SM-G900A|SM-G900D|SM-G900F|SM-G900H|SM-G900I|SM-G900J|SM-G900K|SM-G900L|SM-G900M|SM-G900P|SM-G900R4|SM-G900S|SM-G900T|SM-G900V|SM-G900W8|SHV-E160K|SCH-P709|SCH-P729|SM-T2558|GT-I9205|SM-G9350|SM-J120F|SM-G920F|SM-G920V|SM-G930F|SM-N910C|SM-A310F|GT-I9190|SM-J500FN|SM-G903F|SM-J330F",LG:"\\bLG\\b;|LG[- ]?(C800|C900|E400|E610|E900|E-900|F160|F180K|F180L|F180S|730|855|L160|LS740|LS840|LS970|LU6200|MS690|MS695|MS770|MS840|MS870|MS910|P500|P700|P705|VM696|AS680|AS695|AX840|C729|E970|GS505|272|C395|E739BK|E960|L55C|L75C|LS696|LS860|P769BK|P350|P500|P509|P870|UN272|US730|VS840|VS950|LN272|LN510|LS670|LS855|LW690|MN270|MN510|P509|P769|P930|UN200|UN270|UN510|UN610|US670|US740|US760|UX265|UX840|VN271|VN530|VS660|VS700|VS740|VS750|VS910|VS920|VS930|VX9200|VX11000|AX840A|LW770|P506|P925|P999|E612|D955|D802|MS323|M257)|LM-G710",Sony:"SonyST|SonyLT|SonyEricsson|SonyEricssonLT15iv|LT18i|E10i|LT28h|LT26w|SonyEricssonMT27i|C5303|C6902|C6903|C6906|C6943|D2533",Asus:"Asus.*Galaxy|PadFone.*Mobile",NokiaLumia:"Lumia [0-9]{3,4}",Micromax:"Micromax.*\\b(A210|A92|A88|A72|A111|A110Q|A115|A116|A110|A90S|A26|A51|A35|A54|A25|A27|A89|A68|A65|A57|A90)\\b",Palm:"PalmSource|Palm",Vertu:"Vertu|Vertu.*Ltd|Vertu.*Ascent|Vertu.*Ayxta|Vertu.*Constellation(F|Quest)?|Vertu.*Monika|Vertu.*Signature",Pantech:"PANTECH|IM-A850S|IM-A840S|IM-A830L|IM-A830K|IM-A830S|IM-A820L|IM-A810K|IM-A810S|IM-A800S|IM-T100K|IM-A725L|IM-A780L|IM-A775C|IM-A770K|IM-A760S|IM-A750K|IM-A740S|IM-A730S|IM-A720L|IM-A710K|IM-A690L|IM-A690S|IM-A650S|IM-A630K|IM-A600S|VEGA PTL21|PT003|P8010|ADR910L|P6030|P6020|P9070|P4100|P9060|P5000|CDM8992|TXT8045|ADR8995|IS11PT|P2030|P6010|P8000|PT002|IS06|CDM8999|P9050|PT001|TXT8040|P2020|P9020|P2000|P7040|P7000|C790",Fly:"IQ230|IQ444|IQ450|IQ440|IQ442|IQ441|IQ245|IQ256|IQ236|IQ255|IQ235|IQ245|IQ275|IQ240|IQ285|IQ280|IQ270|IQ260|IQ250",Wiko:"KITE 4G|HIGHWAY|GETAWAY|STAIRWAY|DARKSIDE|DARKFULL|DARKNIGHT|DARKMOON|SLIDE|WAX 4G|RAINBOW|BLOOM|SUNSET|GOA(?!nna)|LENNY|BARRY|IGGY|OZZY|CINK FIVE|CINK PEAX|CINK PEAX 2|CINK SLIM|CINK SLIM 2|CINK +|CINK KING|CINK PEAX|CINK SLIM|SUBLIM",iMobile:"i-mobile (IQ|i-STYLE|idea|ZAA|Hitz)",SimValley:"\\b(SP-80|XT-930|SX-340|XT-930|SX-310|SP-360|SP60|SPT-800|SP-120|SPT-800|SP-140|SPX-5|SPX-8|SP-100|SPX-8|SPX-12)\\b",Wolfgang:"AT-B24D|AT-AS50HD|AT-AS40W|AT-AS55HD|AT-AS45q2|AT-B26D|AT-AS50Q",Alcatel:"Alcatel",Nintendo:"Nintendo (3DS|Switch)",Amoi:"Amoi",INQ:"INQ",OnePlus:"ONEPLUS",GenericPhone:"Tapatalk|PDA;|SAGEM|\\bmmp\\b|pocket|\\bpsp\\b|symbian|Smartphone|smartfon|treo|up.browser|up.link|vodafone|\\bwap\\b|nokia|Series40|Series60|S60|SonyEricsson|N900|MAUI.*WAP.*Browser"},tablets:{iPad:"iPad|iPad.*Mobile",NexusTablet:"Android.*Nexus[\\s]+(7|9|10)",GoogleTablet:"Android.*Pixel C",SamsungTablet:"SAMSUNG.*Tablet|Galaxy.*Tab|SC-01C|GT-P1000|GT-P1003|GT-P1010|GT-P3105|GT-P6210|GT-P6800|GT-P6810|GT-P7100|GT-P7300|GT-P7310|GT-P7500|GT-P7510|SCH-I800|SCH-I815|SCH-I905|SGH-I957|SGH-I987|SGH-T849|SGH-T859|SGH-T869|SPH-P100|GT-P3100|GT-P3108|GT-P3110|GT-P5100|GT-P5110|GT-P6200|GT-P7320|GT-P7511|GT-N8000|GT-P8510|SGH-I497|SPH-P500|SGH-T779|SCH-I705|SCH-I915|GT-N8013|GT-P3113|GT-P5113|GT-P8110|GT-N8010|GT-N8005|GT-N8020|GT-P1013|GT-P6201|GT-P7501|GT-N5100|GT-N5105|GT-N5110|SHV-E140K|SHV-E140L|SHV-E140S|SHV-E150S|SHV-E230K|SHV-E230L|SHV-E230S|SHW-M180K|SHW-M180L|SHW-M180S|SHW-M180W|SHW-M300W|SHW-M305W|SHW-M380K|SHW-M380S|SHW-M380W|SHW-M430W|SHW-M480K|SHW-M480S|SHW-M480W|SHW-M485W|SHW-M486W|SHW-M500W|GT-I9228|SCH-P739|SCH-I925|GT-I9200|GT-P5200|GT-P5210|GT-P5210X|SM-T311|SM-T310|SM-T310X|SM-T210|SM-T210R|SM-T211|SM-P600|SM-P601|SM-P605|SM-P900|SM-P901|SM-T217|SM-T217A|SM-T217S|SM-P6000|SM-T3100|SGH-I467|XE500|SM-T110|GT-P5220|GT-I9200X|GT-N5110X|GT-N5120|SM-P905|SM-T111|SM-T2105|SM-T315|SM-T320|SM-T320X|SM-T321|SM-T520|SM-T525|SM-T530NU|SM-T230NU|SM-T330NU|SM-T900|XE500T1C|SM-P605V|SM-P905V|SM-T337V|SM-T537V|SM-T707V|SM-T807V|SM-P600X|SM-P900X|SM-T210X|SM-T230|SM-T230X|SM-T325|GT-P7503|SM-T531|SM-T330|SM-T530|SM-T705|SM-T705C|SM-T535|SM-T331|SM-T800|SM-T700|SM-T537|SM-T807|SM-P907A|SM-T337A|SM-T537A|SM-T707A|SM-T807A|SM-T237|SM-T807P|SM-P607T|SM-T217T|SM-T337T|SM-T807T|SM-T116NQ|SM-T116BU|SM-P550|SM-T350|SM-T550|SM-T9000|SM-P9000|SM-T705Y|SM-T805|GT-P3113|SM-T710|SM-T810|SM-T815|SM-T360|SM-T533|SM-T113|SM-T335|SM-T715|SM-T560|SM-T670|SM-T677|SM-T377|SM-T567|SM-T357T|SM-T555|SM-T561|SM-T713|SM-T719|SM-T813|SM-T819|SM-T580|SM-T355Y?|SM-T280|SM-T817A|SM-T820|SM-W700|SM-P580|SM-T587|SM-P350|SM-P555M|SM-P355M|SM-T113NU|SM-T815Y|SM-T585|SM-T285|SM-T825|SM-W708|SM-T835|SM-T830|SM-T837V|SM-T720|SM-T510|SM-T387V",Kindle:"Kindle|Silk.*Accelerated|Android.*\\b(KFOT|KFTT|KFJWI|KFJWA|KFOTE|KFSOWI|KFTHWI|KFTHWA|KFAPWI|KFAPWA|WFJWAE|KFSAWA|KFSAWI|KFASWI|KFARWI|KFFOWI|KFGIWI|KFMEWI)\\b|Android.*Silk/[0-9.]+ like Chrome/[0-9.]+ (?!Mobile)",SurfaceTablet:"Windows NT [0-9.]+; ARM;.*(Tablet|ARMBJS)",HPTablet:"HP Slate (7|8|10)|HP ElitePad 900|hp-tablet|EliteBook.*Touch|HP 8|Slate 21|HP SlateBook 10",AsusTablet:"^.*PadFone((?!Mobile).)*$|Transformer|TF101|TF101G|TF300T|TF300TG|TF300TL|TF700T|TF700KL|TF701T|TF810C|ME171|ME301T|ME302C|ME371MG|ME370T|ME372MG|ME172V|ME173X|ME400C|Slider SL101|\\bK00F\\b|\\bK00C\\b|\\bK00E\\b|\\bK00L\\b|TX201LA|ME176C|ME102A|\\bM80TA\\b|ME372CL|ME560CG|ME372CG|ME302KL| K010 | K011 | K017 | K01E |ME572C|ME103K|ME170C|ME171C|\\bME70C\\b|ME581C|ME581CL|ME8510C|ME181C|P01Y|PO1MA|P01Z|\\bP027\\b|\\bP024\\b|\\bP00C\\b",BlackBerryTablet:"PlayBook|RIM Tablet",HTCtablet:"HTC_Flyer_P512|HTC Flyer|HTC Jetstream|HTC-P715a|HTC EVO View 4G|PG41200|PG09410",MotorolaTablet:"xoom|sholest|MZ615|MZ605|MZ505|MZ601|MZ602|MZ603|MZ604|MZ606|MZ607|MZ608|MZ609|MZ615|MZ616|MZ617",NookTablet:"Android.*Nook|NookColor|nook browser|BNRV200|BNRV200A|BNTV250|BNTV250A|BNTV400|BNTV600|LogicPD Zoom2",AcerTablet:"Android.*; \\b(A100|A101|A110|A200|A210|A211|A500|A501|A510|A511|A700|A701|W500|W500P|W501|W501P|W510|W511|W700|G100|G100W|B1-A71|B1-710|B1-711|A1-810|A1-811|A1-830)\\b|W3-810|\\bA3-A10\\b|\\bA3-A11\\b|\\bA3-A20\\b|\\bA3-A30",ToshibaTablet:"Android.*(AT100|AT105|AT200|AT205|AT270|AT275|AT300|AT305|AT1S5|AT500|AT570|AT700|AT830)|TOSHIBA.*FOLIO",LGTablet:"\\bL-06C|LG-V909|LG-V900|LG-V700|LG-V510|LG-V500|LG-V410|LG-V400|LG-VK810\\b",FujitsuTablet:"Android.*\\b(F-01D|F-02F|F-05E|F-10D|M532|Q572)\\b",PrestigioTablet:"PMP3170B|PMP3270B|PMP3470B|PMP7170B|PMP3370B|PMP3570C|PMP5870C|PMP3670B|PMP5570C|PMP5770D|PMP3970B|PMP3870C|PMP5580C|PMP5880D|PMP5780D|PMP5588C|PMP7280C|PMP7280C3G|PMP7280|PMP7880D|PMP5597D|PMP5597|PMP7100D|PER3464|PER3274|PER3574|PER3884|PER5274|PER5474|PMP5097CPRO|PMP5097|PMP7380D|PMP5297C|PMP5297C_QUAD|PMP812E|PMP812E3G|PMP812F|PMP810E|PMP880TD|PMT3017|PMT3037|PMT3047|PMT3057|PMT7008|PMT5887|PMT5001|PMT5002",LenovoTablet:"Lenovo TAB|Idea(Tab|Pad)( A1|A10| K1|)|ThinkPad([ ]+)?Tablet|YT3-850M|YT3-X90L|YT3-X90F|YT3-X90X|Lenovo.*(S2109|S2110|S5000|S6000|K3011|A3000|A3500|A1000|A2107|A2109|A1107|A5500|A7600|B6000|B8000|B8080)(-|)(FL|F|HV|H|)|TB-X103F|TB-X304X|TB-X304F|TB-X304L|TB-X505F|TB-X505L|TB-X505X|TB-X605F|TB-X605L|TB-8703F|TB-8703X|TB-8703N|TB-8704N|TB-8704F|TB-8704X|TB-8704V|TB-7304F|TB-7304I|TB-7304X|Tab2A7-10F|Tab2A7-20F|TB2-X30L|YT3-X50L|YT3-X50F|YT3-X50M|YT-X705F|YT-X703F|YT-X703L|YT-X705L|YT-X705X|TB2-X30F|TB2-X30L|TB2-X30M|A2107A-F|A2107A-H|TB3-730F|TB3-730M|TB3-730X|TB-7504F|TB-7504X",DellTablet:"Venue 11|Venue 8|Venue 7|Dell Streak 10|Dell Streak 7",YarvikTablet:"Android.*\\b(TAB210|TAB211|TAB224|TAB250|TAB260|TAB264|TAB310|TAB360|TAB364|TAB410|TAB411|TAB420|TAB424|TAB450|TAB460|TAB461|TAB464|TAB465|TAB467|TAB468|TAB07-100|TAB07-101|TAB07-150|TAB07-151|TAB07-152|TAB07-200|TAB07-201-3G|TAB07-210|TAB07-211|TAB07-212|TAB07-214|TAB07-220|TAB07-400|TAB07-485|TAB08-150|TAB08-200|TAB08-201-3G|TAB08-201-30|TAB09-100|TAB09-211|TAB09-410|TAB10-150|TAB10-201|TAB10-211|TAB10-400|TAB10-410|TAB13-201|TAB274EUK|TAB275EUK|TAB374EUK|TAB462EUK|TAB474EUK|TAB9-200)\\b",MedionTablet:"Android.*\\bOYO\\b|LIFE.*(P9212|P9514|P9516|S9512)|LIFETAB",ArnovaTablet:"97G4|AN10G2|AN7bG3|AN7fG3|AN8G3|AN8cG3|AN7G3|AN9G3|AN7dG3|AN7dG3ST|AN7dG3ChildPad|AN10bG3|AN10bG3DT|AN9G2",IntensoTablet:"INM8002KP|INM1010FP|INM805ND|Intenso Tab|TAB1004",IRUTablet:"M702pro",MegafonTablet:"MegaFon V9|\\bZTE V9\\b|Android.*\\bMT7A\\b",EbodaTablet:"E-Boda (Supreme|Impresspeed|Izzycomm|Essential)",AllViewTablet:"Allview.*(Viva|Alldro|City|Speed|All TV|Frenzy|Quasar|Shine|TX1|AX1|AX2)",ArchosTablet:"\\b(101G9|80G9|A101IT)\\b|Qilive 97R|Archos5|\\bARCHOS (70|79|80|90|97|101|FAMILYPAD|)(b|c|)(G10| Cobalt| TITANIUM(HD|)| Xenon| Neon|XSK| 2| XS 2| PLATINUM| CARBON|GAMEPAD)\\b",AinolTablet:"NOVO7|NOVO8|NOVO10|Novo7Aurora|Novo7Basic|NOVO7PALADIN|novo9-Spark",NokiaLumiaTablet:"Lumia 2520",SonyTablet:"Sony.*Tablet|Xperia Tablet|Sony Tablet S|SO-03E|SGPT12|SGPT13|SGPT114|SGPT121|SGPT122|SGPT123|SGPT111|SGPT112|SGPT113|SGPT131|SGPT132|SGPT133|SGPT211|SGPT212|SGPT213|SGP311|SGP312|SGP321|EBRD1101|EBRD1102|EBRD1201|SGP351|SGP341|SGP511|SGP512|SGP521|SGP541|SGP551|SGP621|SGP641|SGP612|SOT31|SGP771|SGP611|SGP612|SGP712",PhilipsTablet:"\\b(PI2010|PI3000|PI3100|PI3105|PI3110|PI3205|PI3210|PI3900|PI4010|PI7000|PI7100)\\b",CubeTablet:"Android.*(K8GT|U9GT|U10GT|U16GT|U17GT|U18GT|U19GT|U20GT|U23GT|U30GT)|CUBE U8GT",CobyTablet:"MID1042|MID1045|MID1125|MID1126|MID7012|MID7014|MID7015|MID7034|MID7035|MID7036|MID7042|MID7048|MID7127|MID8042|MID8048|MID8127|MID9042|MID9740|MID9742|MID7022|MID7010",MIDTablet:"M9701|M9000|M9100|M806|M1052|M806|T703|MID701|MID713|MID710|MID727|MID760|MID830|MID728|MID933|MID125|MID810|MID732|MID120|MID930|MID800|MID731|MID900|MID100|MID820|MID735|MID980|MID130|MID833|MID737|MID960|MID135|MID860|MID736|MID140|MID930|MID835|MID733|MID4X10",MSITablet:"MSI \\b(Primo 73K|Primo 73L|Primo 81L|Primo 77|Primo 93|Primo 75|Primo 76|Primo 73|Primo 81|Primo 91|Primo 90|Enjoy 71|Enjoy 7|Enjoy 10)\\b",SMiTTablet:"Android.*(\\bMID\\b|MID-560|MTV-T1200|MTV-PND531|MTV-P1101|MTV-PND530)",RockChipTablet:"Android.*(RK2818|RK2808A|RK2918|RK3066)|RK2738|RK2808A",FlyTablet:"IQ310|Fly Vision",bqTablet:"Android.*(bq)?.*\\b(Elcano|Curie|Edison|Maxwell|Kepler|Pascal|Tesla|Hypatia|Platon|Newton|Livingstone|Cervantes|Avant|Aquaris ([E|M]10|M8))\\b|Maxwell.*Lite|Maxwell.*Plus",HuaweiTablet:"MediaPad|MediaPad 7 Youth|IDEOS S7|S7-201c|S7-202u|S7-101|S7-103|S7-104|S7-105|S7-106|S7-201|S7-Slim|M2-A01L|BAH-L09|BAH-W09|AGS-L09|CMR-AL19",NecTablet:"\\bN-06D|\\bN-08D",PantechTablet:"Pantech.*P4100",BronchoTablet:"Broncho.*(N701|N708|N802|a710)",VersusTablet:"TOUCHPAD.*[78910]|\\bTOUCHTAB\\b",ZyncTablet:"z1000|Z99 2G|z930|z990|z909|Z919|z900",PositivoTablet:"TB07STA|TB10STA|TB07FTA|TB10FTA",NabiTablet:"Android.*\\bNabi",KoboTablet:"Kobo Touch|\\bK080\\b|\\bVox\\b Build|\\bArc\\b Build",DanewTablet:"DSlide.*\\b(700|701R|702|703R|704|802|970|971|972|973|974|1010|1012)\\b",TexetTablet:"NaviPad|TB-772A|TM-7045|TM-7055|TM-9750|TM-7016|TM-7024|TM-7026|TM-7041|TM-7043|TM-7047|TM-8041|TM-9741|TM-9747|TM-9748|TM-9751|TM-7022|TM-7021|TM-7020|TM-7011|TM-7010|TM-7023|TM-7025|TM-7037W|TM-7038W|TM-7027W|TM-9720|TM-9725|TM-9737W|TM-1020|TM-9738W|TM-9740|TM-9743W|TB-807A|TB-771A|TB-727A|TB-725A|TB-719A|TB-823A|TB-805A|TB-723A|TB-715A|TB-707A|TB-705A|TB-709A|TB-711A|TB-890HD|TB-880HD|TB-790HD|TB-780HD|TB-770HD|TB-721HD|TB-710HD|TB-434HD|TB-860HD|TB-840HD|TB-760HD|TB-750HD|TB-740HD|TB-730HD|TB-722HD|TB-720HD|TB-700HD|TB-500HD|TB-470HD|TB-431HD|TB-430HD|TB-506|TB-504|TB-446|TB-436|TB-416|TB-146SE|TB-126SE",PlaystationTablet:"Playstation.*(Portable|Vita)",TrekstorTablet:"ST10416-1|VT10416-1|ST70408-1|ST702xx-1|ST702xx-2|ST80208|ST97216|ST70104-2|VT10416-2|ST10216-2A|SurfTab",PyleAudioTablet:"\\b(PTBL10CEU|PTBL10C|PTBL72BC|PTBL72BCEU|PTBL7CEU|PTBL7C|PTBL92BC|PTBL92BCEU|PTBL9CEU|PTBL9CUK|PTBL9C)\\b",AdvanTablet:"Android.* \\b(E3A|T3X|T5C|T5B|T3E|T3C|T3B|T1J|T1F|T2A|T1H|T1i|E1C|T1-E|T5-A|T4|E1-B|T2Ci|T1-B|T1-D|O1-A|E1-A|T1-A|T3A|T4i)\\b ",DanyTechTablet:"Genius Tab G3|Genius Tab S2|Genius Tab Q3|Genius Tab G4|Genius Tab Q4|Genius Tab G-II|Genius TAB GII|Genius TAB GIII|Genius Tab S1",GalapadTablet:"Android.*\\bG1\\b(?!\\))",MicromaxTablet:"Funbook|Micromax.*\\b(P250|P560|P360|P362|P600|P300|P350|P500|P275)\\b",KarbonnTablet:"Android.*\\b(A39|A37|A34|ST8|ST10|ST7|Smart Tab3|Smart Tab2)\\b",AllFineTablet:"Fine7 Genius|Fine7 Shine|Fine7 Air|Fine8 Style|Fine9 More|Fine10 Joy|Fine11 Wide",PROSCANTablet:"\\b(PEM63|PLT1023G|PLT1041|PLT1044|PLT1044G|PLT1091|PLT4311|PLT4311PL|PLT4315|PLT7030|PLT7033|PLT7033D|PLT7035|PLT7035D|PLT7044K|PLT7045K|PLT7045KB|PLT7071KG|PLT7072|PLT7223G|PLT7225G|PLT7777G|PLT7810K|PLT7849G|PLT7851G|PLT7852G|PLT8015|PLT8031|PLT8034|PLT8036|PLT8080K|PLT8082|PLT8088|PLT8223G|PLT8234G|PLT8235G|PLT8816K|PLT9011|PLT9045K|PLT9233G|PLT9735|PLT9760G|PLT9770G)\\b",YONESTablet:"BQ1078|BC1003|BC1077|RK9702|BC9730|BC9001|IT9001|BC7008|BC7010|BC708|BC728|BC7012|BC7030|BC7027|BC7026",ChangJiaTablet:"TPC7102|TPC7103|TPC7105|TPC7106|TPC7107|TPC7201|TPC7203|TPC7205|TPC7210|TPC7708|TPC7709|TPC7712|TPC7110|TPC8101|TPC8103|TPC8105|TPC8106|TPC8203|TPC8205|TPC8503|TPC9106|TPC9701|TPC97101|TPC97103|TPC97105|TPC97106|TPC97111|TPC97113|TPC97203|TPC97603|TPC97809|TPC97205|TPC10101|TPC10103|TPC10106|TPC10111|TPC10203|TPC10205|TPC10503",GUTablet:"TX-A1301|TX-M9002|Q702|kf026",PointOfViewTablet:"TAB-P506|TAB-navi-7-3G-M|TAB-P517|TAB-P-527|TAB-P701|TAB-P703|TAB-P721|TAB-P731N|TAB-P741|TAB-P825|TAB-P905|TAB-P925|TAB-PR945|TAB-PL1015|TAB-P1025|TAB-PI1045|TAB-P1325|TAB-PROTAB[0-9]+|TAB-PROTAB25|TAB-PROTAB26|TAB-PROTAB27|TAB-PROTAB26XL|TAB-PROTAB2-IPS9|TAB-PROTAB30-IPS9|TAB-PROTAB25XXL|TAB-PROTAB26-IPS10|TAB-PROTAB30-IPS10",OvermaxTablet:"OV-(SteelCore|NewBase|Basecore|Baseone|Exellen|Quattor|EduTab|Solution|ACTION|BasicTab|TeddyTab|MagicTab|Stream|TB-08|TB-09)|Qualcore 1027",HCLTablet:"HCL.*Tablet|Connect-3G-2.0|Connect-2G-2.0|ME Tablet U1|ME Tablet U2|ME Tablet G1|ME Tablet X1|ME Tablet Y2|ME Tablet Sync",DPSTablet:"DPS Dream 9|DPS Dual 7",VistureTablet:"V97 HD|i75 3G|Visture V4( HD)?|Visture V5( HD)?|Visture V10",CrestaTablet:"CTP(-)?810|CTP(-)?818|CTP(-)?828|CTP(-)?838|CTP(-)?888|CTP(-)?978|CTP(-)?980|CTP(-)?987|CTP(-)?988|CTP(-)?989",MediatekTablet:"\\bMT8125|MT8389|MT8135|MT8377\\b",ConcordeTablet:"Concorde([ ]+)?Tab|ConCorde ReadMan",GoCleverTablet:"GOCLEVER TAB|A7GOCLEVER|M1042|M7841|M742|R1042BK|R1041|TAB A975|TAB A7842|TAB A741|TAB A741L|TAB M723G|TAB M721|TAB A1021|TAB I921|TAB R721|TAB I720|TAB T76|TAB R70|TAB R76.2|TAB R106|TAB R83.2|TAB M813G|TAB I721|GCTA722|TAB I70|TAB I71|TAB S73|TAB R73|TAB R74|TAB R93|TAB R75|TAB R76.1|TAB A73|TAB A93|TAB A93.2|TAB T72|TAB R83|TAB R974|TAB R973|TAB A101|TAB A103|TAB A104|TAB A104.2|R105BK|M713G|A972BK|TAB A971|TAB R974.2|TAB R104|TAB R83.3|TAB A1042",ModecomTablet:"FreeTAB 9000|FreeTAB 7.4|FreeTAB 7004|FreeTAB 7800|FreeTAB 2096|FreeTAB 7.5|FreeTAB 1014|FreeTAB 1001 |FreeTAB 8001|FreeTAB 9706|FreeTAB 9702|FreeTAB 7003|FreeTAB 7002|FreeTAB 1002|FreeTAB 7801|FreeTAB 1331|FreeTAB 1004|FreeTAB 8002|FreeTAB 8014|FreeTAB 9704|FreeTAB 1003",VoninoTablet:"\\b(Argus[ _]?S|Diamond[ _]?79HD|Emerald[ _]?78E|Luna[ _]?70C|Onyx[ _]?S|Onyx[ _]?Z|Orin[ _]?HD|Orin[ _]?S|Otis[ _]?S|SpeedStar[ _]?S|Magnet[ _]?M9|Primus[ _]?94[ _]?3G|Primus[ _]?94HD|Primus[ _]?QS|Android.*\\bQ8\\b|Sirius[ _]?EVO[ _]?QS|Sirius[ _]?QS|Spirit[ _]?S)\\b",ECSTablet:"V07OT2|TM105A|S10OT1|TR10CS1",StorexTablet:"eZee[_']?(Tab|Go)[0-9]+|TabLC7|Looney Tunes Tab",VodafoneTablet:"SmartTab([ ]+)?[0-9]+|SmartTabII10|SmartTabII7|VF-1497|VFD 1400",EssentielBTablet:"Smart[ ']?TAB[ ]+?[0-9]+|Family[ ']?TAB2",RossMoorTablet:"RM-790|RM-997|RMD-878G|RMD-974R|RMT-705A|RMT-701|RME-601|RMT-501|RMT-711",iMobileTablet:"i-mobile i-note",TolinoTablet:"tolino tab [0-9.]+|tolino shine",AudioSonicTablet:"\\bC-22Q|T7-QC|T-17B|T-17P\\b",AMPETablet:"Android.* A78 ",SkkTablet:"Android.* (SKYPAD|PHOENIX|CYCLOPS)",TecnoTablet:"TECNO P9|TECNO DP8D",JXDTablet:"Android.* \\b(F3000|A3300|JXD5000|JXD3000|JXD2000|JXD300B|JXD300|S5800|S7800|S602b|S5110b|S7300|S5300|S602|S603|S5100|S5110|S601|S7100a|P3000F|P3000s|P101|P200s|P1000m|P200m|P9100|P1000s|S6600b|S908|P1000|P300|S18|S6600|S9100)\\b",iJoyTablet:"Tablet (Spirit 7|Essentia|Galatea|Fusion|Onix 7|Landa|Titan|Scooby|Deox|Stella|Themis|Argon|Unique 7|Sygnus|Hexen|Finity 7|Cream|Cream X2|Jade|Neon 7|Neron 7|Kandy|Scape|Saphyr 7|Rebel|Biox|Rebel|Rebel 8GB|Myst|Draco 7|Myst|Tab7-004|Myst|Tadeo Jones|Tablet Boing|Arrow|Draco Dual Cam|Aurix|Mint|Amity|Revolution|Finity 9|Neon 9|T9w|Amity 4GB Dual Cam|Stone 4GB|Stone 8GB|Andromeda|Silken|X2|Andromeda II|Halley|Flame|Saphyr 9,7|Touch 8|Planet|Triton|Unique 10|Hexen 10|Memphis 4GB|Memphis 8GB|Onix 10)",FX2Tablet:"FX2 PAD7|FX2 PAD10",XoroTablet:"KidsPAD 701|PAD[ ]?712|PAD[ ]?714|PAD[ ]?716|PAD[ ]?717|PAD[ ]?718|PAD[ ]?720|PAD[ ]?721|PAD[ ]?722|PAD[ ]?790|PAD[ ]?792|PAD[ ]?900|PAD[ ]?9715D|PAD[ ]?9716DR|PAD[ ]?9718DR|PAD[ ]?9719QR|PAD[ ]?9720QR|TelePAD1030|Telepad1032|TelePAD730|TelePAD731|TelePAD732|TelePAD735Q|TelePAD830|TelePAD9730|TelePAD795|MegaPAD 1331|MegaPAD 1851|MegaPAD 2151",ViewsonicTablet:"ViewPad 10pi|ViewPad 10e|ViewPad 10s|ViewPad E72|ViewPad7|ViewPad E100|ViewPad 7e|ViewSonic VB733|VB100a",VerizonTablet:"QTAQZ3|QTAIR7|QTAQTZ3|QTASUN1|QTASUN2|QTAXIA1",OdysTablet:"LOOX|XENO10|ODYS[ -](Space|EVO|Xpress|NOON)|\\bXELIO\\b|Xelio10Pro|XELIO7PHONETAB|XELIO10EXTREME|XELIOPT2|NEO_QUAD10",CaptivaTablet:"CAPTIVA PAD",IconbitTablet:"NetTAB|NT-3702|NT-3702S|NT-3702S|NT-3603P|NT-3603P|NT-0704S|NT-0704S|NT-3805C|NT-3805C|NT-0806C|NT-0806C|NT-0909T|NT-0909T|NT-0907S|NT-0907S|NT-0902S|NT-0902S",TeclastTablet:"T98 4G|\\bP80\\b|\\bX90HD\\b|X98 Air|X98 Air 3G|\\bX89\\b|P80 3G|\\bX80h\\b|P98 Air|\\bX89HD\\b|P98 3G|\\bP90HD\\b|P89 3G|X98 3G|\\bP70h\\b|P79HD 3G|G18d 3G|\\bP79HD\\b|\\bP89s\\b|\\bA88\\b|\\bP10HD\\b|\\bP19HD\\b|G18 3G|\\bP78HD\\b|\\bA78\\b|\\bP75\\b|G17s 3G|G17h 3G|\\bP85t\\b|\\bP90\\b|\\bP11\\b|\\bP98t\\b|\\bP98HD\\b|\\bG18d\\b|\\bP85s\\b|\\bP11HD\\b|\\bP88s\\b|\\bA80HD\\b|\\bA80se\\b|\\bA10h\\b|\\bP89\\b|\\bP78s\\b|\\bG18\\b|\\bP85\\b|\\bA70h\\b|\\bA70\\b|\\bG17\\b|\\bP18\\b|\\bA80s\\b|\\bA11s\\b|\\bP88HD\\b|\\bA80h\\b|\\bP76s\\b|\\bP76h\\b|\\bP98\\b|\\bA10HD\\b|\\bP78\\b|\\bP88\\b|\\bA11\\b|\\bA10t\\b|\\bP76a\\b|\\bP76t\\b|\\bP76e\\b|\\bP85HD\\b|\\bP85a\\b|\\bP86\\b|\\bP75HD\\b|\\bP76v\\b|\\bA12\\b|\\bP75a\\b|\\bA15\\b|\\bP76Ti\\b|\\bP81HD\\b|\\bA10\\b|\\bT760VE\\b|\\bT720HD\\b|\\bP76\\b|\\bP73\\b|\\bP71\\b|\\bP72\\b|\\bT720SE\\b|\\bC520Ti\\b|\\bT760\\b|\\bT720VE\\b|T720-3GE|T720-WiFi",OndaTablet:"\\b(V975i|Vi30|VX530|V701|Vi60|V701s|Vi50|V801s|V719|Vx610w|VX610W|V819i|Vi10|VX580W|Vi10|V711s|V813|V811|V820w|V820|Vi20|V711|VI30W|V712|V891w|V972|V819w|V820w|Vi60|V820w|V711|V813s|V801|V819|V975s|V801|V819|V819|V818|V811|V712|V975m|V101w|V961w|V812|V818|V971|V971s|V919|V989|V116w|V102w|V973|Vi40)\\b[\\s]+|V10 \\b4G\\b",JaytechTablet:"TPC-PA762",BlaupunktTablet:"Endeavour 800NG|Endeavour 1010",DigmaTablet:"\\b(iDx10|iDx9|iDx8|iDx7|iDxD7|iDxD8|iDsQ8|iDsQ7|iDsQ8|iDsD10|iDnD7|3TS804H|iDsQ11|iDj7|iDs10)\\b",EvolioTablet:"ARIA_Mini_wifi|Aria[ _]Mini|Evolio X10|Evolio X7|Evolio X8|\\bEvotab\\b|\\bNeura\\b",LavaTablet:"QPAD E704|\\bIvoryS\\b|E-TAB IVORY|\\bE-TAB\\b",AocTablet:"MW0811|MW0812|MW0922|MTK8382|MW1031|MW0831|MW0821|MW0931|MW0712",MpmanTablet:"MP11 OCTA|MP10 OCTA|MPQC1114|MPQC1004|MPQC994|MPQC974|MPQC973|MPQC804|MPQC784|MPQC780|\\bMPG7\\b|MPDCG75|MPDCG71|MPDC1006|MP101DC|MPDC9000|MPDC905|MPDC706HD|MPDC706|MPDC705|MPDC110|MPDC100|MPDC99|MPDC97|MPDC88|MPDC8|MPDC77|MP709|MID701|MID711|MID170|MPDC703|MPQC1010",CelkonTablet:"CT695|CT888|CT[\\s]?910|CT7 Tab|CT9 Tab|CT3 Tab|CT2 Tab|CT1 Tab|C820|C720|\\bCT-1\\b",WolderTablet:"miTab \\b(DIAMOND|SPACE|BROOKLYN|NEO|FLY|MANHATTAN|FUNK|EVOLUTION|SKY|GOCAR|IRON|GENIUS|POP|MINT|EPSILON|BROADWAY|JUMP|HOP|LEGEND|NEW AGE|LINE|ADVANCE|FEEL|FOLLOW|LIKE|LINK|LIVE|THINK|FREEDOM|CHICAGO|CLEVELAND|BALTIMORE-GH|IOWA|BOSTON|SEATTLE|PHOENIX|DALLAS|IN 101|MasterChef)\\b",MediacomTablet:"M-MPI10C3G|M-SP10EG|M-SP10EGP|M-SP10HXAH|M-SP7HXAH|M-SP10HXBH|M-SP8HXAH|M-SP8MXA",MiTablet:"\\bMI PAD\\b|\\bHM NOTE 1W\\b",NibiruTablet:"Nibiru M1|Nibiru Jupiter One",NexoTablet:"NEXO NOVA|NEXO 10|NEXO AVIO|NEXO FREE|NEXO GO|NEXO EVO|NEXO 3G|NEXO SMART|NEXO KIDDO|NEXO MOBI",LeaderTablet:"TBLT10Q|TBLT10I|TBL-10WDKB|TBL-10WDKBO2013|TBL-W230V2|TBL-W450|TBL-W500|SV572|TBLT7I|TBA-AC7-8G|TBLT79|TBL-8W16|TBL-10W32|TBL-10WKB|TBL-W100",UbislateTablet:"UbiSlate[\\s]?7C",PocketBookTablet:"Pocketbook",KocasoTablet:"\\b(TB-1207)\\b",HisenseTablet:"\\b(F5281|E2371)\\b",Hudl:"Hudl HT7S3|Hudl 2",TelstraTablet:"T-Hub2",GenericTablet:"Android.*\\b97D\\b|Tablet(?!.*PC)|BNTV250A|MID-WCDMA|LogicPD Zoom2|\\bA7EB\\b|CatNova8|A1_07|CT704|CT1002|\\bM721\\b|rk30sdk|\\bEVOTAB\\b|M758A|ET904|ALUMIUM10|Smartfren Tab|Endeavour 1010|Tablet-PC-4|Tagi Tab|\\bM6pro\\b|CT1020W|arc 10HD|\\bTP750\\b|\\bQTAQZ3\\b|WVT101|TM1088|KT107"},oss:{AndroidOS:"Android",BlackBerryOS:"blackberry|\\bBB10\\b|rim tablet os",PalmOS:"PalmOS|avantgo|blazer|elaine|hiptop|palm|plucker|xiino",SymbianOS:"Symbian|SymbOS|Series60|Series40|SYB-[0-9]+|\\bS60\\b",WindowsMobileOS:"Windows CE.*(PPC|Smartphone|Mobile|[0-9]{3}x[0-9]{3})|Windows Mobile|Windows Phone [0-9.]+|WCE;",WindowsPhoneOS:"Windows Phone 10.0|Windows Phone 8.1|Windows Phone 8.0|Windows Phone OS|XBLWP7|ZuneWP7|Windows NT 6.[23]; ARM;",iOS:"\\biPhone.*Mobile|\\biPod|\\biPad|AppleCoreMedia",iPadOS:"CPU OS 13",MeeGoOS:"MeeGo",MaemoOS:"Maemo",JavaOS:"J2ME/|\\bMIDP\\b|\\bCLDC\\b",webOS:"webOS|hpwOS",badaOS:"\\bBada\\b",BREWOS:"BREW"},uas:{Chrome:"\\bCrMo\\b|CriOS|Android.*Chrome/[.0-9]* (Mobile)?",Dolfin:"\\bDolfin\\b",Opera:"Opera.*Mini|Opera.*Mobi|Android.*Opera|Mobile.*OPR/[0-9.]+$|Coast/[0-9.]+",Skyfire:"Skyfire",Edge:"Mobile Safari/[.0-9]* Edge",IE:"IEMobile|MSIEMobile",Firefox:"fennec|firefox.*maemo|(Mobile|Tablet).*Firefox|Firefox.*Mobile|FxiOS",Bolt:"bolt",TeaShark:"teashark",Blazer:"Blazer",Safari:"Version.*Mobile.*Safari|Safari.*Mobile|MobileSafari",WeChat:"\\bMicroMessenger\\b",UCBrowser:"UC.*Browser|UCWEB",baiduboxapp:"baiduboxapp",baidubrowser:"baidubrowser",DiigoBrowser:"DiigoBrowser",Mercury:"\\bMercury\\b",ObigoBrowser:"Obigo",NetFront:"NF-Browser",GenericBrowser:"NokiaBrowser|OviBrowser|OneBrowser|TwonkyBeamBrowser|SEMC.*Browser|FlyFlow|Minimo|NetFront|Novarra-Vision|MQQBrowser|MicroMessenger",PaleMoon:"Android.*PaleMoon|Mobile.*PaleMoon"},props:{Mobile:"Mobile/[VER]",Build:"Build/[VER]",Version:"Version/[VER]",VendorID:"VendorID/[VER]",iPad:"iPad.*CPU[a-z ]+[VER]",iPhone:"iPhone.*CPU[a-z ]+[VER]",iPod:"iPod.*CPU[a-z ]+[VER]",Kindle:"Kindle/[VER]",Chrome:["Chrome/[VER]","CriOS/[VER]","CrMo/[VER]"],Coast:["Coast/[VER]"],Dolfin:"Dolfin/[VER]",Firefox:["Firefox/[VER]","FxiOS/[VER]"],Fennec:"Fennec/[VER]",Edge:"Edge/[VER]",IE:["IEMobile/[VER];","IEMobile [VER]","MSIE [VER];","Trident/[0-9.]+;.*rv:[VER]"],NetFront:"NetFront/[VER]",NokiaBrowser:"NokiaBrowser/[VER]",Opera:[" OPR/[VER]","Opera Mini/[VER]","Version/[VER]"],"Opera Mini":"Opera Mini/[VER]","Opera Mobi":"Version/[VER]",UCBrowser:["UCWEB[VER]","UC.*Browser/[VER]"],MQQBrowser:"MQQBrowser/[VER]",MicroMessenger:"MicroMessenger/[VER]",baiduboxapp:"baiduboxapp/[VER]",baidubrowser:"baidubrowser/[VER]",SamsungBrowser:"SamsungBrowser/[VER]",Iron:"Iron/[VER]",Safari:["Version/[VER]","Safari/[VER]"],Skyfire:"Skyfire/[VER]",Tizen:"Tizen/[VER]",Webkit:"webkit[ /][VER]",PaleMoon:"PaleMoon/[VER]",Gecko:"Gecko/[VER]",Trident:"Trident/[VER]",Presto:"Presto/[VER]",Goanna:"Goanna/[VER]",iOS:" \\bi?OS\\b [VER][ ;]{1}",Android:"Android [VER]",BlackBerry:["BlackBerry[\\w]+/[VER]","BlackBerry.*Version/[VER]","Version/[VER]"],BREW:"BREW [VER]",Java:"Java/[VER]","Windows Phone OS":["Windows Phone OS [VER]","Windows Phone [VER]"],"Windows Phone":"Windows Phone [VER]","Windows CE":"Windows CE/[VER]","Windows NT":"Windows NT [VER]",Symbian:["SymbianOS/[VER]","Symbian/[VER]"],webOS:["webOS/[VER]","hpwOS/[VER];"]},utils:{Bot:"Googlebot|facebookexternalhit|Google-AMPHTML|s~amp-validator|AdsBot-Google|Google Keyword Suggestion|Facebot|YandexBot|YandexMobileBot|bingbot|ia_archiver|AhrefsBot|Ezooms|GSLFbot|WBSearchBot|Twitterbot|TweetmemeBot|Twikle|PaperLiBot|Wotbox|UnwindFetchor|Exabot|MJ12bot|YandexImages|TurnitinBot|Pingdom|contentkingapp",MobileBot:"Googlebot-Mobile|AdsBot-Google-Mobile|YahooSeeker/M1A1-R2D2",DesktopMode:"WPDesktop",TV:"SonyDTV|HbbTV",WebKit:"(webkit)[ /]([\\w.]+)",Console:"\\b(Nintendo|Nintendo WiiU|Nintendo 3DS|Nintendo Switch|PLAYSTATION|Xbox)\\b",Watch:"SM-V700"}},detectMobileBrowsers:{fullPattern:/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i,shortPattern:/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i,tabletPattern:/android|ipad|playbook|silk/i}},u=Object.prototype.hasOwnProperty;return c.FALLBACK_PHONE="UnknownPhone",c.FALLBACK_TABLET="UnknownTablet",c.FALLBACK_MOBILE="UnknownMobile",l="isArray"in Array?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},function(){var e,t,n,i,o,r,a=c.mobileDetectRules;for(e in a.props)if(u.call(a.props,e)){for(t=a.props[e],o=(t=!l(t)?[t]:t).length,i=0;i<o;++i)0<=(r=(n=t[i]).indexOf("[VER]"))&&(n=n.substring(0,r)+"([\\w._\\+]+)"+n.substring(r+5)),t[i]=new RegExp(n,"i");a.props[e]=t}s(a.oss),s(a.phones),s(a.tablets),s(a.uas),s(a.utils),a.oss0={WindowsPhoneOS:a.oss.WindowsPhoneOS,WindowsMobileOS:a.oss.WindowsMobileOS}}(),c.findMatch=function(e,t){for(var n in e)if(u.call(e,n)&&e[n].test(t))return n;return null},c.findMatches=function(e,t){var n,i=[];for(n in e)u.call(e,n)&&e[n].test(t)&&i.push(n);return i},c.getVersionStr=function(e,t){var n,i,o,r,a=c.mobileDetectRules.props;if(u.call(a,e))for(o=(n=a[e]).length,i=0;i<o;++i)if(null!==(r=n[i].exec(t)))return r[1];return null},c.getVersion=function(e,t){t=c.getVersionStr(e,t);return t?c.prepareVersionNo(t):NaN},c.prepareVersionNo=function(e){var t=e.split(/[a-z._ \/\-]/i);return 1===t.length&&(e=t[0]),1<t.length&&(e=t[0]+".",t.shift(),e+=t.join("")),Number(e)},c.isMobileFallback=function(e){return c.detectMobileBrowsers.fullPattern.test(e)||c.detectMobileBrowsers.shortPattern.test(e.substr(0,4))},c.isTabletFallback=function(e){return c.detectMobileBrowsers.tabletPattern.test(e)},c.prepareDetectionCache=function(e,t,n){var i;if(e.mobile===r)return(i=c.findMatch(c.mobileDetectRules.tablets,t))?(e.mobile=e.tablet=i,void(e.phone=null)):(i=c.findMatch(c.mobileDetectRules.phones,t))?(e.mobile=e.phone=i,void(e.tablet=null)):void(c.isMobileFallback(t)?(n=o.isPhoneSized(n))===r?(e.mobile=c.FALLBACK_MOBILE,e.tablet=e.phone=null):n?(e.mobile=e.phone=c.FALLBACK_PHONE,e.tablet=null):(e.mobile=e.tablet=c.FALLBACK_TABLET,e.phone=null):c.isTabletFallback(t)?(e.mobile=e.tablet=c.FALLBACK_TABLET,e.phone=null):e.mobile=e.tablet=e.phone=null)},c.mobileGrade=function(e){var t=null!==e.mobile();return e.os("iOS")&&4.3<=e.version("iPad")||e.os("iOS")&&3.1<=e.version("iPhone")||e.os("iOS")&&3.1<=e.version("iPod")||2.1<e.version("Android")&&e.is("Webkit")||7<=e.version("Windows Phone OS")||e.is("BlackBerry")&&6<=e.version("BlackBerry")||e.match("Playbook.*Tablet")||1.4<=e.version("webOS")&&e.match("Palm|Pre|Pixi")||e.match("hp.*TouchPad")||e.is("Firefox")&&12<=e.version("Firefox")||e.is("Chrome")&&e.is("AndroidOS")&&4<=e.version("Android")||e.is("Skyfire")&&4.1<=e.version("Skyfire")&&e.is("AndroidOS")&&2.3<=e.version("Android")||e.is("Opera")&&11<e.version("Opera Mobi")&&e.is("AndroidOS")||e.is("MeeGoOS")||e.is("Tizen")||e.is("Dolfin")&&2<=e.version("Bada")||(e.is("UC Browser")||e.is("Dolfin"))&&2.3<=e.version("Android")||e.match("Kindle Fire")||e.is("Kindle")&&3<=e.version("Kindle")||e.is("AndroidOS")&&e.is("NookTablet")||11<=e.version("Chrome")&&!t||5<=e.version("Safari")&&!t||4<=e.version("Firefox")&&!t||7<=e.version("MSIE")&&!t||10<=e.version("Opera")&&!t?"A":e.os("iOS")&&e.version("iPad")<4.3||e.os("iOS")&&e.version("iPhone")<3.1||e.os("iOS")&&e.version("iPod")<3.1||e.is("Blackberry")&&5<=e.version("BlackBerry")&&e.version("BlackBerry")<6||5<=e.version("Opera Mini")&&e.version("Opera Mini")<=6.5&&(2.3<=e.version("Android")||e.is("iOS"))||e.match("NokiaN8|NokiaC7|N97.*Series60|Symbian/3")||11<=e.version("Opera Mobi")&&e.is("SymbianOS")?"B":(e.version("BlackBerry")<5||e.match("MSIEMobile|Windows CE.*Mobile")||e.version("Windows Mobile"),"C")},c.detectOS=function(e){return c.findMatch(c.mobileDetectRules.oss0,e)||c.findMatch(c.mobileDetectRules.oss,e)},c.getDeviceSmallerSide=function(){return window.screen.width<window.screen.height?window.screen.width:window.screen.height},o.prototype={constructor:o,mobile:function(){return c.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.mobile},phone:function(){return c.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.phone},tablet:function(){return c.prepareDetectionCache(this._cache,this.ua,this.maxPhoneWidth),this._cache.tablet},userAgent:function(){return this._cache.userAgent===r&&(this._cache.userAgent=c.findMatch(c.mobileDetectRules.uas,this.ua)),this._cache.userAgent},userAgents:function(){return this._cache.userAgents===r&&(this._cache.userAgents=c.findMatches(c.mobileDetectRules.uas,this.ua)),this._cache.userAgents},os:function(){return this._cache.os===r&&(this._cache.os=c.detectOS(this.ua)),this._cache.os},version:function(e){return c.getVersion(e,this.ua)},versionStr:function(e){return c.getVersionStr(e,this.ua)},is:function(e){return n(this.userAgents(),e)||t(e,this.os())||t(e,this.phone())||t(e,this.tablet())||n(c.findMatches(c.mobileDetectRules.utils,this.ua),e)},match:function(e){return(e=!(e instanceof RegExp)?new RegExp(e,"i"):e).test(this.ua)},isPhoneSized:function(e){return o.isPhoneSized(e||this.maxPhoneWidth)},mobileGrade:function(){return this._cache.grade===r&&(this._cache.grade=c.mobileGrade(this)),this._cache.grade}},"undefined"!=typeof window&&window.screen?o.isPhoneSized=function(e){return e<0?r:c.getDeviceSmallerSide()<=e}:o.isPhoneSized=function(){},o._impl=c,o.version="1.4.4 2019-09-21",o})}(),function(e){"function"==typeof define&&define.amd&&define.amd.jQuery?define(["jquery"],e):e("undefined"!=typeof module&&module.exports?require("jquery"):jQuery)}(function(se){function i(e,a){function t(e){if(!(!0===Q.data(De+"_intouch")||0<se(e.target).closest(a.excludedElements,Q).length)){var t=e.originalEvent||e;if(!t.pointerType||"mouse"!=t.pointerType||0!=a.fallbackToMouseEvents){var n,i=t.touches,o=i?i[0]:t;return Y=Me,i?Z=i.length:!1!==a.preventDefaultEvents&&e.preventDefault(),z=_=F=null,U=1,K=q=j=X=W=0,(e={})[le]=E(le),e[ce]=E(ce),e[ue]=E(ue),e[de]=E(de),$=e,P(),w(0,o),!i||Z===a.fingers||a.fingers===Pe||g()?(ee=I(),2==Z&&(w(1,i[1]),j=q=B(J[0].start,J[1].start)),(a.swipeStatus||a.pinchStatus)&&(n=c(t,Y))):n=!1,!1===n?(c(t,Y=Ge),n):(a.hold&&(ae=setTimeout(se.proxy(function(){Q.trigger("hold",[t.target]),a.hold&&(n=a.hold.call(Q,t,t.target))},this),a.longTapThreshold)),M(!0),null)}}}function n(e){var t,n,i,o,r=e.originalEvent||e;Y===Ce||Y===Ge||A()||(t=C((n=r.touches)?n[0]:r),te=I(),n&&(Z=n.length),a.hold&&clearTimeout(ae),Y=we,2==Z&&(0==j?(w(1,n[1]),j=q=B(J[0].start,J[1].start)):(C(n[1]),q=B(J[0].end,J[1].end),J[0].end,J[1].end,z=U<1?fe:pe),U=(q/j*1).toFixed(2),K=Math.abs(j-q)),Z===a.fingers||a.fingers===Pe||!n||g()?(F=D(t.start,t.end),function(e,t){if(!1!==a.preventDefaultEvents)if(a.allowPageScroll===he)e.preventDefault();else{var n=a.allowPageScroll===ge;switch(t){case le:(a.swipeLeft&&n||!n&&a.allowPageScroll!=ye)&&e.preventDefault();break;case ce:(a.swipeRight&&n||!n&&a.allowPageScroll!=ye)&&e.preventDefault();break;case ue:(a.swipeUp&&n||!n&&a.allowPageScroll!=xe)&&e.preventDefault();break;case de:(a.swipeDown&&n||!n&&a.allowPageScroll!=xe)&&e.preventDefault()}}}(e,_=D(t.last,t.end)),i=t.start,o=t.end,W=Math.round(Math.sqrt(Math.pow(o.x-i.x,2)+Math.pow(o.y-i.y,2))),X=H(),n=W,(e=F)!=he&&(n=Math.max(n,G(e)),$[e].distance=n),o=c(r,Y),a.triggerOnTouchEnd&&!a.triggerOnTouchLeave||(i=!0,a.triggerOnTouchLeave&&(e={left:(n=(e=se(e=this)).offset()).left,right:n.left+e.outerWidth(),top:n.top,bottom:n.top+e.outerHeight()},t=t.end,e=e,i=t.x>e.left&&t.x<e.right&&t.y>e.top&&t.y<e.bottom),!a.triggerOnTouchEnd&&i?Y=l(we):a.triggerOnTouchLeave&&!i&&(Y=l(Ce)),Y!=Ge&&Y!=Ce||c(r,Y))):c(r,Y=Ge),!1===o&&c(r,Y=Ge))}function i(e){var t,n=e.originalEvent||e,i=n.touches;if(i){if(i.length&&!A())return t=n,ne=I(),ie=t.touches.length+1,!0;if(i.length&&A())return!0}return A()&&(Z=ie),te=I(),X=H(),p()||!d()?c(n,Y=Ge):a.triggerOnTouchEnd||!1===a.triggerOnTouchEnd&&Y===we?(!1!==a.preventDefaultEvents&&!1!==e.cancelable&&e.preventDefault(),c(n,Y=Ce)):!a.triggerOnTouchEnd&&S()?u(n,Y=Ce,me):Y===we&&c(n,Y=Ge),M(!1),null}function o(){q=j=ee=te=Z=0,P(),M(!(U=1))}function r(e){e=e.originalEvent||e;a.triggerOnTouchLeave&&c(e,Y=l(Ce))}function s(){Q.off(L,t),Q.off(V,o),Q.off(N,n),Q.off(O,i),R&&Q.off(R,r),M(!1)}function l(e){var t=e,n=f(),i=d(),o=p();return!n||o?t=Ge:!i||e!=we||a.triggerOnTouchEnd&&!a.triggerOnTouchLeave?!i&&e==Ce&&a.triggerOnTouchLeave&&(t=Ge):t=Ce,t}function c(e,t){var n,i=e.touches;return(T()&&b()||b())&&(n=u(e,t,Te)),(h()&&g()||g())&&!1!==n&&(n=u(e,t,be)),x()&&y()&&!1!==n?n=u(e,t,ve):X>a.longTapThreshold&&W<Ae&&a.longTap&&!1!==n?n=u(e,t,Se):1!==Z&&Ee||!(isNaN(W)||W<a.threshold)||!S()||!1===n||(n=u(e,t,me)),t===Ge&&o(),t===Ce&&(i&&i.length||o()),n}function u(e,t,n){var i;if(n==Te){if(Q.trigger("swipeStatus",[t,F||null,W||0,X||0,Z,J,_]),a.swipeStatus&&!1===(i=a.swipeStatus.call(Q,e,t,F||null,W||0,X||0,Z,J,_)))return!1;if(t==Ce&&T()){if(clearTimeout(re),clearTimeout(ae),Q.trigger("swipe",[F,W,X,Z,J,_]),a.swipe&&!1===(i=a.swipe.call(Q,e,F,W,X,Z,J,_)))return!1;switch(F){case le:Q.trigger("swipeLeft",[F,W,X,Z,J,_]),a.swipeLeft&&(i=a.swipeLeft.call(Q,e,F,W,X,Z,J,_));break;case ce:Q.trigger("swipeRight",[F,W,X,Z,J,_]),a.swipeRight&&(i=a.swipeRight.call(Q,e,F,W,X,Z,J,_));break;case ue:Q.trigger("swipeUp",[F,W,X,Z,J,_]),a.swipeUp&&(i=a.swipeUp.call(Q,e,F,W,X,Z,J,_));break;case de:Q.trigger("swipeDown",[F,W,X,Z,J,_]),a.swipeDown&&(i=a.swipeDown.call(Q,e,F,W,X,Z,J,_))}}}if(n==be){if(Q.trigger("pinchStatus",[t,z||null,K||0,X||0,Z,U,J]),a.pinchStatus&&!1===(i=a.pinchStatus.call(Q,e,t,z||null,K||0,X||0,Z,U,J)))return!1;if(t==Ce&&h())switch(z){case pe:Q.trigger("pinchIn",[z||null,K||0,X||0,Z,U,J]),a.pinchIn&&(i=a.pinchIn.call(Q,e,z||null,K||0,X||0,Z,U,J));break;case fe:Q.trigger("pinchOut",[z||null,K||0,X||0,Z,U,J]),a.pinchOut&&(i=a.pinchOut.call(Q,e,z||null,K||0,X||0,Z,U,J))}}return n==me?t!==Ge&&t!==Ce||(clearTimeout(re),clearTimeout(ae),y()&&!x()?(oe=I(),re=setTimeout(se.proxy(function(){oe=null,Q.trigger("tap",[e.target]),a.tap&&(i=a.tap.call(Q,e,e.target))},this),a.doubleTapThreshold)):(oe=null,Q.trigger("tap",[e.target]),a.tap&&(i=a.tap.call(Q,e,e.target)))):n==ve?t!==Ge&&t!==Ce||(clearTimeout(re),clearTimeout(ae),oe=null,Q.trigger("doubletap",[e.target]),a.doubleTap&&(i=a.doubleTap.call(Q,e,e.target))):n==Se&&(t!==Ge&&t!==Ce||(clearTimeout(re),oe=null,Q.trigger("longtap",[e.target]),a.longTap&&(i=a.longTap.call(Q,e,e.target)))),i}function d(){var e=!0;return e=null!==a.threshold?W>=a.threshold:e}function p(){var e=!1;return e=null!==a.cancelThreshold&&null!==F?G(F)-W>=a.cancelThreshold:e}function f(){return!a.maxTimeThreshold||!(X>=a.maxTimeThreshold)}function h(){var e=m(),t=v(),n=null===a.pinchThreshold||K>=a.pinchThreshold;return e&&t&&n}function g(){return a.pinchStatus||a.pinchIn||a.pinchOut}function T(){var e=f(),t=d(),n=m(),i=v();return!p()&&i&&n&&t&&e}function b(){return a.swipe||a.swipeStatus||a.swipeLeft||a.swipeRight||a.swipeUp||a.swipeDown}function m(){return Z===a.fingers||a.fingers===Pe||!Ee}function v(){return 0!==J[0].end.x}function S(){return a.tap}function y(){return!!a.doubleTap}function x(){if(null==oe)return!1;var e=I();return y()&&e-oe<=a.doubleTapThreshold}function P(){ie=ne=0}function A(){var e=!1;return e=ne&&I()-ne<=a.fingerReleaseThreshold?!0:e}function M(e){Q&&(!0===e?(Q.on(N,n),Q.on(O,i),R&&Q.on(R,r)):(Q.off(N,n,!1),Q.off(O,i,!1),R&&Q.off(R,r,!1)),Q.data(De+"_intouch",!0===e))}function w(e,t){var n={start:{x:0,y:0},last:{x:0,y:0},end:{x:0,y:0}};return n.start.x=n.last.x=n.end.x=t.pageX||t.clientX,n.start.y=n.last.y=n.end.y=t.pageY||t.clientY,J[e]=n}function C(e){var t=void 0!==e.identifier?e.identifier:0,n=J[t]||null;return(n=null===n?w(t,e):n).last.x=n.end.x,n.last.y=n.end.y,n.end.x=e.pageX||e.clientX,n.end.y=e.pageY||e.clientY,n}function G(e){return $[e]?$[e].distance:void 0}function E(e){return{direction:e,distance:0}}function H(){return te-ee}function B(e,t){var n=Math.abs(e.x-t.x),t=Math.abs(e.y-t.y);return Math.round(Math.sqrt(n*n+t*t))}function D(e,t){if(i=t,(n=e).x==i.x&&n.y==i.y)return he;var n,i,e=(i=t,e=(t=e).x-i.x,t=i.y-t.y,e=Math.atan2(t,e),e=(e=Math.round(180*e/Math.PI))<0?360-Math.abs(e):e);return e<=45&&0<=e||e<=360&&315<=e?le:135<=e&&e<=225?ce:45<e&&e<135?de:ue}function I(){return(new Date).getTime()}var a=se.extend({},a),k=Ee||Be||!a.fallbackToMouseEvents,L=k?Be?He?"MSPointerDown":"pointerdown":"touchstart":"mousedown",N=k?Be?He?"MSPointerMove":"pointermove":"touchmove":"mousemove",O=k?Be?He?"MSPointerUp":"pointerup":"touchend":"mouseup",R=!k||Be?"mouseleave":null,V=Be?He?"MSPointerCancel":"pointercancel":"touchcancel",W=0,F=null,_=null,X=0,j=0,q=0,U=1,K=0,z=0,$=null,Q=se(e),Y="start",Z=0,J={},ee=0,te=0,ne=0,ie=0,oe=0,re=null,ae=null;try{Q.on(L,t),Q.on(V,o)}catch(e){se.error("events not supported "+L+","+V+" on jQuery.swipe")}this.enable=function(){return this.disable(),Q.on(L,t),Q.on(V,o),Q},this.disable=function(){return s(),Q},this.destroy=function(){s(),Q.data(De,null),Q=null},this.option=function(e,t){if("object"==_typeof(e))a=se.extend(a,e);else if(void 0!==a[e]){if(void 0===t)return a[e];a[e]=t}else{if(!e)return a;se.error("Option "+e+" does not exist on jQuery.swipe.options")}return null}}var le="left",ce="right",ue="up",de="down",pe="in",fe="out",he="none",ge="auto",Te="swipe",be="pinch",me="tap",ve="doubletap",Se="longtap",ye="horizontal",xe="vertical",Pe="all",Ae=10,Me="start",we="move",Ce="end",Ge="cancel",Ee="ontouchstart"in window,He=window.navigator.msPointerEnabled&&!window.PointerEvent&&!Ee,Be=(window.PointerEvent||window.navigator.msPointerEnabled)&&!Ee,De="TouchSwipe";se.fn.swipe=function(e){var t=se(this),n=t.data(De);if(n&&"string"==typeof e){if(n[e])return n[e].apply(n,Array.prototype.slice.call(arguments,1));se.error("Method "+e+" does not exist on jQuery.swipe")}else if(n&&"object"==_typeof(e))n.option.apply(n,arguments);else if(!(n||"object"!=_typeof(e)&&e))return function(n){return!n||void 0!==n.allowPageScroll||void 0===n.swipe&&void 0===n.swipeStatus||(n.allowPageScroll=he),void 0!==n.click&&void 0===n.tap&&(n.tap=n.click),n=n||{},n=se.extend({},se.fn.swipe.defaults,n),this.each(function(){var e=se(this),t=e.data(De);t||(t=new i(this,n),e.data(De,t))})}.apply(this,arguments);return t},se.fn.swipe.version="1.6.18",se.fn.swipe.defaults={fingers:1,threshold:75,cancelThreshold:null,pinchThreshold:20,maxTimeThreshold:null,fingerReleaseThreshold:250,longTapThreshold:500,doubleTapThreshold:200,swipe:null,swipeLeft:null,swipeRight:null,swipeUp:null,swipeDown:null,swipeStatus:null,pinchIn:null,pinchOut:null,pinchStatus:null,click:null,tap:null,doubleTap:null,longTap:null,hold:null,triggerOnTouchEnd:!0,triggerOnTouchLeave:!1,allowPageScroll:"auto",fallbackToMouseEvents:!0,excludedElements:".noSwipe",preventDefaultEvents:!0},se.fn.swipe.phases={PHASE_START:Me,PHASE_MOVE:we,PHASE_END:Ce,PHASE_CANCEL:Ge},se.fn.swipe.directions={LEFT:le,RIGHT:ce,UP:ue,DOWN:de,IN:pe,OUT:fe},se.fn.swipe.pageScroll={NONE:he,HORIZONTAL:ye,VERTICAL:xe,AUTO:ge},se.fn.swipe.fingers={ONE:1,TWO:2,THREE:3,FOUR:4,FIVE:5,ALL:Pe}}),function(){function t(e){e.addClass("active");var t,n,i,o,r=e.find(".colors__hidden-conteiner"),a=(t=e,n=0,i=$(window).width(),a=t.closest(".colors__list").find(".color__link"),o=a.width()*a.length,a=t.find(".color__item-desc"),t=parseInt(a.css("margin-left")),a=parseInt(a.css("margin-right")),{conteiner:n=window.matchMedia("(max-width: 850px)").matches?i-o:500,textConteiner:n-t-a}),e=e.find(".color__item-desc");r.width(a.conteiner),e.width(a.textConteiner),r.css("opacity","0.8")}function n(e){(e=e.closest(".colors__list")).find(".color__item").removeClass("active"),(e=e.find(".colors__hidden-conteiner")).width(0),e.css("opacity","0")}$(".colors__list").on("click",function(e){e.preventDefault();e=$(e.target).closest(".color__item");e.hasClass("active")?n(e):(n(e),t(e))})}(),function(){var e=document.querySelector(".hamburger"),t=document.querySelector(".hide-menu"),n=document.querySelector(".hide-menu__close");e.addEventListener("click",function(e){e&&(t.style.display="block")}),n.addEventListener("click",function(e){e&&(t.style.display="none")})}(),$(".form").submit(function(e){e.preventDefault();var t=$(e.currentTarget),n=t.find("[name='name']"),i=t.find("[name='phone']"),o=t.find("[name='comment']"),r=t.find("[name='to']"),a=t.find("[name='street']"),s=t.find("[name='building']"),l=t.find("[name='housing']"),c=t.find("[name='flat']"),e=t.find("[name='floor']"),u=$("#modal").find(".send-complate__title");(t=t,[n,i,o,r].forEach(function(e){e.removeClass("input-error"),""===e.val().trim()&&e.addClass("input-error")}),0===t.find(".input-error").length)&&$.ajax({url:"https://webdev-api.loftschool.com/sendmail",method:"post",data:{name:n.val(),phone:i.val(),comment:o.val(),to:r.val(),street:a.val(),building:s.val(),housing:l.val(),flat:c.val(),floor:e.val()},success:function(e){u.text(e.message),$.fancybox.open({src:"#modal",type:"inline"}),jQuery(".form")[0].reset()},error:function(e){e=e.responseJSON.message;u.text(e),$.fancybox.open({src:"#modal",type:"inline"})}})}),$(".js-button").on("click",function(e){e.preventDefault(),$.fancybox.close()}),function(){var e=document.querySelector(".offers");e.addEventListener("mouseover",function(e){e=$(e.target).children(".settings__list");e&&e.closest(".settings__gear").addClass("block")}),e.addEventListener("mouseout",function(e){$(e.target).find(".settings__gear").removeClass("block")})}(),$(".pagginator__element").on("click",function(e){e.preventDefault();var n,t=$(e.currentTarget),e=t.children(".pagginator__link").attr("data-open"),e=(n=e,$(".rewiews__person").filter(function(e,t){return $(t).attr("data-view")==n})),t=t.closest(".pagginator__element");e.addClass("isActive").siblings().removeClass("isActive"),t.addClass("active").siblings().removeClass("active")}),function(){function i(e,t,n){e.eq(t).addClass(n).siblings().removeClass(n)}var o=$(".section"),r=$(".wrapper__conteiner"),a=$(".fixed-menu"),s=a.find(".fixed-menu__element"),e=new MobileDetect(window.navigator.userAgent).mobile(),l=!1;function c(e){var t,n;l||(l=!0,t=function(e){e*=-100;return isNaN(e)?(console.error("ÐÐµÑÐµÐ´Ð°Ð½Ð¾ Ð½Ðµ Ð²ÐµÑÐ½Ð¾Ðµ Ð·Ð½Ð°ÑÐµÐ½Ð¸Ðµ countSectionPosition"),0):e}(e),n=e,"white"==o.eq(n).attr("data-color-theme")?a.addClass("activeClass"):a.removeClass("activeClass"),r.css({transform:"translateY(".concat(t,"%)")}),i(o,e,"active"),setTimeout(function(){l=!1,i(s,e,"fixed-menu__element--active")},1300))}function u(){var e=o.filter(".active"),t=e.next(),n=e.prev();return{next:function(){t.length&&c(t.index())},prev:function(){n.length&&c(n.index())}}}o.first().addClass("active"),$(window).on("wheel",function(e){var t=e.originalEvent.deltaY,e=u();0<t&&e.next(),t<0&&e.prev()}),$(window).on("keydown",function(e){var t=e.target.tagName.toLowerCase(),t="input"===t||"textarea"===t,n=u();if(!t)switch(e.keyCode){case 38:n.prev();break;case 40:n.next()}}),$(".wrapper").on("touchmove",function(e){e.preventDefault()}),$("[data-scroll-to]").click(function(e){e.preventDefault();e=$(e.currentTarget).attr("data-scroll-to"),e=$("[data-section-id=".concat(e,"]"));c(e.index())}),e&&$("body").swipe({swipe:function(e,t){u()["right"==t?"next":"left"==t?"prev":"down"==t?"prev":"up"==t?"next":""]()}})}(),function(){var t=$(".offers__list").bxSlider({pager:!1,controls:!1,slideMargin:100,shrinkItems:!0});$(".arrow-left").on("click",function(e){e.preventDefault(),t.goToPrevSlide()}),$(".arrow-right").on("click",function(e){e.preventDefault(),t.goToNextSlide()})}(),function(){function i(e){var t=e.find(".team__hidden-conteiner");e.find(".team__item").removeClass("active"),t.height(0)}$(".team__link").click(function(e){var t=$(e.currentTarget),n=t.closest(".team__list");t.closest(".team__item").hasClass("active")?i(n):(i(n),n=(e=t).closest(".team__item"),t=n.find(".team__hidden-conteiner"),e=t.find(".team__hidden-conteiner__block").height(),n.addClass("active"),t.height(e))})}();var playerContainer=$(".player");function editVolume(){$(".player__vol-headphones").click(function(e){0==player.getVolume()?(player.setVolume("100"),$(".player__vol-button").css({left:"".concat(100,"%")})):(player.setVolume("0"),$(".player__vol-button").css({left:"".concat(0,"%")}))}),$(".player__vol-line").on("click",function(e){var t=$(e.currentTarget),t=e.originalEvent.layerX/t.width()*100;$(".player__vol-button").css({left:"".concat(t,"%")}),player.setVolume(t)})}var eventsInit=function(){$(".player__start").click(function(e){e.preventDefault(),playerContainer.hasClass("paused")?(playerContainer.removeClass("paused"),player.pauseVideo()):(playerContainer.addClass("paused"),player.playVideo())}),$(".player__playback").on("click",function(e){var t=$(e.currentTarget),e=e.originalEvent.layerX/t.width()*100,t=player.getDuration()/100*e;$(".player__playback-button").css({left:"".concat(e,"%")}),player.seekTo(t)})},formatTime=function(e){var t=Math.round(e),e=n(Math.floor(t/60)),t=n(t-60*e);function n(e){return e<10?"0".concat(e):e}return"".concat(e," : ").concat(t)},onPlayerReady=function(){var e,n=player.getDuration();$(".player__duration-estimate").text(formatTime(n)),void 0!==e&&clearInterval(e),e=setInterval(function(){var e=player.getCurrentTime(),t=e/n*100;$(".player__playback-button").css({left:"".concat(t,"%")}),$(".player__duration-completed").text(formatTime(e))},1e3)};function onYouTubeIframeAPIReady(){player=new YT.Player("yt-player",{height:"390",width:"660",videoId:"LXb3EKWsInQ",events:{onReady:onPlayerReady},playerVars:{controls:0,disablekb:1,showinfo:0,rel:0,autoplay:0,modestbranding:0}})}eventsInit(),editVolume(),ymaps.ready(function(){for(var e=new ymaps.Map("map",{center:[55.76,37.64],zoom:11,controls:[]}),t=[[55.75,37.5],[55.75,37.71],[55.7,37.7]],n=new ymaps.GeoObjectCollection({},{draggable:!1,iconLayout:"default#image",iconImageHref:"./img/marker.svg",iconImageSize:[46,57],iconImageOffset:[-35,-52]}),i=0;i<t.length;i++)n.add(new ymaps.Placemark(t[i]));e.geoObjects.add(n),e.behaviors.disable("scrollZoom")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
